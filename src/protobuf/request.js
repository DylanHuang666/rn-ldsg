/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
import * as $protobuf from "protobufjs/minimal";

// Common aliases
const $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

export const ActivityCmd = $root.ActivityCmd = (() => {

    /**
     * Namespace ActivityCmd.
     * @exports ActivityCmd
     * @namespace
     */
    const ActivityCmd = {};

    ActivityCmd.getTaskList = (function() {

        /**
         * Properties of a getTaskList.
         * @memberof ActivityCmd
         * @interface IgetTaskList
         * @property {number|null} [type] getTaskList type
         */

        /**
         * Constructs a new getTaskList.
         * @memberof ActivityCmd
         * @classdesc Represents a getTaskList.
         * @implements IgetTaskList
         * @constructor
         * @param {ActivityCmd.IgetTaskList=} [properties] Properties to set
         */
        function getTaskList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getTaskList type.
         * @member {number} type
         * @memberof ActivityCmd.getTaskList
         * @instance
         */
        getTaskList.prototype.type = 0;

        /**
         * Encodes the specified getTaskList message. Does not implicitly {@link ActivityCmd.getTaskList.verify|verify} messages.
         * @function encode
         * @memberof ActivityCmd.getTaskList
         * @static
         * @param {ActivityCmd.IgetTaskList} message getTaskList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getTaskList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified getTaskList message, length delimited. Does not implicitly {@link ActivityCmd.getTaskList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActivityCmd.getTaskList
         * @static
         * @param {ActivityCmd.IgetTaskList} message getTaskList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getTaskList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getTaskList;
    })();

    ActivityCmd.drawTaskAward = (function() {

        /**
         * Properties of a drawTaskAward.
         * @memberof ActivityCmd
         * @interface IdrawTaskAward
         * @property {string} taskId drawTaskAward taskId
         */

        /**
         * Constructs a new drawTaskAward.
         * @memberof ActivityCmd
         * @classdesc Represents a drawTaskAward.
         * @implements IdrawTaskAward
         * @constructor
         * @param {ActivityCmd.IdrawTaskAward=} [properties] Properties to set
         */
        function drawTaskAward(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * drawTaskAward taskId.
         * @member {string} taskId
         * @memberof ActivityCmd.drawTaskAward
         * @instance
         */
        drawTaskAward.prototype.taskId = "";

        /**
         * Encodes the specified drawTaskAward message. Does not implicitly {@link ActivityCmd.drawTaskAward.verify|verify} messages.
         * @function encode
         * @memberof ActivityCmd.drawTaskAward
         * @static
         * @param {ActivityCmd.IdrawTaskAward} message drawTaskAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawTaskAward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.taskId);
            return writer;
        };

        /**
         * Encodes the specified drawTaskAward message, length delimited. Does not implicitly {@link ActivityCmd.drawTaskAward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActivityCmd.drawTaskAward
         * @static
         * @param {ActivityCmd.IdrawTaskAward} message drawTaskAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawTaskAward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return drawTaskAward;
    })();

    ActivityCmd.clientTriggerTask = (function() {

        /**
         * Properties of a clientTriggerTask.
         * @memberof ActivityCmd
         * @interface IclientTriggerTask
         * @property {number} condId clientTriggerTask condId
         * @property {string|null} [targetId] clientTriggerTask targetId
         * @property {number|null} [addNum] clientTriggerTask addNum
         */

        /**
         * Constructs a new clientTriggerTask.
         * @memberof ActivityCmd
         * @classdesc Represents a clientTriggerTask.
         * @implements IclientTriggerTask
         * @constructor
         * @param {ActivityCmd.IclientTriggerTask=} [properties] Properties to set
         */
        function clientTriggerTask(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * clientTriggerTask condId.
         * @member {number} condId
         * @memberof ActivityCmd.clientTriggerTask
         * @instance
         */
        clientTriggerTask.prototype.condId = 0;

        /**
         * clientTriggerTask targetId.
         * @member {string} targetId
         * @memberof ActivityCmd.clientTriggerTask
         * @instance
         */
        clientTriggerTask.prototype.targetId = "";

        /**
         * clientTriggerTask addNum.
         * @member {number} addNum
         * @memberof ActivityCmd.clientTriggerTask
         * @instance
         */
        clientTriggerTask.prototype.addNum = 0;

        /**
         * Encodes the specified clientTriggerTask message. Does not implicitly {@link ActivityCmd.clientTriggerTask.verify|verify} messages.
         * @function encode
         * @memberof ActivityCmd.clientTriggerTask
         * @static
         * @param {ActivityCmd.IclientTriggerTask} message clientTriggerTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        clientTriggerTask.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.condId);
            if (message.targetId != null && message.hasOwnProperty("targetId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.targetId);
            if (message.addNum != null && message.hasOwnProperty("addNum"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.addNum);
            return writer;
        };

        /**
         * Encodes the specified clientTriggerTask message, length delimited. Does not implicitly {@link ActivityCmd.clientTriggerTask.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActivityCmd.clientTriggerTask
         * @static
         * @param {ActivityCmd.IclientTriggerTask} message clientTriggerTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        clientTriggerTask.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return clientTriggerTask;
    })();

    ActivityCmd.getActivityState = (function() {

        /**
         * Properties of a getActivityState.
         * @memberof ActivityCmd
         * @interface IgetActivityState
         * @property {string} actId getActivityState actId
         */

        /**
         * Constructs a new getActivityState.
         * @memberof ActivityCmd
         * @classdesc Represents a getActivityState.
         * @implements IgetActivityState
         * @constructor
         * @param {ActivityCmd.IgetActivityState=} [properties] Properties to set
         */
        function getActivityState(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getActivityState actId.
         * @member {string} actId
         * @memberof ActivityCmd.getActivityState
         * @instance
         */
        getActivityState.prototype.actId = "";

        /**
         * Encodes the specified getActivityState message. Does not implicitly {@link ActivityCmd.getActivityState.verify|verify} messages.
         * @function encode
         * @memberof ActivityCmd.getActivityState
         * @static
         * @param {ActivityCmd.IgetActivityState} message getActivityState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getActivityState.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.actId);
            return writer;
        };

        /**
         * Encodes the specified getActivityState message, length delimited. Does not implicitly {@link ActivityCmd.getActivityState.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActivityCmd.getActivityState
         * @static
         * @param {ActivityCmd.IgetActivityState} message getActivityState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getActivityState.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getActivityState;
    })();

    ActivityCmd.activityPop = (function() {

        /**
         * Properties of an activityPop.
         * @memberof ActivityCmd
         * @interface IactivityPop
         * @property {string} actId activityPop actId
         */

        /**
         * Constructs a new activityPop.
         * @memberof ActivityCmd
         * @classdesc Represents an activityPop.
         * @implements IactivityPop
         * @constructor
         * @param {ActivityCmd.IactivityPop=} [properties] Properties to set
         */
        function activityPop(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * activityPop actId.
         * @member {string} actId
         * @memberof ActivityCmd.activityPop
         * @instance
         */
        activityPop.prototype.actId = "";

        /**
         * Encodes the specified activityPop message. Does not implicitly {@link ActivityCmd.activityPop.verify|verify} messages.
         * @function encode
         * @memberof ActivityCmd.activityPop
         * @static
         * @param {ActivityCmd.IactivityPop} message activityPop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        activityPop.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.actId);
            return writer;
        };

        /**
         * Encodes the specified activityPop message, length delimited. Does not implicitly {@link ActivityCmd.activityPop.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActivityCmd.activityPop
         * @static
         * @param {ActivityCmd.IactivityPop} message activityPop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        activityPop.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return activityPop;
    })();

    ActivityCmd.sign = (function() {

        /**
         * Properties of a sign.
         * @memberof ActivityCmd
         * @interface Isign
         * @property {number|null} [signType] sign signType
         */

        /**
         * Constructs a new sign.
         * @memberof ActivityCmd
         * @classdesc Represents a sign.
         * @implements Isign
         * @constructor
         * @param {ActivityCmd.Isign=} [properties] Properties to set
         */
        function sign(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * sign signType.
         * @member {number} signType
         * @memberof ActivityCmd.sign
         * @instance
         */
        sign.prototype.signType = 0;

        /**
         * Encodes the specified sign message. Does not implicitly {@link ActivityCmd.sign.verify|verify} messages.
         * @function encode
         * @memberof ActivityCmd.sign
         * @static
         * @param {ActivityCmd.Isign} message sign message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sign.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.signType != null && message.hasOwnProperty("signType"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.signType);
            return writer;
        };

        /**
         * Encodes the specified sign message, length delimited. Does not implicitly {@link ActivityCmd.sign.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActivityCmd.sign
         * @static
         * @param {ActivityCmd.Isign} message sign message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sign.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return sign;
    })();

    ActivityCmd.getSignData = (function() {

        /**
         * Properties of a getSignData.
         * @memberof ActivityCmd
         * @interface IgetSignData
         */

        /**
         * Constructs a new getSignData.
         * @memberof ActivityCmd
         * @classdesc Represents a getSignData.
         * @implements IgetSignData
         * @constructor
         * @param {ActivityCmd.IgetSignData=} [properties] Properties to set
         */
        function getSignData(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getSignData message. Does not implicitly {@link ActivityCmd.getSignData.verify|verify} messages.
         * @function encode
         * @memberof ActivityCmd.getSignData
         * @static
         * @param {ActivityCmd.IgetSignData} message getSignData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getSignData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getSignData message, length delimited. Does not implicitly {@link ActivityCmd.getSignData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActivityCmd.getSignData
         * @static
         * @param {ActivityCmd.IgetSignData} message getSignData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getSignData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getSignData;
    })();

    ActivityCmd.drawNewHandPkg = (function() {

        /**
         * Properties of a drawNewHandPkg.
         * @memberof ActivityCmd
         * @interface IdrawNewHandPkg
         */

        /**
         * Constructs a new drawNewHandPkg.
         * @memberof ActivityCmd
         * @classdesc Represents a drawNewHandPkg.
         * @implements IdrawNewHandPkg
         * @constructor
         * @param {ActivityCmd.IdrawNewHandPkg=} [properties] Properties to set
         */
        function drawNewHandPkg(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified drawNewHandPkg message. Does not implicitly {@link ActivityCmd.drawNewHandPkg.verify|verify} messages.
         * @function encode
         * @memberof ActivityCmd.drawNewHandPkg
         * @static
         * @param {ActivityCmd.IdrawNewHandPkg} message drawNewHandPkg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawNewHandPkg.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified drawNewHandPkg message, length delimited. Does not implicitly {@link ActivityCmd.drawNewHandPkg.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActivityCmd.drawNewHandPkg
         * @static
         * @param {ActivityCmd.IdrawNewHandPkg} message drawNewHandPkg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawNewHandPkg.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return drawNewHandPkg;
    })();

    ActivityCmd.getNewHandPkgData = (function() {

        /**
         * Properties of a getNewHandPkgData.
         * @memberof ActivityCmd
         * @interface IgetNewHandPkgData
         */

        /**
         * Constructs a new getNewHandPkgData.
         * @memberof ActivityCmd
         * @classdesc Represents a getNewHandPkgData.
         * @implements IgetNewHandPkgData
         * @constructor
         * @param {ActivityCmd.IgetNewHandPkgData=} [properties] Properties to set
         */
        function getNewHandPkgData(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getNewHandPkgData message. Does not implicitly {@link ActivityCmd.getNewHandPkgData.verify|verify} messages.
         * @function encode
         * @memberof ActivityCmd.getNewHandPkgData
         * @static
         * @param {ActivityCmd.IgetNewHandPkgData} message getNewHandPkgData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getNewHandPkgData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getNewHandPkgData message, length delimited. Does not implicitly {@link ActivityCmd.getNewHandPkgData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActivityCmd.getNewHandPkgData
         * @static
         * @param {ActivityCmd.IgetNewHandPkgData} message getNewHandPkgData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getNewHandPkgData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getNewHandPkgData;
    })();

    return ActivityCmd;
})();

export const AdviseCmd = $root.AdviseCmd = (() => {

    /**
     * Namespace AdviseCmd.
     * @exports AdviseCmd
     * @namespace
     */
    const AdviseCmd = {};

    AdviseCmd.advise = (function() {

        /**
         * Properties of an advise.
         * @memberof AdviseCmd
         * @interface Iadvise
         * @property {string} content advise content
         * @property {Array.<Uint8Array>|null} [imgs] advise imgs
         * @property {string|null} [tel] advise tel
         * @property {number|null} [type] advise type
         */

        /**
         * Constructs a new advise.
         * @memberof AdviseCmd
         * @classdesc Represents an advise.
         * @implements Iadvise
         * @constructor
         * @param {AdviseCmd.Iadvise=} [properties] Properties to set
         */
        function advise(properties) {
            this.imgs = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * advise content.
         * @member {string} content
         * @memberof AdviseCmd.advise
         * @instance
         */
        advise.prototype.content = "";

        /**
         * advise imgs.
         * @member {Array.<Uint8Array>} imgs
         * @memberof AdviseCmd.advise
         * @instance
         */
        advise.prototype.imgs = $util.emptyArray;

        /**
         * advise tel.
         * @member {string} tel
         * @memberof AdviseCmd.advise
         * @instance
         */
        advise.prototype.tel = "";

        /**
         * advise type.
         * @member {number} type
         * @memberof AdviseCmd.advise
         * @instance
         */
        advise.prototype.type = 0;

        /**
         * Encodes the specified advise message. Does not implicitly {@link AdviseCmd.advise.verify|verify} messages.
         * @function encode
         * @memberof AdviseCmd.advise
         * @static
         * @param {AdviseCmd.Iadvise} message advise message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        advise.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.content);
            if (message.imgs != null && message.imgs.length)
                for (let i = 0; i < message.imgs.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.imgs[i]);
            if (message.tel != null && message.hasOwnProperty("tel"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.tel);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified advise message, length delimited. Does not implicitly {@link AdviseCmd.advise.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AdviseCmd.advise
         * @static
         * @param {AdviseCmd.Iadvise} message advise message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        advise.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return advise;
    })();

    AdviseCmd.adviseList = (function() {

        /**
         * Properties of an adviseList.
         * @memberof AdviseCmd
         * @interface IadviseList
         * @property {number|null} [start] adviseList start
         * @property {number} size adviseList size
         */

        /**
         * Constructs a new adviseList.
         * @memberof AdviseCmd
         * @classdesc Represents an adviseList.
         * @implements IadviseList
         * @constructor
         * @param {AdviseCmd.IadviseList=} [properties] Properties to set
         */
        function adviseList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * adviseList start.
         * @member {number} start
         * @memberof AdviseCmd.adviseList
         * @instance
         */
        adviseList.prototype.start = 0;

        /**
         * adviseList size.
         * @member {number} size
         * @memberof AdviseCmd.adviseList
         * @instance
         */
        adviseList.prototype.size = 0;

        /**
         * Encodes the specified adviseList message. Does not implicitly {@link AdviseCmd.adviseList.verify|verify} messages.
         * @function encode
         * @memberof AdviseCmd.adviseList
         * @static
         * @param {AdviseCmd.IadviseList} message adviseList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        adviseList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.start != null && message.hasOwnProperty("start"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.size);
            return writer;
        };

        /**
         * Encodes the specified adviseList message, length delimited. Does not implicitly {@link AdviseCmd.adviseList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AdviseCmd.adviseList
         * @static
         * @param {AdviseCmd.IadviseList} message adviseList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        adviseList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return adviseList;
    })();

    AdviseCmd.adviseReplyList = (function() {

        /**
         * Properties of an adviseReplyList.
         * @memberof AdviseCmd
         * @interface IadviseReplyList
         * @property {string} adviseId adviseReplyList adviseId
         * @property {number|null} [start] adviseReplyList start
         * @property {number} size adviseReplyList size
         */

        /**
         * Constructs a new adviseReplyList.
         * @memberof AdviseCmd
         * @classdesc Represents an adviseReplyList.
         * @implements IadviseReplyList
         * @constructor
         * @param {AdviseCmd.IadviseReplyList=} [properties] Properties to set
         */
        function adviseReplyList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * adviseReplyList adviseId.
         * @member {string} adviseId
         * @memberof AdviseCmd.adviseReplyList
         * @instance
         */
        adviseReplyList.prototype.adviseId = "";

        /**
         * adviseReplyList start.
         * @member {number} start
         * @memberof AdviseCmd.adviseReplyList
         * @instance
         */
        adviseReplyList.prototype.start = 0;

        /**
         * adviseReplyList size.
         * @member {number} size
         * @memberof AdviseCmd.adviseReplyList
         * @instance
         */
        adviseReplyList.prototype.size = 0;

        /**
         * Encodes the specified adviseReplyList message. Does not implicitly {@link AdviseCmd.adviseReplyList.verify|verify} messages.
         * @function encode
         * @memberof AdviseCmd.adviseReplyList
         * @static
         * @param {AdviseCmd.IadviseReplyList} message adviseReplyList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        adviseReplyList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.adviseId);
            if (message.start != null && message.hasOwnProperty("start"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.start);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.size);
            return writer;
        };

        /**
         * Encodes the specified adviseReplyList message, length delimited. Does not implicitly {@link AdviseCmd.adviseReplyList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AdviseCmd.adviseReplyList
         * @static
         * @param {AdviseCmd.IadviseReplyList} message adviseReplyList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        adviseReplyList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return adviseReplyList;
    })();

    AdviseCmd.readAdviseReply = (function() {

        /**
         * Properties of a readAdviseReply.
         * @memberof AdviseCmd
         * @interface IreadAdviseReply
         * @property {string} adviseId readAdviseReply adviseId
         */

        /**
         * Constructs a new readAdviseReply.
         * @memberof AdviseCmd
         * @classdesc Represents a readAdviseReply.
         * @implements IreadAdviseReply
         * @constructor
         * @param {AdviseCmd.IreadAdviseReply=} [properties] Properties to set
         */
        function readAdviseReply(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * readAdviseReply adviseId.
         * @member {string} adviseId
         * @memberof AdviseCmd.readAdviseReply
         * @instance
         */
        readAdviseReply.prototype.adviseId = "";

        /**
         * Encodes the specified readAdviseReply message. Does not implicitly {@link AdviseCmd.readAdviseReply.verify|verify} messages.
         * @function encode
         * @memberof AdviseCmd.readAdviseReply
         * @static
         * @param {AdviseCmd.IreadAdviseReply} message readAdviseReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        readAdviseReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.adviseId);
            return writer;
        };

        /**
         * Encodes the specified readAdviseReply message, length delimited. Does not implicitly {@link AdviseCmd.readAdviseReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AdviseCmd.readAdviseReply
         * @static
         * @param {AdviseCmd.IreadAdviseReply} message readAdviseReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        readAdviseReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return readAdviseReply;
    })();

    return AdviseCmd;
})();

export const AlbumCmd = $root.AlbumCmd = (() => {

    /**
     * Namespace AlbumCmd.
     * @exports AlbumCmd
     * @namespace
     */
    const AlbumCmd = {};

    AlbumCmd.addPhotos = (function() {

        /**
         * Properties of an addPhotos.
         * @memberof AlbumCmd
         * @interface IaddPhotos
         * @property {Array.<string>|null} [photos] addPhotos photos
         */

        /**
         * Constructs a new addPhotos.
         * @memberof AlbumCmd
         * @classdesc Represents an addPhotos.
         * @implements IaddPhotos
         * @constructor
         * @param {AlbumCmd.IaddPhotos=} [properties] Properties to set
         */
        function addPhotos(properties) {
            this.photos = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * addPhotos photos.
         * @member {Array.<string>} photos
         * @memberof AlbumCmd.addPhotos
         * @instance
         */
        addPhotos.prototype.photos = $util.emptyArray;

        /**
         * Encodes the specified addPhotos message. Does not implicitly {@link AlbumCmd.addPhotos.verify|verify} messages.
         * @function encode
         * @memberof AlbumCmd.addPhotos
         * @static
         * @param {AlbumCmd.IaddPhotos} message addPhotos message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        addPhotos.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.photos != null && message.photos.length)
                for (let i = 0; i < message.photos.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.photos[i]);
            return writer;
        };

        /**
         * Encodes the specified addPhotos message, length delimited. Does not implicitly {@link AlbumCmd.addPhotos.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AlbumCmd.addPhotos
         * @static
         * @param {AlbumCmd.IaddPhotos} message addPhotos message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        addPhotos.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return addPhotos;
    })();

    AlbumCmd.delPhotos = (function() {

        /**
         * Properties of a delPhotos.
         * @memberof AlbumCmd
         * @interface IdelPhotos
         * @property {string} id delPhotos id
         * @property {Array.<string>|null} [photos] delPhotos photos
         */

        /**
         * Constructs a new delPhotos.
         * @memberof AlbumCmd
         * @classdesc Represents a delPhotos.
         * @implements IdelPhotos
         * @constructor
         * @param {AlbumCmd.IdelPhotos=} [properties] Properties to set
         */
        function delPhotos(properties) {
            this.photos = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * delPhotos id.
         * @member {string} id
         * @memberof AlbumCmd.delPhotos
         * @instance
         */
        delPhotos.prototype.id = "";

        /**
         * delPhotos photos.
         * @member {Array.<string>} photos
         * @memberof AlbumCmd.delPhotos
         * @instance
         */
        delPhotos.prototype.photos = $util.emptyArray;

        /**
         * Encodes the specified delPhotos message. Does not implicitly {@link AlbumCmd.delPhotos.verify|verify} messages.
         * @function encode
         * @memberof AlbumCmd.delPhotos
         * @static
         * @param {AlbumCmd.IdelPhotos} message delPhotos message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delPhotos.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
            if (message.photos != null && message.photos.length)
                for (let i = 0; i < message.photos.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.photos[i]);
            return writer;
        };

        /**
         * Encodes the specified delPhotos message, length delimited. Does not implicitly {@link AlbumCmd.delPhotos.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AlbumCmd.delPhotos
         * @static
         * @param {AlbumCmd.IdelPhotos} message delPhotos message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delPhotos.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return delPhotos;
    })();

    AlbumCmd.delAlbum = (function() {

        /**
         * Properties of a delAlbum.
         * @memberof AlbumCmd
         * @interface IdelAlbum
         * @property {string} id delAlbum id
         */

        /**
         * Constructs a new delAlbum.
         * @memberof AlbumCmd
         * @classdesc Represents a delAlbum.
         * @implements IdelAlbum
         * @constructor
         * @param {AlbumCmd.IdelAlbum=} [properties] Properties to set
         */
        function delAlbum(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * delAlbum id.
         * @member {string} id
         * @memberof AlbumCmd.delAlbum
         * @instance
         */
        delAlbum.prototype.id = "";

        /**
         * Encodes the specified delAlbum message. Does not implicitly {@link AlbumCmd.delAlbum.verify|verify} messages.
         * @function encode
         * @memberof AlbumCmd.delAlbum
         * @static
         * @param {AlbumCmd.IdelAlbum} message delAlbum message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delAlbum.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
            return writer;
        };

        /**
         * Encodes the specified delAlbum message, length delimited. Does not implicitly {@link AlbumCmd.delAlbum.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AlbumCmd.delAlbum
         * @static
         * @param {AlbumCmd.IdelAlbum} message delAlbum message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delAlbum.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return delAlbum;
    })();

    AlbumCmd.getAlbums = (function() {

        /**
         * Properties of a getAlbums.
         * @memberof AlbumCmd
         * @interface IgetAlbums
         * @property {string|null} [userId] getAlbums userId
         * @property {number} star getAlbums star
         * @property {number} end getAlbums end
         * @property {string|null} [lastId] getAlbums lastId
         * @property {boolean} orderBy getAlbums orderBy
         */

        /**
         * Constructs a new getAlbums.
         * @memberof AlbumCmd
         * @classdesc Represents a getAlbums.
         * @implements IgetAlbums
         * @constructor
         * @param {AlbumCmd.IgetAlbums=} [properties] Properties to set
         */
        function getAlbums(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getAlbums userId.
         * @member {string} userId
         * @memberof AlbumCmd.getAlbums
         * @instance
         */
        getAlbums.prototype.userId = "";

        /**
         * getAlbums star.
         * @member {number} star
         * @memberof AlbumCmd.getAlbums
         * @instance
         */
        getAlbums.prototype.star = 0;

        /**
         * getAlbums end.
         * @member {number} end
         * @memberof AlbumCmd.getAlbums
         * @instance
         */
        getAlbums.prototype.end = 0;

        /**
         * getAlbums lastId.
         * @member {string} lastId
         * @memberof AlbumCmd.getAlbums
         * @instance
         */
        getAlbums.prototype.lastId = "";

        /**
         * getAlbums orderBy.
         * @member {boolean} orderBy
         * @memberof AlbumCmd.getAlbums
         * @instance
         */
        getAlbums.prototype.orderBy = false;

        /**
         * Encodes the specified getAlbums message. Does not implicitly {@link AlbumCmd.getAlbums.verify|verify} messages.
         * @function encode
         * @memberof AlbumCmd.getAlbums
         * @static
         * @param {AlbumCmd.IgetAlbums} message getAlbums message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getAlbums.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.star);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.end);
            if (message.lastId != null && message.hasOwnProperty("lastId"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.lastId);
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.orderBy);
            return writer;
        };

        /**
         * Encodes the specified getAlbums message, length delimited. Does not implicitly {@link AlbumCmd.getAlbums.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AlbumCmd.getAlbums
         * @static
         * @param {AlbumCmd.IgetAlbums} message getAlbums message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getAlbums.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getAlbums;
    })();

    return AlbumCmd;
})();

export const BagCmd = $root.BagCmd = (() => {

    /**
     * Namespace BagCmd.
     * @exports BagCmd
     * @namespace
     */
    const BagCmd = {};

    BagCmd.getWallet = (function() {

        /**
         * Properties of a getWallet.
         * @memberof BagCmd
         * @interface IgetWallet
         */

        /**
         * Constructs a new getWallet.
         * @memberof BagCmd
         * @classdesc Represents a getWallet.
         * @implements IgetWallet
         * @constructor
         * @param {BagCmd.IgetWallet=} [properties] Properties to set
         */
        function getWallet(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getWallet message. Does not implicitly {@link BagCmd.getWallet.verify|verify} messages.
         * @function encode
         * @memberof BagCmd.getWallet
         * @static
         * @param {BagCmd.IgetWallet} message getWallet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getWallet.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getWallet message, length delimited. Does not implicitly {@link BagCmd.getWallet.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BagCmd.getWallet
         * @static
         * @param {BagCmd.IgetWallet} message getWallet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getWallet.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getWallet;
    })();

    BagCmd.getGoodsList = (function() {

        /**
         * Properties of a getGoodsList.
         * @memberof BagCmd
         * @interface IgetGoodsList
         * @property {number} type getGoodsList type
         * @property {string} targetUserId getGoodsList targetUserId
         */

        /**
         * Constructs a new getGoodsList.
         * @memberof BagCmd
         * @classdesc Represents a getGoodsList.
         * @implements IgetGoodsList
         * @constructor
         * @param {BagCmd.IgetGoodsList=} [properties] Properties to set
         */
        function getGoodsList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getGoodsList type.
         * @member {number} type
         * @memberof BagCmd.getGoodsList
         * @instance
         */
        getGoodsList.prototype.type = 0;

        /**
         * getGoodsList targetUserId.
         * @member {string} targetUserId
         * @memberof BagCmd.getGoodsList
         * @instance
         */
        getGoodsList.prototype.targetUserId = "";

        /**
         * Encodes the specified getGoodsList message. Does not implicitly {@link BagCmd.getGoodsList.verify|verify} messages.
         * @function encode
         * @memberof BagCmd.getGoodsList
         * @static
         * @param {BagCmd.IgetGoodsList} message getGoodsList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getGoodsList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.targetUserId);
            return writer;
        };

        /**
         * Encodes the specified getGoodsList message, length delimited. Does not implicitly {@link BagCmd.getGoodsList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BagCmd.getGoodsList
         * @static
         * @param {BagCmd.IgetGoodsList} message getGoodsList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getGoodsList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getGoodsList;
    })();

    BagCmd.buyCar = (function() {

        /**
         * Properties of a buyCar.
         * @memberof BagCmd
         * @interface IbuyCar
         * @property {string} carId buyCar carId
         * @property {number} timeType buyCar timeType
         */

        /**
         * Constructs a new buyCar.
         * @memberof BagCmd
         * @classdesc Represents a buyCar.
         * @implements IbuyCar
         * @constructor
         * @param {BagCmd.IbuyCar=} [properties] Properties to set
         */
        function buyCar(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * buyCar carId.
         * @member {string} carId
         * @memberof BagCmd.buyCar
         * @instance
         */
        buyCar.prototype.carId = "";

        /**
         * buyCar timeType.
         * @member {number} timeType
         * @memberof BagCmd.buyCar
         * @instance
         */
        buyCar.prototype.timeType = 0;

        /**
         * Encodes the specified buyCar message. Does not implicitly {@link BagCmd.buyCar.verify|verify} messages.
         * @function encode
         * @memberof BagCmd.buyCar
         * @static
         * @param {BagCmd.IbuyCar} message buyCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        buyCar.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.carId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.timeType);
            return writer;
        };

        /**
         * Encodes the specified buyCar message, length delimited. Does not implicitly {@link BagCmd.buyCar.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BagCmd.buyCar
         * @static
         * @param {BagCmd.IbuyCar} message buyCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        buyCar.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return buyCar;
    })();

    BagCmd.useCar = (function() {

        /**
         * Properties of a useCar.
         * @memberof BagCmd
         * @interface IuseCar
         * @property {string} goodsId useCar goodsId
         * @property {boolean} flag useCar flag
         */

        /**
         * Constructs a new useCar.
         * @memberof BagCmd
         * @classdesc Represents a useCar.
         * @implements IuseCar
         * @constructor
         * @param {BagCmd.IuseCar=} [properties] Properties to set
         */
        function useCar(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * useCar goodsId.
         * @member {string} goodsId
         * @memberof BagCmd.useCar
         * @instance
         */
        useCar.prototype.goodsId = "";

        /**
         * useCar flag.
         * @member {boolean} flag
         * @memberof BagCmd.useCar
         * @instance
         */
        useCar.prototype.flag = false;

        /**
         * Encodes the specified useCar message. Does not implicitly {@link BagCmd.useCar.verify|verify} messages.
         * @function encode
         * @memberof BagCmd.useCar
         * @static
         * @param {BagCmd.IuseCar} message useCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        useCar.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.goodsId);
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.flag);
            return writer;
        };

        /**
         * Encodes the specified useCar message, length delimited. Does not implicitly {@link BagCmd.useCar.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BagCmd.useCar
         * @static
         * @param {BagCmd.IuseCar} message useCar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        useCar.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return useCar;
    })();

    BagCmd.useHeardFrame = (function() {

        /**
         * Properties of a useHeardFrame.
         * @memberof BagCmd
         * @interface IuseHeardFrame
         * @property {string} goodsId useHeardFrame goodsId
         * @property {boolean} flag useHeardFrame flag
         */

        /**
         * Constructs a new useHeardFrame.
         * @memberof BagCmd
         * @classdesc Represents a useHeardFrame.
         * @implements IuseHeardFrame
         * @constructor
         * @param {BagCmd.IuseHeardFrame=} [properties] Properties to set
         */
        function useHeardFrame(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * useHeardFrame goodsId.
         * @member {string} goodsId
         * @memberof BagCmd.useHeardFrame
         * @instance
         */
        useHeardFrame.prototype.goodsId = "";

        /**
         * useHeardFrame flag.
         * @member {boolean} flag
         * @memberof BagCmd.useHeardFrame
         * @instance
         */
        useHeardFrame.prototype.flag = false;

        /**
         * Encodes the specified useHeardFrame message. Does not implicitly {@link BagCmd.useHeardFrame.verify|verify} messages.
         * @function encode
         * @memberof BagCmd.useHeardFrame
         * @static
         * @param {BagCmd.IuseHeardFrame} message useHeardFrame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        useHeardFrame.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.goodsId);
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.flag);
            return writer;
        };

        /**
         * Encodes the specified useHeardFrame message, length delimited. Does not implicitly {@link BagCmd.useHeardFrame.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BagCmd.useHeardFrame
         * @static
         * @param {BagCmd.IuseHeardFrame} message useHeardFrame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        useHeardFrame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return useHeardFrame;
    })();

    BagCmd.useDialogFrame = (function() {

        /**
         * Properties of a useDialogFrame.
         * @memberof BagCmd
         * @interface IuseDialogFrame
         * @property {string} goodsId useDialogFrame goodsId
         */

        /**
         * Constructs a new useDialogFrame.
         * @memberof BagCmd
         * @classdesc Represents a useDialogFrame.
         * @implements IuseDialogFrame
         * @constructor
         * @param {BagCmd.IuseDialogFrame=} [properties] Properties to set
         */
        function useDialogFrame(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * useDialogFrame goodsId.
         * @member {string} goodsId
         * @memberof BagCmd.useDialogFrame
         * @instance
         */
        useDialogFrame.prototype.goodsId = "";

        /**
         * Encodes the specified useDialogFrame message. Does not implicitly {@link BagCmd.useDialogFrame.verify|verify} messages.
         * @function encode
         * @memberof BagCmd.useDialogFrame
         * @static
         * @param {BagCmd.IuseDialogFrame} message useDialogFrame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        useDialogFrame.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.goodsId);
            return writer;
        };

        /**
         * Encodes the specified useDialogFrame message, length delimited. Does not implicitly {@link BagCmd.useDialogFrame.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BagCmd.useDialogFrame
         * @static
         * @param {BagCmd.IuseDialogFrame} message useDialogFrame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        useDialogFrame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return useDialogFrame;
    })();

    BagCmd.useMedal = (function() {

        /**
         * Properties of a useMedal.
         * @memberof BagCmd
         * @interface IuseMedal
         * @property {Array.<string>|null} [goodsIds] useMedal goodsIds
         */

        /**
         * Constructs a new useMedal.
         * @memberof BagCmd
         * @classdesc Represents a useMedal.
         * @implements IuseMedal
         * @constructor
         * @param {BagCmd.IuseMedal=} [properties] Properties to set
         */
        function useMedal(properties) {
            this.goodsIds = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * useMedal goodsIds.
         * @member {Array.<string>} goodsIds
         * @memberof BagCmd.useMedal
         * @instance
         */
        useMedal.prototype.goodsIds = $util.emptyArray;

        /**
         * Encodes the specified useMedal message. Does not implicitly {@link BagCmd.useMedal.verify|verify} messages.
         * @function encode
         * @memberof BagCmd.useMedal
         * @static
         * @param {BagCmd.IuseMedal} message useMedal message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        useMedal.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.goodsIds != null && message.goodsIds.length)
                for (let i = 0; i < message.goodsIds.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.goodsIds[i]);
            return writer;
        };

        /**
         * Encodes the specified useMedal message, length delimited. Does not implicitly {@link BagCmd.useMedal.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BagCmd.useMedal
         * @static
         * @param {BagCmd.IuseMedal} message useMedal message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        useMedal.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return useMedal;
    })();

    BagCmd.sendBarrage = (function() {

        /**
         * Properties of a sendBarrage.
         * @memberof BagCmd
         * @interface IsendBarrage
         * @property {string} userId sendBarrage userId
         * @property {string} barrage sendBarrage barrage
         * @property {string} roomId sendBarrage roomId
         */

        /**
         * Constructs a new sendBarrage.
         * @memberof BagCmd
         * @classdesc Represents a sendBarrage.
         * @implements IsendBarrage
         * @constructor
         * @param {BagCmd.IsendBarrage=} [properties] Properties to set
         */
        function sendBarrage(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * sendBarrage userId.
         * @member {string} userId
         * @memberof BagCmd.sendBarrage
         * @instance
         */
        sendBarrage.prototype.userId = "";

        /**
         * sendBarrage barrage.
         * @member {string} barrage
         * @memberof BagCmd.sendBarrage
         * @instance
         */
        sendBarrage.prototype.barrage = "";

        /**
         * sendBarrage roomId.
         * @member {string} roomId
         * @memberof BagCmd.sendBarrage
         * @instance
         */
        sendBarrage.prototype.roomId = "";

        /**
         * Encodes the specified sendBarrage message. Does not implicitly {@link BagCmd.sendBarrage.verify|verify} messages.
         * @function encode
         * @memberof BagCmd.sendBarrage
         * @static
         * @param {BagCmd.IsendBarrage} message sendBarrage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendBarrage.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.barrage);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified sendBarrage message, length delimited. Does not implicitly {@link BagCmd.sendBarrage.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BagCmd.sendBarrage
         * @static
         * @param {BagCmd.IsendBarrage} message sendBarrage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendBarrage.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return sendBarrage;
    })();

    BagCmd.sendImGift = (function() {

        /**
         * Properties of a sendImGift.
         * @memberof BagCmd
         * @interface IsendImGift
         * @property {string} userId sendImGift userId
         * @property {string} giftId sendImGift giftId
         */

        /**
         * Constructs a new sendImGift.
         * @memberof BagCmd
         * @classdesc Represents a sendImGift.
         * @implements IsendImGift
         * @constructor
         * @param {BagCmd.IsendImGift=} [properties] Properties to set
         */
        function sendImGift(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * sendImGift userId.
         * @member {string} userId
         * @memberof BagCmd.sendImGift
         * @instance
         */
        sendImGift.prototype.userId = "";

        /**
         * sendImGift giftId.
         * @member {string} giftId
         * @memberof BagCmd.sendImGift
         * @instance
         */
        sendImGift.prototype.giftId = "";

        /**
         * Encodes the specified sendImGift message. Does not implicitly {@link BagCmd.sendImGift.verify|verify} messages.
         * @function encode
         * @memberof BagCmd.sendImGift
         * @static
         * @param {BagCmd.IsendImGift} message sendImGift message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendImGift.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.giftId);
            return writer;
        };

        /**
         * Encodes the specified sendImGift message, length delimited. Does not implicitly {@link BagCmd.sendImGift.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BagCmd.sendImGift
         * @static
         * @param {BagCmd.IsendImGift} message sendImGift message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendImGift.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return sendImGift;
    })();

    BagCmd.sendGifts = (function() {

        /**
         * Properties of a sendGifts.
         * @memberof BagCmd
         * @interface IsendGifts
         * @property {Array.<string>|null} [userId] sendGifts userId
         * @property {string} giftId sendGifts giftId
         * @property {number} giftNum sendGifts giftNum
         * @property {string} roomId sendGifts roomId
         * @property {number|null} [groupNum] sendGifts groupNum
         * @property {boolean|null} [addLover] sendGifts addLover
         * @property {number|null} [action] sendGifts action
         */

        /**
         * Constructs a new sendGifts.
         * @memberof BagCmd
         * @classdesc Represents a sendGifts.
         * @implements IsendGifts
         * @constructor
         * @param {BagCmd.IsendGifts=} [properties] Properties to set
         */
        function sendGifts(properties) {
            this.userId = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * sendGifts userId.
         * @member {Array.<string>} userId
         * @memberof BagCmd.sendGifts
         * @instance
         */
        sendGifts.prototype.userId = $util.emptyArray;

        /**
         * sendGifts giftId.
         * @member {string} giftId
         * @memberof BagCmd.sendGifts
         * @instance
         */
        sendGifts.prototype.giftId = "";

        /**
         * sendGifts giftNum.
         * @member {number} giftNum
         * @memberof BagCmd.sendGifts
         * @instance
         */
        sendGifts.prototype.giftNum = 0;

        /**
         * sendGifts roomId.
         * @member {string} roomId
         * @memberof BagCmd.sendGifts
         * @instance
         */
        sendGifts.prototype.roomId = "";

        /**
         * sendGifts groupNum.
         * @member {number} groupNum
         * @memberof BagCmd.sendGifts
         * @instance
         */
        sendGifts.prototype.groupNum = 0;

        /**
         * sendGifts addLover.
         * @member {boolean} addLover
         * @memberof BagCmd.sendGifts
         * @instance
         */
        sendGifts.prototype.addLover = false;

        /**
         * sendGifts action.
         * @member {number} action
         * @memberof BagCmd.sendGifts
         * @instance
         */
        sendGifts.prototype.action = 0;

        /**
         * Encodes the specified sendGifts message. Does not implicitly {@link BagCmd.sendGifts.verify|verify} messages.
         * @function encode
         * @memberof BagCmd.sendGifts
         * @static
         * @param {BagCmd.IsendGifts} message sendGifts message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendGifts.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.userId.length)
                for (let i = 0; i < message.userId.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId[i]);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.giftId);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.giftNum);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.roomId);
            if (message.groupNum != null && message.hasOwnProperty("groupNum"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.groupNum);
            if (message.addLover != null && message.hasOwnProperty("addLover"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.addLover);
            if (message.action != null && message.hasOwnProperty("action"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.action);
            return writer;
        };

        /**
         * Encodes the specified sendGifts message, length delimited. Does not implicitly {@link BagCmd.sendGifts.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BagCmd.sendGifts
         * @static
         * @param {BagCmd.IsendGifts} message sendGifts message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendGifts.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return sendGifts;
    })();

    BagCmd.sendAllMyPkgGifts = (function() {

        /**
         * Properties of a sendAllMyPkgGifts.
         * @memberof BagCmd
         * @interface IsendAllMyPkgGifts
         * @property {string} userId sendAllMyPkgGifts userId
         * @property {string} roomId sendAllMyPkgGifts roomId
         * @property {boolean|null} [sendCommon] sendAllMyPkgGifts sendCommon
         */

        /**
         * Constructs a new sendAllMyPkgGifts.
         * @memberof BagCmd
         * @classdesc Represents a sendAllMyPkgGifts.
         * @implements IsendAllMyPkgGifts
         * @constructor
         * @param {BagCmd.IsendAllMyPkgGifts=} [properties] Properties to set
         */
        function sendAllMyPkgGifts(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * sendAllMyPkgGifts userId.
         * @member {string} userId
         * @memberof BagCmd.sendAllMyPkgGifts
         * @instance
         */
        sendAllMyPkgGifts.prototype.userId = "";

        /**
         * sendAllMyPkgGifts roomId.
         * @member {string} roomId
         * @memberof BagCmd.sendAllMyPkgGifts
         * @instance
         */
        sendAllMyPkgGifts.prototype.roomId = "";

        /**
         * sendAllMyPkgGifts sendCommon.
         * @member {boolean} sendCommon
         * @memberof BagCmd.sendAllMyPkgGifts
         * @instance
         */
        sendAllMyPkgGifts.prototype.sendCommon = false;

        /**
         * Encodes the specified sendAllMyPkgGifts message. Does not implicitly {@link BagCmd.sendAllMyPkgGifts.verify|verify} messages.
         * @function encode
         * @memberof BagCmd.sendAllMyPkgGifts
         * @static
         * @param {BagCmd.IsendAllMyPkgGifts} message sendAllMyPkgGifts message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendAllMyPkgGifts.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.roomId);
            if (message.sendCommon != null && message.hasOwnProperty("sendCommon"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.sendCommon);
            return writer;
        };

        /**
         * Encodes the specified sendAllMyPkgGifts message, length delimited. Does not implicitly {@link BagCmd.sendAllMyPkgGifts.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BagCmd.sendAllMyPkgGifts
         * @static
         * @param {BagCmd.IsendAllMyPkgGifts} message sendAllMyPkgGifts message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendAllMyPkgGifts.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return sendAllMyPkgGifts;
    })();

    BagCmd.sendPackageGifts = (function() {

        /**
         * Properties of a sendPackageGifts.
         * @memberof BagCmd
         * @interface IsendPackageGifts
         * @property {string} giftId sendPackageGifts giftId
         * @property {number} num sendPackageGifts num
         * @property {Array.<string>|null} [userIds] sendPackageGifts userIds
         * @property {string} roomId sendPackageGifts roomId
         * @property {number|null} [groupNum] sendPackageGifts groupNum
         */

        /**
         * Constructs a new sendPackageGifts.
         * @memberof BagCmd
         * @classdesc Represents a sendPackageGifts.
         * @implements IsendPackageGifts
         * @constructor
         * @param {BagCmd.IsendPackageGifts=} [properties] Properties to set
         */
        function sendPackageGifts(properties) {
            this.userIds = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * sendPackageGifts giftId.
         * @member {string} giftId
         * @memberof BagCmd.sendPackageGifts
         * @instance
         */
        sendPackageGifts.prototype.giftId = "";

        /**
         * sendPackageGifts num.
         * @member {number} num
         * @memberof BagCmd.sendPackageGifts
         * @instance
         */
        sendPackageGifts.prototype.num = 0;

        /**
         * sendPackageGifts userIds.
         * @member {Array.<string>} userIds
         * @memberof BagCmd.sendPackageGifts
         * @instance
         */
        sendPackageGifts.prototype.userIds = $util.emptyArray;

        /**
         * sendPackageGifts roomId.
         * @member {string} roomId
         * @memberof BagCmd.sendPackageGifts
         * @instance
         */
        sendPackageGifts.prototype.roomId = "";

        /**
         * sendPackageGifts groupNum.
         * @member {number} groupNum
         * @memberof BagCmd.sendPackageGifts
         * @instance
         */
        sendPackageGifts.prototype.groupNum = 0;

        /**
         * Encodes the specified sendPackageGifts message. Does not implicitly {@link BagCmd.sendPackageGifts.verify|verify} messages.
         * @function encode
         * @memberof BagCmd.sendPackageGifts
         * @static
         * @param {BagCmd.IsendPackageGifts} message sendPackageGifts message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendPackageGifts.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.giftId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.num);
            if (message.userIds != null && message.userIds.length)
                for (let i = 0; i < message.userIds.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.userIds[i]);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.roomId);
            if (message.groupNum != null && message.hasOwnProperty("groupNum"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.groupNum);
            return writer;
        };

        /**
         * Encodes the specified sendPackageGifts message, length delimited. Does not implicitly {@link BagCmd.sendPackageGifts.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BagCmd.sendPackageGifts
         * @static
         * @param {BagCmd.IsendPackageGifts} message sendPackageGifts message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendPackageGifts.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return sendPackageGifts;
    })();

    BagCmd.sendPackageGift = (function() {

        /**
         * Properties of a sendPackageGift.
         * @memberof BagCmd
         * @interface IsendPackageGift
         * @property {string} giftId sendPackageGift giftId
         * @property {number} num sendPackageGift num
         * @property {string} userId sendPackageGift userId
         * @property {string} roomId sendPackageGift roomId
         * @property {number|null} [groupNum] sendPackageGift groupNum
         */

        /**
         * Constructs a new sendPackageGift.
         * @memberof BagCmd
         * @classdesc Represents a sendPackageGift.
         * @implements IsendPackageGift
         * @constructor
         * @param {BagCmd.IsendPackageGift=} [properties] Properties to set
         */
        function sendPackageGift(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * sendPackageGift giftId.
         * @member {string} giftId
         * @memberof BagCmd.sendPackageGift
         * @instance
         */
        sendPackageGift.prototype.giftId = "";

        /**
         * sendPackageGift num.
         * @member {number} num
         * @memberof BagCmd.sendPackageGift
         * @instance
         */
        sendPackageGift.prototype.num = 0;

        /**
         * sendPackageGift userId.
         * @member {string} userId
         * @memberof BagCmd.sendPackageGift
         * @instance
         */
        sendPackageGift.prototype.userId = "";

        /**
         * sendPackageGift roomId.
         * @member {string} roomId
         * @memberof BagCmd.sendPackageGift
         * @instance
         */
        sendPackageGift.prototype.roomId = "";

        /**
         * sendPackageGift groupNum.
         * @member {number} groupNum
         * @memberof BagCmd.sendPackageGift
         * @instance
         */
        sendPackageGift.prototype.groupNum = 0;

        /**
         * Encodes the specified sendPackageGift message. Does not implicitly {@link BagCmd.sendPackageGift.verify|verify} messages.
         * @function encode
         * @memberof BagCmd.sendPackageGift
         * @static
         * @param {BagCmd.IsendPackageGift} message sendPackageGift message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendPackageGift.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.giftId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.num);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.userId);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.roomId);
            if (message.groupNum != null && message.hasOwnProperty("groupNum"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.groupNum);
            return writer;
        };

        /**
         * Encodes the specified sendPackageGift message, length delimited. Does not implicitly {@link BagCmd.sendPackageGift.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BagCmd.sendPackageGift
         * @static
         * @param {BagCmd.IsendPackageGift} message sendPackageGift message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendPackageGift.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return sendPackageGift;
    })();

    BagCmd.getReceiveGifts = (function() {

        /**
         * Properties of a getReceiveGifts.
         * @memberof BagCmd
         * @interface IgetReceiveGifts
         * @property {string} userId getReceiveGifts userId
         * @property {number} type getReceiveGifts type
         */

        /**
         * Constructs a new getReceiveGifts.
         * @memberof BagCmd
         * @classdesc Represents a getReceiveGifts.
         * @implements IgetReceiveGifts
         * @constructor
         * @param {BagCmd.IgetReceiveGifts=} [properties] Properties to set
         */
        function getReceiveGifts(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getReceiveGifts userId.
         * @member {string} userId
         * @memberof BagCmd.getReceiveGifts
         * @instance
         */
        getReceiveGifts.prototype.userId = "";

        /**
         * getReceiveGifts type.
         * @member {number} type
         * @memberof BagCmd.getReceiveGifts
         * @instance
         */
        getReceiveGifts.prototype.type = 0;

        /**
         * Encodes the specified getReceiveGifts message. Does not implicitly {@link BagCmd.getReceiveGifts.verify|verify} messages.
         * @function encode
         * @memberof BagCmd.getReceiveGifts
         * @static
         * @param {BagCmd.IgetReceiveGifts} message getReceiveGifts message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getReceiveGifts.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified getReceiveGifts message, length delimited. Does not implicitly {@link BagCmd.getReceiveGifts.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BagCmd.getReceiveGifts
         * @static
         * @param {BagCmd.IgetReceiveGifts} message getReceiveGifts message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getReceiveGifts.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getReceiveGifts;
    })();

    BagCmd.getReceiveGiftLog = (function() {

        /**
         * Properties of a getReceiveGiftLog.
         * @memberof BagCmd
         * @interface IgetReceiveGiftLog
         * @property {string} startDate getReceiveGiftLog startDate
         * @property {string} endDate getReceiveGiftLog endDate
         * @property {number} type getReceiveGiftLog type
         * @property {string|null} [lastId] getReceiveGiftLog lastId
         */

        /**
         * Constructs a new getReceiveGiftLog.
         * @memberof BagCmd
         * @classdesc Represents a getReceiveGiftLog.
         * @implements IgetReceiveGiftLog
         * @constructor
         * @param {BagCmd.IgetReceiveGiftLog=} [properties] Properties to set
         */
        function getReceiveGiftLog(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getReceiveGiftLog startDate.
         * @member {string} startDate
         * @memberof BagCmd.getReceiveGiftLog
         * @instance
         */
        getReceiveGiftLog.prototype.startDate = "";

        /**
         * getReceiveGiftLog endDate.
         * @member {string} endDate
         * @memberof BagCmd.getReceiveGiftLog
         * @instance
         */
        getReceiveGiftLog.prototype.endDate = "";

        /**
         * getReceiveGiftLog type.
         * @member {number} type
         * @memberof BagCmd.getReceiveGiftLog
         * @instance
         */
        getReceiveGiftLog.prototype.type = 0;

        /**
         * getReceiveGiftLog lastId.
         * @member {string} lastId
         * @memberof BagCmd.getReceiveGiftLog
         * @instance
         */
        getReceiveGiftLog.prototype.lastId = "";

        /**
         * Encodes the specified getReceiveGiftLog message. Does not implicitly {@link BagCmd.getReceiveGiftLog.verify|verify} messages.
         * @function encode
         * @memberof BagCmd.getReceiveGiftLog
         * @static
         * @param {BagCmd.IgetReceiveGiftLog} message getReceiveGiftLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getReceiveGiftLog.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.startDate);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.endDate);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
            if (message.lastId != null && message.hasOwnProperty("lastId"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.lastId);
            return writer;
        };

        /**
         * Encodes the specified getReceiveGiftLog message, length delimited. Does not implicitly {@link BagCmd.getReceiveGiftLog.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BagCmd.getReceiveGiftLog
         * @static
         * @param {BagCmd.IgetReceiveGiftLog} message getReceiveGiftLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getReceiveGiftLog.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getReceiveGiftLog;
    })();

    BagCmd.buyHeadFrame = (function() {

        /**
         * Properties of a buyHeadFrame.
         * @memberof BagCmd
         * @interface IbuyHeadFrame
         * @property {string} frameId buyHeadFrame frameId
         * @property {number} timeType buyHeadFrame timeType
         */

        /**
         * Constructs a new buyHeadFrame.
         * @memberof BagCmd
         * @classdesc Represents a buyHeadFrame.
         * @implements IbuyHeadFrame
         * @constructor
         * @param {BagCmd.IbuyHeadFrame=} [properties] Properties to set
         */
        function buyHeadFrame(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * buyHeadFrame frameId.
         * @member {string} frameId
         * @memberof BagCmd.buyHeadFrame
         * @instance
         */
        buyHeadFrame.prototype.frameId = "";

        /**
         * buyHeadFrame timeType.
         * @member {number} timeType
         * @memberof BagCmd.buyHeadFrame
         * @instance
         */
        buyHeadFrame.prototype.timeType = 0;

        /**
         * Encodes the specified buyHeadFrame message. Does not implicitly {@link BagCmd.buyHeadFrame.verify|verify} messages.
         * @function encode
         * @memberof BagCmd.buyHeadFrame
         * @static
         * @param {BagCmd.IbuyHeadFrame} message buyHeadFrame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        buyHeadFrame.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.frameId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.timeType);
            return writer;
        };

        /**
         * Encodes the specified buyHeadFrame message, length delimited. Does not implicitly {@link BagCmd.buyHeadFrame.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BagCmd.buyHeadFrame
         * @static
         * @param {BagCmd.IbuyHeadFrame} message buyHeadFrame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        buyHeadFrame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return buyHeadFrame;
    })();

    BagCmd.buyGoods = (function() {

        /**
         * Properties of a buyGoods.
         * @memberof BagCmd
         * @interface IbuyGoods
         * @property {Array.<string>|null} [goodsIds] buyGoods goodsIds
         * @property {Array.<number>|null} [timeTypes] buyGoods timeTypes
         */

        /**
         * Constructs a new buyGoods.
         * @memberof BagCmd
         * @classdesc Represents a buyGoods.
         * @implements IbuyGoods
         * @constructor
         * @param {BagCmd.IbuyGoods=} [properties] Properties to set
         */
        function buyGoods(properties) {
            this.goodsIds = [];
            this.timeTypes = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * buyGoods goodsIds.
         * @member {Array.<string>} goodsIds
         * @memberof BagCmd.buyGoods
         * @instance
         */
        buyGoods.prototype.goodsIds = $util.emptyArray;

        /**
         * buyGoods timeTypes.
         * @member {Array.<number>} timeTypes
         * @memberof BagCmd.buyGoods
         * @instance
         */
        buyGoods.prototype.timeTypes = $util.emptyArray;

        /**
         * Encodes the specified buyGoods message. Does not implicitly {@link BagCmd.buyGoods.verify|verify} messages.
         * @function encode
         * @memberof BagCmd.buyGoods
         * @static
         * @param {BagCmd.IbuyGoods} message buyGoods message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        buyGoods.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.goodsIds != null && message.goodsIds.length)
                for (let i = 0; i < message.goodsIds.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.goodsIds[i]);
            if (message.timeTypes != null && message.timeTypes.length)
                for (let i = 0; i < message.timeTypes.length; ++i)
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.timeTypes[i]);
            return writer;
        };

        /**
         * Encodes the specified buyGoods message, length delimited. Does not implicitly {@link BagCmd.buyGoods.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BagCmd.buyGoods
         * @static
         * @param {BagCmd.IbuyGoods} message buyGoods message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        buyGoods.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return buyGoods;
    })();

    BagCmd.getSendGifts = (function() {

        /**
         * Properties of a getSendGifts.
         * @memberof BagCmd
         * @interface IgetSendGifts
         * @property {string} userId getSendGifts userId
         */

        /**
         * Constructs a new getSendGifts.
         * @memberof BagCmd
         * @classdesc Represents a getSendGifts.
         * @implements IgetSendGifts
         * @constructor
         * @param {BagCmd.IgetSendGifts=} [properties] Properties to set
         */
        function getSendGifts(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getSendGifts userId.
         * @member {string} userId
         * @memberof BagCmd.getSendGifts
         * @instance
         */
        getSendGifts.prototype.userId = "";

        /**
         * Encodes the specified getSendGifts message. Does not implicitly {@link BagCmd.getSendGifts.verify|verify} messages.
         * @function encode
         * @memberof BagCmd.getSendGifts
         * @static
         * @param {BagCmd.IgetSendGifts} message getSendGifts message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getSendGifts.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified getSendGifts message, length delimited. Does not implicitly {@link BagCmd.getSendGifts.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BagCmd.getSendGifts
         * @static
         * @param {BagCmd.IgetSendGifts} message getSendGifts message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getSendGifts.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getSendGifts;
    })();

    return BagCmd;
})();

export const CardCmd = $root.CardCmd = (() => {

    /**
     * Namespace CardCmd.
     * @exports CardCmd
     * @namespace
     */
    const CardCmd = {};

    CardCmd.getUserCardType = (function() {

        /**
         * Properties of a getUserCardType.
         * @memberof CardCmd
         * @interface IgetUserCardType
         * @property {string} userId getUserCardType userId
         * @property {string} roomId getUserCardType roomId
         */

        /**
         * Constructs a new getUserCardType.
         * @memberof CardCmd
         * @classdesc Represents a getUserCardType.
         * @implements IgetUserCardType
         * @constructor
         * @param {CardCmd.IgetUserCardType=} [properties] Properties to set
         */
        function getUserCardType(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getUserCardType userId.
         * @member {string} userId
         * @memberof CardCmd.getUserCardType
         * @instance
         */
        getUserCardType.prototype.userId = "";

        /**
         * getUserCardType roomId.
         * @member {string} roomId
         * @memberof CardCmd.getUserCardType
         * @instance
         */
        getUserCardType.prototype.roomId = "";

        /**
         * Encodes the specified getUserCardType message. Does not implicitly {@link CardCmd.getUserCardType.verify|verify} messages.
         * @function encode
         * @memberof CardCmd.getUserCardType
         * @static
         * @param {CardCmd.IgetUserCardType} message getUserCardType message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserCardType.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified getUserCardType message, length delimited. Does not implicitly {@link CardCmd.getUserCardType.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CardCmd.getUserCardType
         * @static
         * @param {CardCmd.IgetUserCardType} message getUserCardType message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserCardType.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getUserCardType;
    })();

    CardCmd.getUserCard = (function() {

        /**
         * Properties of a getUserCard.
         * @memberof CardCmd
         * @interface IgetUserCard
         * @property {string} userId getUserCard userId
         * @property {string} roomId getUserCard roomId
         * @property {boolean|null} [detail] getUserCard detail
         */

        /**
         * Constructs a new getUserCard.
         * @memberof CardCmd
         * @classdesc Represents a getUserCard.
         * @implements IgetUserCard
         * @constructor
         * @param {CardCmd.IgetUserCard=} [properties] Properties to set
         */
        function getUserCard(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getUserCard userId.
         * @member {string} userId
         * @memberof CardCmd.getUserCard
         * @instance
         */
        getUserCard.prototype.userId = "";

        /**
         * getUserCard roomId.
         * @member {string} roomId
         * @memberof CardCmd.getUserCard
         * @instance
         */
        getUserCard.prototype.roomId = "";

        /**
         * getUserCard detail.
         * @member {boolean} detail
         * @memberof CardCmd.getUserCard
         * @instance
         */
        getUserCard.prototype.detail = false;

        /**
         * Encodes the specified getUserCard message. Does not implicitly {@link CardCmd.getUserCard.verify|verify} messages.
         * @function encode
         * @memberof CardCmd.getUserCard
         * @static
         * @param {CardCmd.IgetUserCard} message getUserCard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserCard.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.roomId);
            if (message.detail != null && message.hasOwnProperty("detail"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.detail);
            return writer;
        };

        /**
         * Encodes the specified getUserCard message, length delimited. Does not implicitly {@link CardCmd.getUserCard.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CardCmd.getUserCard
         * @static
         * @param {CardCmd.IgetUserCard} message getUserCard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserCard.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getUserCard;
    })();

    CardCmd.listUserCard = (function() {

        /**
         * Properties of a listUserCard.
         * @memberof CardCmd
         * @interface IlistUserCard
         * @property {string} userId listUserCard userId
         */

        /**
         * Constructs a new listUserCard.
         * @memberof CardCmd
         * @classdesc Represents a listUserCard.
         * @implements IlistUserCard
         * @constructor
         * @param {CardCmd.IlistUserCard=} [properties] Properties to set
         */
        function listUserCard(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * listUserCard userId.
         * @member {string} userId
         * @memberof CardCmd.listUserCard
         * @instance
         */
        listUserCard.prototype.userId = "";

        /**
         * Encodes the specified listUserCard message. Does not implicitly {@link CardCmd.listUserCard.verify|verify} messages.
         * @function encode
         * @memberof CardCmd.listUserCard
         * @static
         * @param {CardCmd.IlistUserCard} message listUserCard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listUserCard.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified listUserCard message, length delimited. Does not implicitly {@link CardCmd.listUserCard.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CardCmd.listUserCard
         * @static
         * @param {CardCmd.IlistUserCard} message listUserCard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listUserCard.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return listUserCard;
    })();

    CardCmd.listRoomCard = (function() {

        /**
         * Properties of a listRoomCard.
         * @memberof CardCmd
         * @interface IlistRoomCard
         * @property {string} roomId listRoomCard roomId
         */

        /**
         * Constructs a new listRoomCard.
         * @memberof CardCmd
         * @classdesc Represents a listRoomCard.
         * @implements IlistRoomCard
         * @constructor
         * @param {CardCmd.IlistRoomCard=} [properties] Properties to set
         */
        function listRoomCard(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * listRoomCard roomId.
         * @member {string} roomId
         * @memberof CardCmd.listRoomCard
         * @instance
         */
        listRoomCard.prototype.roomId = "";

        /**
         * Encodes the specified listRoomCard message. Does not implicitly {@link CardCmd.listRoomCard.verify|verify} messages.
         * @function encode
         * @memberof CardCmd.listRoomCard
         * @static
         * @param {CardCmd.IlistRoomCard} message listRoomCard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listRoomCard.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified listRoomCard message, length delimited. Does not implicitly {@link CardCmd.listRoomCard.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CardCmd.listRoomCard
         * @static
         * @param {CardCmd.IlistRoomCard} message listRoomCard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listRoomCard.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return listRoomCard;
    })();

    return CardCmd;
})();

export const CenterCmd = $root.CenterCmd = (() => {

    /**
     * Namespace CenterCmd.
     * @exports CenterCmd
     * @namespace
     */
    const CenterCmd = {};

    CenterCmd.searchFunRoom = (function() {

        /**
         * Properties of a searchFunRoom.
         * @memberof CenterCmd
         * @interface IsearchFunRoom
         * @property {string} userId searchFunRoom userId
         * @property {string} keyword searchFunRoom keyword
         * @property {number|null} [index] searchFunRoom index
         */

        /**
         * Constructs a new searchFunRoom.
         * @memberof CenterCmd
         * @classdesc Represents a searchFunRoom.
         * @implements IsearchFunRoom
         * @constructor
         * @param {CenterCmd.IsearchFunRoom=} [properties] Properties to set
         */
        function searchFunRoom(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * searchFunRoom userId.
         * @member {string} userId
         * @memberof CenterCmd.searchFunRoom
         * @instance
         */
        searchFunRoom.prototype.userId = "";

        /**
         * searchFunRoom keyword.
         * @member {string} keyword
         * @memberof CenterCmd.searchFunRoom
         * @instance
         */
        searchFunRoom.prototype.keyword = "";

        /**
         * searchFunRoom index.
         * @member {number} index
         * @memberof CenterCmd.searchFunRoom
         * @instance
         */
        searchFunRoom.prototype.index = 0;

        /**
         * Encodes the specified searchFunRoom message. Does not implicitly {@link CenterCmd.searchFunRoom.verify|verify} messages.
         * @function encode
         * @memberof CenterCmd.searchFunRoom
         * @static
         * @param {CenterCmd.IsearchFunRoom} message searchFunRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        searchFunRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.keyword);
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.index);
            return writer;
        };

        /**
         * Encodes the specified searchFunRoom message, length delimited. Does not implicitly {@link CenterCmd.searchFunRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CenterCmd.searchFunRoom
         * @static
         * @param {CenterCmd.IsearchFunRoom} message searchFunRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        searchFunRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return searchFunRoom;
    })();

    CenterCmd.getFunRoomList = (function() {

        /**
         * Properties of a getFunRoomList.
         * @memberof CenterCmd
         * @interface IgetFunRoomList
         * @property {string} userId getFunRoomList userId
         * @property {number|null} [type] getFunRoomList type
         * @property {number|null} [index] getFunRoomList index
         */

        /**
         * Constructs a new getFunRoomList.
         * @memberof CenterCmd
         * @classdesc Represents a getFunRoomList.
         * @implements IgetFunRoomList
         * @constructor
         * @param {CenterCmd.IgetFunRoomList=} [properties] Properties to set
         */
        function getFunRoomList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getFunRoomList userId.
         * @member {string} userId
         * @memberof CenterCmd.getFunRoomList
         * @instance
         */
        getFunRoomList.prototype.userId = "";

        /**
         * getFunRoomList type.
         * @member {number} type
         * @memberof CenterCmd.getFunRoomList
         * @instance
         */
        getFunRoomList.prototype.type = 0;

        /**
         * getFunRoomList index.
         * @member {number} index
         * @memberof CenterCmd.getFunRoomList
         * @instance
         */
        getFunRoomList.prototype.index = 0;

        /**
         * Encodes the specified getFunRoomList message. Does not implicitly {@link CenterCmd.getFunRoomList.verify|verify} messages.
         * @function encode
         * @memberof CenterCmd.getFunRoomList
         * @static
         * @param {CenterCmd.IgetFunRoomList} message getFunRoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getFunRoomList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.index);
            return writer;
        };

        /**
         * Encodes the specified getFunRoomList message, length delimited. Does not implicitly {@link CenterCmd.getFunRoomList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CenterCmd.getFunRoomList
         * @static
         * @param {CenterCmd.IgetFunRoomList} message getFunRoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getFunRoomList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getFunRoomList;
    })();

    CenterCmd.getMyVideoRoomList = (function() {

        /**
         * Properties of a getMyVideoRoomList.
         * @memberof CenterCmd
         * @interface IgetMyVideoRoomList
         * @property {string} userId getMyVideoRoomList userId
         * @property {number|null} [index] getMyVideoRoomList index
         * @property {boolean|null} [getTopOne] getMyVideoRoomList getTopOne
         */

        /**
         * Constructs a new getMyVideoRoomList.
         * @memberof CenterCmd
         * @classdesc Represents a getMyVideoRoomList.
         * @implements IgetMyVideoRoomList
         * @constructor
         * @param {CenterCmd.IgetMyVideoRoomList=} [properties] Properties to set
         */
        function getMyVideoRoomList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getMyVideoRoomList userId.
         * @member {string} userId
         * @memberof CenterCmd.getMyVideoRoomList
         * @instance
         */
        getMyVideoRoomList.prototype.userId = "";

        /**
         * getMyVideoRoomList index.
         * @member {number} index
         * @memberof CenterCmd.getMyVideoRoomList
         * @instance
         */
        getMyVideoRoomList.prototype.index = 0;

        /**
         * getMyVideoRoomList getTopOne.
         * @member {boolean} getTopOne
         * @memberof CenterCmd.getMyVideoRoomList
         * @instance
         */
        getMyVideoRoomList.prototype.getTopOne = false;

        /**
         * Encodes the specified getMyVideoRoomList message. Does not implicitly {@link CenterCmd.getMyVideoRoomList.verify|verify} messages.
         * @function encode
         * @memberof CenterCmd.getMyVideoRoomList
         * @static
         * @param {CenterCmd.IgetMyVideoRoomList} message getMyVideoRoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getMyVideoRoomList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.index);
            if (message.getTopOne != null && message.hasOwnProperty("getTopOne"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.getTopOne);
            return writer;
        };

        /**
         * Encodes the specified getMyVideoRoomList message, length delimited. Does not implicitly {@link CenterCmd.getMyVideoRoomList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CenterCmd.getMyVideoRoomList
         * @static
         * @param {CenterCmd.IgetMyVideoRoomList} message getMyVideoRoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getMyVideoRoomList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getMyVideoRoomList;
    })();

    CenterCmd.getFollowRoomList = (function() {

        /**
         * Properties of a getFollowRoomList.
         * @memberof CenterCmd
         * @interface IgetFollowRoomList
         * @property {string} userId getFollowRoomList userId
         * @property {Array.<string>|null} [userIds] getFollowRoomList userIds
         */

        /**
         * Constructs a new getFollowRoomList.
         * @memberof CenterCmd
         * @classdesc Represents a getFollowRoomList.
         * @implements IgetFollowRoomList
         * @constructor
         * @param {CenterCmd.IgetFollowRoomList=} [properties] Properties to set
         */
        function getFollowRoomList(properties) {
            this.userIds = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getFollowRoomList userId.
         * @member {string} userId
         * @memberof CenterCmd.getFollowRoomList
         * @instance
         */
        getFollowRoomList.prototype.userId = "";

        /**
         * getFollowRoomList userIds.
         * @member {Array.<string>} userIds
         * @memberof CenterCmd.getFollowRoomList
         * @instance
         */
        getFollowRoomList.prototype.userIds = $util.emptyArray;

        /**
         * Encodes the specified getFollowRoomList message. Does not implicitly {@link CenterCmd.getFollowRoomList.verify|verify} messages.
         * @function encode
         * @memberof CenterCmd.getFollowRoomList
         * @static
         * @param {CenterCmd.IgetFollowRoomList} message getFollowRoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getFollowRoomList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.userIds != null && message.userIds.length)
                for (let i = 0; i < message.userIds.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.userIds[i]);
            return writer;
        };

        /**
         * Encodes the specified getFollowRoomList message, length delimited. Does not implicitly {@link CenterCmd.getFollowRoomList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CenterCmd.getFollowRoomList
         * @static
         * @param {CenterCmd.IgetFollowRoomList} message getFollowRoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getFollowRoomList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getFollowRoomList;
    })();

    CenterCmd.getEnterRoomList = (function() {

        /**
         * Properties of a getEnterRoomList.
         * @memberof CenterCmd
         * @interface IgetEnterRoomList
         * @property {string} userId getEnterRoomList userId
         * @property {Array.<string>|null} [roomIds] getEnterRoomList roomIds
         */

        /**
         * Constructs a new getEnterRoomList.
         * @memberof CenterCmd
         * @classdesc Represents a getEnterRoomList.
         * @implements IgetEnterRoomList
         * @constructor
         * @param {CenterCmd.IgetEnterRoomList=} [properties] Properties to set
         */
        function getEnterRoomList(properties) {
            this.roomIds = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getEnterRoomList userId.
         * @member {string} userId
         * @memberof CenterCmd.getEnterRoomList
         * @instance
         */
        getEnterRoomList.prototype.userId = "";

        /**
         * getEnterRoomList roomIds.
         * @member {Array.<string>} roomIds
         * @memberof CenterCmd.getEnterRoomList
         * @instance
         */
        getEnterRoomList.prototype.roomIds = $util.emptyArray;

        /**
         * Encodes the specified getEnterRoomList message. Does not implicitly {@link CenterCmd.getEnterRoomList.verify|verify} messages.
         * @function encode
         * @memberof CenterCmd.getEnterRoomList
         * @static
         * @param {CenterCmd.IgetEnterRoomList} message getEnterRoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getEnterRoomList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.roomIds != null && message.roomIds.length)
                for (let i = 0; i < message.roomIds.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.roomIds[i]);
            return writer;
        };

        /**
         * Encodes the specified getEnterRoomList message, length delimited. Does not implicitly {@link CenterCmd.getEnterRoomList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CenterCmd.getEnterRoomList
         * @static
         * @param {CenterCmd.IgetEnterRoomList} message getEnterRoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getEnterRoomList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getEnterRoomList;
    })();

    CenterCmd.getRankList = (function() {

        /**
         * Properties of a getRankList.
         * @memberof CenterCmd
         * @interface IgetRankList
         * @property {string} userId getRankList userId
         * @property {number} rankType getRankList rankType
         * @property {number|null} [start] getRankList start
         * @property {number|null} [end] getRankList end
         */

        /**
         * Constructs a new getRankList.
         * @memberof CenterCmd
         * @classdesc Represents a getRankList.
         * @implements IgetRankList
         * @constructor
         * @param {CenterCmd.IgetRankList=} [properties] Properties to set
         */
        function getRankList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRankList userId.
         * @member {string} userId
         * @memberof CenterCmd.getRankList
         * @instance
         */
        getRankList.prototype.userId = "";

        /**
         * getRankList rankType.
         * @member {number} rankType
         * @memberof CenterCmd.getRankList
         * @instance
         */
        getRankList.prototype.rankType = 0;

        /**
         * getRankList start.
         * @member {number} start
         * @memberof CenterCmd.getRankList
         * @instance
         */
        getRankList.prototype.start = 0;

        /**
         * getRankList end.
         * @member {number} end
         * @memberof CenterCmd.getRankList
         * @instance
         */
        getRankList.prototype.end = 0;

        /**
         * Encodes the specified getRankList message. Does not implicitly {@link CenterCmd.getRankList.verify|verify} messages.
         * @function encode
         * @memberof CenterCmd.getRankList
         * @static
         * @param {CenterCmd.IgetRankList} message getRankList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRankList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.rankType);
            if (message.start != null && message.hasOwnProperty("start"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.start);
            if (message.end != null && message.hasOwnProperty("end"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
            return writer;
        };

        /**
         * Encodes the specified getRankList message, length delimited. Does not implicitly {@link CenterCmd.getRankList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CenterCmd.getRankList
         * @static
         * @param {CenterCmd.IgetRankList} message getRankList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRankList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRankList;
    })();

    CenterCmd.getRoomRankList = (function() {

        /**
         * Properties of a getRoomRankList.
         * @memberof CenterCmd
         * @interface IgetRoomRankList
         * @property {string} userId getRoomRankList userId
         * @property {string} roomId getRoomRankList roomId
         * @property {number} rankType getRoomRankList rankType
         * @property {number|null} [start] getRoomRankList start
         * @property {number|null} [end] getRoomRankList end
         */

        /**
         * Constructs a new getRoomRankList.
         * @memberof CenterCmd
         * @classdesc Represents a getRoomRankList.
         * @implements IgetRoomRankList
         * @constructor
         * @param {CenterCmd.IgetRoomRankList=} [properties] Properties to set
         */
        function getRoomRankList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRoomRankList userId.
         * @member {string} userId
         * @memberof CenterCmd.getRoomRankList
         * @instance
         */
        getRoomRankList.prototype.userId = "";

        /**
         * getRoomRankList roomId.
         * @member {string} roomId
         * @memberof CenterCmd.getRoomRankList
         * @instance
         */
        getRoomRankList.prototype.roomId = "";

        /**
         * getRoomRankList rankType.
         * @member {number} rankType
         * @memberof CenterCmd.getRoomRankList
         * @instance
         */
        getRoomRankList.prototype.rankType = 0;

        /**
         * getRoomRankList start.
         * @member {number} start
         * @memberof CenterCmd.getRoomRankList
         * @instance
         */
        getRoomRankList.prototype.start = 0;

        /**
         * getRoomRankList end.
         * @member {number} end
         * @memberof CenterCmd.getRoomRankList
         * @instance
         */
        getRoomRankList.prototype.end = 0;

        /**
         * Encodes the specified getRoomRankList message. Does not implicitly {@link CenterCmd.getRoomRankList.verify|verify} messages.
         * @function encode
         * @memberof CenterCmd.getRoomRankList
         * @static
         * @param {CenterCmd.IgetRoomRankList} message getRoomRankList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomRankList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.roomId);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.rankType);
            if (message.start != null && message.hasOwnProperty("start"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.start);
            if (message.end != null && message.hasOwnProperty("end"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.end);
            return writer;
        };

        /**
         * Encodes the specified getRoomRankList message, length delimited. Does not implicitly {@link CenterCmd.getRoomRankList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CenterCmd.getRoomRankList
         * @static
         * @param {CenterCmd.IgetRoomRankList} message getRoomRankList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomRankList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRoomRankList;
    })();

    CenterCmd.getMusicList = (function() {

        /**
         * Properties of a getMusicList.
         * @memberof CenterCmd
         * @interface IgetMusicList
         * @property {string} userId getMusicList userId
         * @property {string|null} [key] getMusicList key
         * @property {string|null} [lastId] getMusicList lastId
         * @property {number} row getMusicList row
         */

        /**
         * Constructs a new getMusicList.
         * @memberof CenterCmd
         * @classdesc Represents a getMusicList.
         * @implements IgetMusicList
         * @constructor
         * @param {CenterCmd.IgetMusicList=} [properties] Properties to set
         */
        function getMusicList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getMusicList userId.
         * @member {string} userId
         * @memberof CenterCmd.getMusicList
         * @instance
         */
        getMusicList.prototype.userId = "";

        /**
         * getMusicList key.
         * @member {string} key
         * @memberof CenterCmd.getMusicList
         * @instance
         */
        getMusicList.prototype.key = "";

        /**
         * getMusicList lastId.
         * @member {string} lastId
         * @memberof CenterCmd.getMusicList
         * @instance
         */
        getMusicList.prototype.lastId = "";

        /**
         * getMusicList row.
         * @member {number} row
         * @memberof CenterCmd.getMusicList
         * @instance
         */
        getMusicList.prototype.row = 0;

        /**
         * Encodes the specified getMusicList message. Does not implicitly {@link CenterCmd.getMusicList.verify|verify} messages.
         * @function encode
         * @memberof CenterCmd.getMusicList
         * @static
         * @param {CenterCmd.IgetMusicList} message getMusicList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getMusicList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.key != null && message.hasOwnProperty("key"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.key);
            if (message.lastId != null && message.hasOwnProperty("lastId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.lastId);
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.row);
            return writer;
        };

        /**
         * Encodes the specified getMusicList message, length delimited. Does not implicitly {@link CenterCmd.getMusicList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CenterCmd.getMusicList
         * @static
         * @param {CenterCmd.IgetMusicList} message getMusicList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getMusicList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getMusicList;
    })();

    CenterCmd.randomRoomId = (function() {

        /**
         * Properties of a randomRoomId.
         * @memberof CenterCmd
         * @interface IrandomRoomId
         * @property {string} userId randomRoomId userId
         * @property {number} type randomRoomId type
         */

        /**
         * Constructs a new randomRoomId.
         * @memberof CenterCmd
         * @classdesc Represents a randomRoomId.
         * @implements IrandomRoomId
         * @constructor
         * @param {CenterCmd.IrandomRoomId=} [properties] Properties to set
         */
        function randomRoomId(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * randomRoomId userId.
         * @member {string} userId
         * @memberof CenterCmd.randomRoomId
         * @instance
         */
        randomRoomId.prototype.userId = "";

        /**
         * randomRoomId type.
         * @member {number} type
         * @memberof CenterCmd.randomRoomId
         * @instance
         */
        randomRoomId.prototype.type = 0;

        /**
         * Encodes the specified randomRoomId message. Does not implicitly {@link CenterCmd.randomRoomId.verify|verify} messages.
         * @function encode
         * @memberof CenterCmd.randomRoomId
         * @static
         * @param {CenterCmd.IrandomRoomId} message randomRoomId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        randomRoomId.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified randomRoomId message, length delimited. Does not implicitly {@link CenterCmd.randomRoomId.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CenterCmd.randomRoomId
         * @static
         * @param {CenterCmd.IrandomRoomId} message randomRoomId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        randomRoomId.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return randomRoomId;
    })();

    CenterCmd.getRecommendRoomId = (function() {

        /**
         * Properties of a getRecommendRoomId.
         * @memberof CenterCmd
         * @interface IgetRecommendRoomId
         * @property {string} userId getRecommendRoomId userId
         */

        /**
         * Constructs a new getRecommendRoomId.
         * @memberof CenterCmd
         * @classdesc Represents a getRecommendRoomId.
         * @implements IgetRecommendRoomId
         * @constructor
         * @param {CenterCmd.IgetRecommendRoomId=} [properties] Properties to set
         */
        function getRecommendRoomId(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRecommendRoomId userId.
         * @member {string} userId
         * @memberof CenterCmd.getRecommendRoomId
         * @instance
         */
        getRecommendRoomId.prototype.userId = "";

        /**
         * Encodes the specified getRecommendRoomId message. Does not implicitly {@link CenterCmd.getRecommendRoomId.verify|verify} messages.
         * @function encode
         * @memberof CenterCmd.getRecommendRoomId
         * @static
         * @param {CenterCmd.IgetRecommendRoomId} message getRecommendRoomId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRecommendRoomId.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified getRecommendRoomId message, length delimited. Does not implicitly {@link CenterCmd.getRecommendRoomId.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CenterCmd.getRecommendRoomId
         * @static
         * @param {CenterCmd.IgetRecommendRoomId} message getRecommendRoomId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRecommendRoomId.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRecommendRoomId;
    })();

    CenterCmd.getRecommendVideoRoom = (function() {

        /**
         * Properties of a getRecommendVideoRoom.
         * @memberof CenterCmd
         * @interface IgetRecommendVideoRoom
         * @property {string} userId getRecommendVideoRoom userId
         */

        /**
         * Constructs a new getRecommendVideoRoom.
         * @memberof CenterCmd
         * @classdesc Represents a getRecommendVideoRoom.
         * @implements IgetRecommendVideoRoom
         * @constructor
         * @param {CenterCmd.IgetRecommendVideoRoom=} [properties] Properties to set
         */
        function getRecommendVideoRoom(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRecommendVideoRoom userId.
         * @member {string} userId
         * @memberof CenterCmd.getRecommendVideoRoom
         * @instance
         */
        getRecommendVideoRoom.prototype.userId = "";

        /**
         * Encodes the specified getRecommendVideoRoom message. Does not implicitly {@link CenterCmd.getRecommendVideoRoom.verify|verify} messages.
         * @function encode
         * @memberof CenterCmd.getRecommendVideoRoom
         * @static
         * @param {CenterCmd.IgetRecommendVideoRoom} message getRecommendVideoRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRecommendVideoRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified getRecommendVideoRoom message, length delimited. Does not implicitly {@link CenterCmd.getRecommendVideoRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CenterCmd.getRecommendVideoRoom
         * @static
         * @param {CenterCmd.IgetRecommendVideoRoom} message getRecommendVideoRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRecommendVideoRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRecommendVideoRoom;
    })();

    CenterCmd.getRankRoomList = (function() {

        /**
         * Properties of a getRankRoomList.
         * @memberof CenterCmd
         * @interface IgetRankRoomList
         * @property {string} roomId getRankRoomList roomId
         * @property {number} rankType getRankRoomList rankType
         * @property {number|null} [start] getRankRoomList start
         * @property {number|null} [end] getRankRoomList end
         * @property {boolean|null} [pre] getRankRoomList pre
         */

        /**
         * Constructs a new getRankRoomList.
         * @memberof CenterCmd
         * @classdesc Represents a getRankRoomList.
         * @implements IgetRankRoomList
         * @constructor
         * @param {CenterCmd.IgetRankRoomList=} [properties] Properties to set
         */
        function getRankRoomList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRankRoomList roomId.
         * @member {string} roomId
         * @memberof CenterCmd.getRankRoomList
         * @instance
         */
        getRankRoomList.prototype.roomId = "";

        /**
         * getRankRoomList rankType.
         * @member {number} rankType
         * @memberof CenterCmd.getRankRoomList
         * @instance
         */
        getRankRoomList.prototype.rankType = 0;

        /**
         * getRankRoomList start.
         * @member {number} start
         * @memberof CenterCmd.getRankRoomList
         * @instance
         */
        getRankRoomList.prototype.start = 0;

        /**
         * getRankRoomList end.
         * @member {number} end
         * @memberof CenterCmd.getRankRoomList
         * @instance
         */
        getRankRoomList.prototype.end = 0;

        /**
         * getRankRoomList pre.
         * @member {boolean} pre
         * @memberof CenterCmd.getRankRoomList
         * @instance
         */
        getRankRoomList.prototype.pre = false;

        /**
         * Encodes the specified getRankRoomList message. Does not implicitly {@link CenterCmd.getRankRoomList.verify|verify} messages.
         * @function encode
         * @memberof CenterCmd.getRankRoomList
         * @static
         * @param {CenterCmd.IgetRankRoomList} message getRankRoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRankRoomList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.rankType);
            if (message.start != null && message.hasOwnProperty("start"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.start);
            if (message.end != null && message.hasOwnProperty("end"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
            if (message.pre != null && message.hasOwnProperty("pre"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.pre);
            return writer;
        };

        /**
         * Encodes the specified getRankRoomList message, length delimited. Does not implicitly {@link CenterCmd.getRankRoomList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CenterCmd.getRankRoomList
         * @static
         * @param {CenterCmd.IgetRankRoomList} message getRankRoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRankRoomList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRankRoomList;
    })();

    CenterCmd.getRankInfo = (function() {

        /**
         * Properties of a getRankInfo.
         * @memberof CenterCmd
         * @interface IgetRankInfo
         * @property {string} targetId getRankInfo targetId
         * @property {number} rankType getRankInfo rankType
         */

        /**
         * Constructs a new getRankInfo.
         * @memberof CenterCmd
         * @classdesc Represents a getRankInfo.
         * @implements IgetRankInfo
         * @constructor
         * @param {CenterCmd.IgetRankInfo=} [properties] Properties to set
         */
        function getRankInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRankInfo targetId.
         * @member {string} targetId
         * @memberof CenterCmd.getRankInfo
         * @instance
         */
        getRankInfo.prototype.targetId = "";

        /**
         * getRankInfo rankType.
         * @member {number} rankType
         * @memberof CenterCmd.getRankInfo
         * @instance
         */
        getRankInfo.prototype.rankType = 0;

        /**
         * Encodes the specified getRankInfo message. Does not implicitly {@link CenterCmd.getRankInfo.verify|verify} messages.
         * @function encode
         * @memberof CenterCmd.getRankInfo
         * @static
         * @param {CenterCmd.IgetRankInfo} message getRankInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRankInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.rankType);
            return writer;
        };

        /**
         * Encodes the specified getRankInfo message, length delimited. Does not implicitly {@link CenterCmd.getRankInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CenterCmd.getRankInfo
         * @static
         * @param {CenterCmd.IgetRankInfo} message getRankInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRankInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRankInfo;
    })();

    CenterCmd.getSkillUserList = (function() {

        /**
         * Properties of a getSkillUserList.
         * @memberof CenterCmd
         * @interface IgetSkillUserList
         * @property {string} userId getSkillUserList userId
         * @property {number|null} [type] getSkillUserList type
         * @property {number|null} [index] getSkillUserList index
         */

        /**
         * Constructs a new getSkillUserList.
         * @memberof CenterCmd
         * @classdesc Represents a getSkillUserList.
         * @implements IgetSkillUserList
         * @constructor
         * @param {CenterCmd.IgetSkillUserList=} [properties] Properties to set
         */
        function getSkillUserList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getSkillUserList userId.
         * @member {string} userId
         * @memberof CenterCmd.getSkillUserList
         * @instance
         */
        getSkillUserList.prototype.userId = "";

        /**
         * getSkillUserList type.
         * @member {number} type
         * @memberof CenterCmd.getSkillUserList
         * @instance
         */
        getSkillUserList.prototype.type = 0;

        /**
         * getSkillUserList index.
         * @member {number} index
         * @memberof CenterCmd.getSkillUserList
         * @instance
         */
        getSkillUserList.prototype.index = 0;

        /**
         * Encodes the specified getSkillUserList message. Does not implicitly {@link CenterCmd.getSkillUserList.verify|verify} messages.
         * @function encode
         * @memberof CenterCmd.getSkillUserList
         * @static
         * @param {CenterCmd.IgetSkillUserList} message getSkillUserList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getSkillUserList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.index);
            return writer;
        };

        /**
         * Encodes the specified getSkillUserList message, length delimited. Does not implicitly {@link CenterCmd.getSkillUserList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CenterCmd.getSkillUserList
         * @static
         * @param {CenterCmd.IgetSkillUserList} message getSkillUserList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getSkillUserList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getSkillUserList;
    })();

    return CenterCmd;
})();

export const CommentCmd = $root.CommentCmd = (() => {

    /**
     * Namespace CommentCmd.
     * @exports CommentCmd
     * @namespace
     */
    const CommentCmd = {};

    CommentCmd.issueComment = (function() {

        /**
         * Properties of an issueComment.
         * @memberof CommentCmd
         * @interface IissueComment
         * @property {string} dataId issueComment dataId
         * @property {number} type issueComment type
         * @property {string|null} [word] issueComment word
         * @property {string|null} [voice] issueComment voice
         * @property {number|null} [voiceDur] issueComment voiceDur
         * @property {Array.<string>|null} [pics] issueComment pics
         * @property {string|null} [beRepliedCommentId] issueComment beRepliedCommentId
         */

        /**
         * Constructs a new issueComment.
         * @memberof CommentCmd
         * @classdesc Represents an issueComment.
         * @implements IissueComment
         * @constructor
         * @param {CommentCmd.IissueComment=} [properties] Properties to set
         */
        function issueComment(properties) {
            this.pics = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * issueComment dataId.
         * @member {string} dataId
         * @memberof CommentCmd.issueComment
         * @instance
         */
        issueComment.prototype.dataId = "";

        /**
         * issueComment type.
         * @member {number} type
         * @memberof CommentCmd.issueComment
         * @instance
         */
        issueComment.prototype.type = 0;

        /**
         * issueComment word.
         * @member {string} word
         * @memberof CommentCmd.issueComment
         * @instance
         */
        issueComment.prototype.word = "";

        /**
         * issueComment voice.
         * @member {string} voice
         * @memberof CommentCmd.issueComment
         * @instance
         */
        issueComment.prototype.voice = "";

        /**
         * issueComment voiceDur.
         * @member {number} voiceDur
         * @memberof CommentCmd.issueComment
         * @instance
         */
        issueComment.prototype.voiceDur = 0;

        /**
         * issueComment pics.
         * @member {Array.<string>} pics
         * @memberof CommentCmd.issueComment
         * @instance
         */
        issueComment.prototype.pics = $util.emptyArray;

        /**
         * issueComment beRepliedCommentId.
         * @member {string} beRepliedCommentId
         * @memberof CommentCmd.issueComment
         * @instance
         */
        issueComment.prototype.beRepliedCommentId = "";

        /**
         * Encodes the specified issueComment message. Does not implicitly {@link CommentCmd.issueComment.verify|verify} messages.
         * @function encode
         * @memberof CommentCmd.issueComment
         * @static
         * @param {CommentCmd.IissueComment} message issueComment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        issueComment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.dataId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            if (message.word != null && message.hasOwnProperty("word"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.word);
            if (message.voice != null && message.hasOwnProperty("voice"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.voice);
            if (message.voiceDur != null && message.hasOwnProperty("voiceDur"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.voiceDur);
            if (message.pics != null && message.pics.length)
                for (let i = 0; i < message.pics.length; ++i)
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.pics[i]);
            if (message.beRepliedCommentId != null && message.hasOwnProperty("beRepliedCommentId"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.beRepliedCommentId);
            return writer;
        };

        /**
         * Encodes the specified issueComment message, length delimited. Does not implicitly {@link CommentCmd.issueComment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CommentCmd.issueComment
         * @static
         * @param {CommentCmd.IissueComment} message issueComment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        issueComment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return issueComment;
    })();

    CommentCmd.listComment = (function() {

        /**
         * Properties of a listComment.
         * @memberof CommentCmd
         * @interface IlistComment
         * @property {string} dataId listComment dataId
         * @property {number} type listComment type
         * @property {string|null} [lastId] listComment lastId
         * @property {number} size listComment size
         * @property {number} sort listComment sort
         * @property {number} order listComment order
         */

        /**
         * Constructs a new listComment.
         * @memberof CommentCmd
         * @classdesc Represents a listComment.
         * @implements IlistComment
         * @constructor
         * @param {CommentCmd.IlistComment=} [properties] Properties to set
         */
        function listComment(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * listComment dataId.
         * @member {string} dataId
         * @memberof CommentCmd.listComment
         * @instance
         */
        listComment.prototype.dataId = "";

        /**
         * listComment type.
         * @member {number} type
         * @memberof CommentCmd.listComment
         * @instance
         */
        listComment.prototype.type = 0;

        /**
         * listComment lastId.
         * @member {string} lastId
         * @memberof CommentCmd.listComment
         * @instance
         */
        listComment.prototype.lastId = "";

        /**
         * listComment size.
         * @member {number} size
         * @memberof CommentCmd.listComment
         * @instance
         */
        listComment.prototype.size = 0;

        /**
         * listComment sort.
         * @member {number} sort
         * @memberof CommentCmd.listComment
         * @instance
         */
        listComment.prototype.sort = 0;

        /**
         * listComment order.
         * @member {number} order
         * @memberof CommentCmd.listComment
         * @instance
         */
        listComment.prototype.order = 0;

        /**
         * Encodes the specified listComment message. Does not implicitly {@link CommentCmd.listComment.verify|verify} messages.
         * @function encode
         * @memberof CommentCmd.listComment
         * @static
         * @param {CommentCmd.IlistComment} message listComment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listComment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.dataId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            if (message.lastId != null && message.hasOwnProperty("lastId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.lastId);
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.size);
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.sort);
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.order);
            return writer;
        };

        /**
         * Encodes the specified listComment message, length delimited. Does not implicitly {@link CommentCmd.listComment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CommentCmd.listComment
         * @static
         * @param {CommentCmd.IlistComment} message listComment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listComment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return listComment;
    })();

    CommentCmd.likeComment = (function() {

        /**
         * Properties of a likeComment.
         * @memberof CommentCmd
         * @interface IlikeComment
         * @property {string} id likeComment id
         */

        /**
         * Constructs a new likeComment.
         * @memberof CommentCmd
         * @classdesc Represents a likeComment.
         * @implements IlikeComment
         * @constructor
         * @param {CommentCmd.IlikeComment=} [properties] Properties to set
         */
        function likeComment(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * likeComment id.
         * @member {string} id
         * @memberof CommentCmd.likeComment
         * @instance
         */
        likeComment.prototype.id = "";

        /**
         * Encodes the specified likeComment message. Does not implicitly {@link CommentCmd.likeComment.verify|verify} messages.
         * @function encode
         * @memberof CommentCmd.likeComment
         * @static
         * @param {CommentCmd.IlikeComment} message likeComment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        likeComment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
            return writer;
        };

        /**
         * Encodes the specified likeComment message, length delimited. Does not implicitly {@link CommentCmd.likeComment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CommentCmd.likeComment
         * @static
         * @param {CommentCmd.IlikeComment} message likeComment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        likeComment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return likeComment;
    })();

    CommentCmd.cancelLikeComment = (function() {

        /**
         * Properties of a cancelLikeComment.
         * @memberof CommentCmd
         * @interface IcancelLikeComment
         * @property {string} id cancelLikeComment id
         */

        /**
         * Constructs a new cancelLikeComment.
         * @memberof CommentCmd
         * @classdesc Represents a cancelLikeComment.
         * @implements IcancelLikeComment
         * @constructor
         * @param {CommentCmd.IcancelLikeComment=} [properties] Properties to set
         */
        function cancelLikeComment(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cancelLikeComment id.
         * @member {string} id
         * @memberof CommentCmd.cancelLikeComment
         * @instance
         */
        cancelLikeComment.prototype.id = "";

        /**
         * Encodes the specified cancelLikeComment message. Does not implicitly {@link CommentCmd.cancelLikeComment.verify|verify} messages.
         * @function encode
         * @memberof CommentCmd.cancelLikeComment
         * @static
         * @param {CommentCmd.IcancelLikeComment} message cancelLikeComment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cancelLikeComment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
            return writer;
        };

        /**
         * Encodes the specified cancelLikeComment message, length delimited. Does not implicitly {@link CommentCmd.cancelLikeComment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CommentCmd.cancelLikeComment
         * @static
         * @param {CommentCmd.IcancelLikeComment} message cancelLikeComment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cancelLikeComment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return cancelLikeComment;
    })();

    CommentCmd.delComment = (function() {

        /**
         * Properties of a delComment.
         * @memberof CommentCmd
         * @interface IdelComment
         * @property {string} id delComment id
         */

        /**
         * Constructs a new delComment.
         * @memberof CommentCmd
         * @classdesc Represents a delComment.
         * @implements IdelComment
         * @constructor
         * @param {CommentCmd.IdelComment=} [properties] Properties to set
         */
        function delComment(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * delComment id.
         * @member {string} id
         * @memberof CommentCmd.delComment
         * @instance
         */
        delComment.prototype.id = "";

        /**
         * Encodes the specified delComment message. Does not implicitly {@link CommentCmd.delComment.verify|verify} messages.
         * @function encode
         * @memberof CommentCmd.delComment
         * @static
         * @param {CommentCmd.IdelComment} message delComment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delComment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
            return writer;
        };

        /**
         * Encodes the specified delComment message, length delimited. Does not implicitly {@link CommentCmd.delComment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CommentCmd.delComment
         * @static
         * @param {CommentCmd.IdelComment} message delComment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delComment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return delComment;
    })();

    return CommentCmd;
})();

export const DataCmd = $root.DataCmd = (() => {

    /**
     * Namespace DataCmd.
     * @exports DataCmd
     * @namespace
     */
    const DataCmd = {};

    DataCmd.launchSelect = (function() {

        /**
         * Properties of a launchSelect.
         * @memberof DataCmd
         * @interface IlaunchSelect
         * @property {number} type launchSelect type
         */

        /**
         * Constructs a new launchSelect.
         * @memberof DataCmd
         * @classdesc Represents a launchSelect.
         * @implements IlaunchSelect
         * @constructor
         * @param {DataCmd.IlaunchSelect=} [properties] Properties to set
         */
        function launchSelect(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * launchSelect type.
         * @member {number} type
         * @memberof DataCmd.launchSelect
         * @instance
         */
        launchSelect.prototype.type = 0;

        /**
         * Encodes the specified launchSelect message. Does not implicitly {@link DataCmd.launchSelect.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.launchSelect
         * @static
         * @param {DataCmd.IlaunchSelect} message launchSelect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        launchSelect.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified launchSelect message, length delimited. Does not implicitly {@link DataCmd.launchSelect.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.launchSelect
         * @static
         * @param {DataCmd.IlaunchSelect} message launchSelect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        launchSelect.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return launchSelect;
    })();

    DataCmd.actionData = (function() {

        /**
         * Properties of an actionData.
         * @memberof DataCmd
         * @interface IactionData
         * @property {number} actionType actionData actionType
         */

        /**
         * Constructs a new actionData.
         * @memberof DataCmd
         * @classdesc Represents an actionData.
         * @implements IactionData
         * @constructor
         * @param {DataCmd.IactionData=} [properties] Properties to set
         */
        function actionData(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * actionData actionType.
         * @member {number} actionType
         * @memberof DataCmd.actionData
         * @instance
         */
        actionData.prototype.actionType = 0;

        /**
         * Encodes the specified actionData message. Does not implicitly {@link DataCmd.actionData.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.actionData
         * @static
         * @param {DataCmd.IactionData} message actionData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        actionData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.actionType);
            return writer;
        };

        /**
         * Encodes the specified actionData message, length delimited. Does not implicitly {@link DataCmd.actionData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.actionData
         * @static
         * @param {DataCmd.IactionData} message actionData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        actionData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return actionData;
    })();

    DataCmd.getOnlineUserInfoList = (function() {

        /**
         * Properties of a getOnlineUserInfoList.
         * @memberof DataCmd
         * @interface IgetOnlineUserInfoList
         * @property {number|null} [sex] getOnlineUserInfoList sex
         * @property {number|Long|null} [loginTime] getOnlineUserInfoList loginTime
         * @property {string|null} [overLookUserId] getOnlineUserInfoList overLookUserId
         * @property {number|null} [rows] getOnlineUserInfoList rows
         * @property {number|null} [onlineType] getOnlineUserInfoList onlineType
         */

        /**
         * Constructs a new getOnlineUserInfoList.
         * @memberof DataCmd
         * @classdesc Represents a getOnlineUserInfoList.
         * @implements IgetOnlineUserInfoList
         * @constructor
         * @param {DataCmd.IgetOnlineUserInfoList=} [properties] Properties to set
         */
        function getOnlineUserInfoList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getOnlineUserInfoList sex.
         * @member {number} sex
         * @memberof DataCmd.getOnlineUserInfoList
         * @instance
         */
        getOnlineUserInfoList.prototype.sex = 0;

        /**
         * getOnlineUserInfoList loginTime.
         * @member {number|Long} loginTime
         * @memberof DataCmd.getOnlineUserInfoList
         * @instance
         */
        getOnlineUserInfoList.prototype.loginTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * getOnlineUserInfoList overLookUserId.
         * @member {string} overLookUserId
         * @memberof DataCmd.getOnlineUserInfoList
         * @instance
         */
        getOnlineUserInfoList.prototype.overLookUserId = "";

        /**
         * getOnlineUserInfoList rows.
         * @member {number} rows
         * @memberof DataCmd.getOnlineUserInfoList
         * @instance
         */
        getOnlineUserInfoList.prototype.rows = 0;

        /**
         * getOnlineUserInfoList onlineType.
         * @member {number} onlineType
         * @memberof DataCmd.getOnlineUserInfoList
         * @instance
         */
        getOnlineUserInfoList.prototype.onlineType = 0;

        /**
         * Encodes the specified getOnlineUserInfoList message. Does not implicitly {@link DataCmd.getOnlineUserInfoList.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.getOnlineUserInfoList
         * @static
         * @param {DataCmd.IgetOnlineUserInfoList} message getOnlineUserInfoList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getOnlineUserInfoList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sex != null && message.hasOwnProperty("sex"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.sex);
            if (message.loginTime != null && message.hasOwnProperty("loginTime"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.loginTime);
            if (message.overLookUserId != null && message.hasOwnProperty("overLookUserId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.overLookUserId);
            if (message.rows != null && message.hasOwnProperty("rows"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.rows);
            if (message.onlineType != null && message.hasOwnProperty("onlineType"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.onlineType);
            return writer;
        };

        /**
         * Encodes the specified getOnlineUserInfoList message, length delimited. Does not implicitly {@link DataCmd.getOnlineUserInfoList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.getOnlineUserInfoList
         * @static
         * @param {DataCmd.IgetOnlineUserInfoList} message getOnlineUserInfoList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getOnlineUserInfoList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getOnlineUserInfoList;
    })();

    DataCmd.getRecommendUserInfoList = (function() {

        /**
         * Properties of a getRecommendUserInfoList.
         * @memberof DataCmd
         * @interface IgetRecommendUserInfoList
         * @property {string} keyword getRecommendUserInfoList keyword
         * @property {number} start getRecommendUserInfoList start
         * @property {number} end getRecommendUserInfoList end
         * @property {string|null} [overLookUserId] getRecommendUserInfoList overLookUserId
         */

        /**
         * Constructs a new getRecommendUserInfoList.
         * @memberof DataCmd
         * @classdesc Represents a getRecommendUserInfoList.
         * @implements IgetRecommendUserInfoList
         * @constructor
         * @param {DataCmd.IgetRecommendUserInfoList=} [properties] Properties to set
         */
        function getRecommendUserInfoList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRecommendUserInfoList keyword.
         * @member {string} keyword
         * @memberof DataCmd.getRecommendUserInfoList
         * @instance
         */
        getRecommendUserInfoList.prototype.keyword = "";

        /**
         * getRecommendUserInfoList start.
         * @member {number} start
         * @memberof DataCmd.getRecommendUserInfoList
         * @instance
         */
        getRecommendUserInfoList.prototype.start = 0;

        /**
         * getRecommendUserInfoList end.
         * @member {number} end
         * @memberof DataCmd.getRecommendUserInfoList
         * @instance
         */
        getRecommendUserInfoList.prototype.end = 0;

        /**
         * getRecommendUserInfoList overLookUserId.
         * @member {string} overLookUserId
         * @memberof DataCmd.getRecommendUserInfoList
         * @instance
         */
        getRecommendUserInfoList.prototype.overLookUserId = "";

        /**
         * Encodes the specified getRecommendUserInfoList message. Does not implicitly {@link DataCmd.getRecommendUserInfoList.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.getRecommendUserInfoList
         * @static
         * @param {DataCmd.IgetRecommendUserInfoList} message getRecommendUserInfoList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRecommendUserInfoList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.keyword);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.start);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.end);
            if (message.overLookUserId != null && message.hasOwnProperty("overLookUserId"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.overLookUserId);
            return writer;
        };

        /**
         * Encodes the specified getRecommendUserInfoList message, length delimited. Does not implicitly {@link DataCmd.getRecommendUserInfoList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.getRecommendUserInfoList
         * @static
         * @param {DataCmd.IgetRecommendUserInfoList} message getRecommendUserInfoList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRecommendUserInfoList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRecommendUserInfoList;
    })();

    DataCmd.randomMatch = (function() {

        /**
         * Properties of a randomMatch.
         * @memberof DataCmd
         * @interface IrandomMatch
         * @property {boolean} enter randomMatch enter
         */

        /**
         * Constructs a new randomMatch.
         * @memberof DataCmd
         * @classdesc Represents a randomMatch.
         * @implements IrandomMatch
         * @constructor
         * @param {DataCmd.IrandomMatch=} [properties] Properties to set
         */
        function randomMatch(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * randomMatch enter.
         * @member {boolean} enter
         * @memberof DataCmd.randomMatch
         * @instance
         */
        randomMatch.prototype.enter = false;

        /**
         * Encodes the specified randomMatch message. Does not implicitly {@link DataCmd.randomMatch.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.randomMatch
         * @static
         * @param {DataCmd.IrandomMatch} message randomMatch message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        randomMatch.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.enter);
            return writer;
        };

        /**
         * Encodes the specified randomMatch message, length delimited. Does not implicitly {@link DataCmd.randomMatch.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.randomMatch
         * @static
         * @param {DataCmd.IrandomMatch} message randomMatch message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        randomMatch.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return randomMatch;
    })();

    DataCmd.getRandomMatch = (function() {

        /**
         * Properties of a getRandomMatch.
         * @memberof DataCmd
         * @interface IgetRandomMatch
         * @property {number} size getRandomMatch size
         */

        /**
         * Constructs a new getRandomMatch.
         * @memberof DataCmd
         * @classdesc Represents a getRandomMatch.
         * @implements IgetRandomMatch
         * @constructor
         * @param {DataCmd.IgetRandomMatch=} [properties] Properties to set
         */
        function getRandomMatch(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRandomMatch size.
         * @member {number} size
         * @memberof DataCmd.getRandomMatch
         * @instance
         */
        getRandomMatch.prototype.size = 0;

        /**
         * Encodes the specified getRandomMatch message. Does not implicitly {@link DataCmd.getRandomMatch.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.getRandomMatch
         * @static
         * @param {DataCmd.IgetRandomMatch} message getRandomMatch message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRandomMatch.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.size);
            return writer;
        };

        /**
         * Encodes the specified getRandomMatch message, length delimited. Does not implicitly {@link DataCmd.getRandomMatch.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.getRandomMatch
         * @static
         * @param {DataCmd.IgetRandomMatch} message getRandomMatch message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRandomMatch.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRandomMatch;
    })();

    DataCmd.randomOnlineUserId = (function() {

        /**
         * Properties of a randomOnlineUserId.
         * @memberof DataCmd
         * @interface IrandomOnlineUserId
         * @property {boolean} isStranger randomOnlineUserId isStranger
         */

        /**
         * Constructs a new randomOnlineUserId.
         * @memberof DataCmd
         * @classdesc Represents a randomOnlineUserId.
         * @implements IrandomOnlineUserId
         * @constructor
         * @param {DataCmd.IrandomOnlineUserId=} [properties] Properties to set
         */
        function randomOnlineUserId(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * randomOnlineUserId isStranger.
         * @member {boolean} isStranger
         * @memberof DataCmd.randomOnlineUserId
         * @instance
         */
        randomOnlineUserId.prototype.isStranger = false;

        /**
         * Encodes the specified randomOnlineUserId message. Does not implicitly {@link DataCmd.randomOnlineUserId.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.randomOnlineUserId
         * @static
         * @param {DataCmd.IrandomOnlineUserId} message randomOnlineUserId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        randomOnlineUserId.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.isStranger);
            return writer;
        };

        /**
         * Encodes the specified randomOnlineUserId message, length delimited. Does not implicitly {@link DataCmd.randomOnlineUserId.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.randomOnlineUserId
         * @static
         * @param {DataCmd.IrandomOnlineUserId} message randomOnlineUserId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        randomOnlineUserId.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return randomOnlineUserId;
    })();

    DataCmd.randomRoomId = (function() {

        /**
         * Properties of a randomRoomId.
         * @memberof DataCmd
         * @interface IrandomRoomId
         */

        /**
         * Constructs a new randomRoomId.
         * @memberof DataCmd
         * @classdesc Represents a randomRoomId.
         * @implements IrandomRoomId
         * @constructor
         * @param {DataCmd.IrandomRoomId=} [properties] Properties to set
         */
        function randomRoomId(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified randomRoomId message. Does not implicitly {@link DataCmd.randomRoomId.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.randomRoomId
         * @static
         * @param {DataCmd.IrandomRoomId} message randomRoomId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        randomRoomId.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified randomRoomId message, length delimited. Does not implicitly {@link DataCmd.randomRoomId.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.randomRoomId
         * @static
         * @param {DataCmd.IrandomRoomId} message randomRoomId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        randomRoomId.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return randomRoomId;
    })();

    DataCmd.prohibition = (function() {

        /**
         * Properties of a prohibition.
         * @memberof DataCmd
         * @interface Iprohibition
         * @property {string} targetId prohibition targetId
         * @property {boolean} forever prohibition forever
         * @property {number} reason prohibition reason
         */

        /**
         * Constructs a new prohibition.
         * @memberof DataCmd
         * @classdesc Represents a prohibition.
         * @implements Iprohibition
         * @constructor
         * @param {DataCmd.Iprohibition=} [properties] Properties to set
         */
        function prohibition(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * prohibition targetId.
         * @member {string} targetId
         * @memberof DataCmd.prohibition
         * @instance
         */
        prohibition.prototype.targetId = "";

        /**
         * prohibition forever.
         * @member {boolean} forever
         * @memberof DataCmd.prohibition
         * @instance
         */
        prohibition.prototype.forever = false;

        /**
         * prohibition reason.
         * @member {number} reason
         * @memberof DataCmd.prohibition
         * @instance
         */
        prohibition.prototype.reason = 0;

        /**
         * Encodes the specified prohibition message. Does not implicitly {@link DataCmd.prohibition.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.prohibition
         * @static
         * @param {DataCmd.Iprohibition} message prohibition message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        prohibition.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.forever);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.reason);
            return writer;
        };

        /**
         * Encodes the specified prohibition message, length delimited. Does not implicitly {@link DataCmd.prohibition.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.prohibition
         * @static
         * @param {DataCmd.Iprohibition} message prohibition message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        prohibition.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return prohibition;
    })();

    DataCmd.delMoment = (function() {

        /**
         * Properties of a delMoment.
         * @memberof DataCmd
         * @interface IdelMoment
         * @property {string} targetId delMoment targetId
         * @property {string} momentId delMoment momentId
         */

        /**
         * Constructs a new delMoment.
         * @memberof DataCmd
         * @classdesc Represents a delMoment.
         * @implements IdelMoment
         * @constructor
         * @param {DataCmd.IdelMoment=} [properties] Properties to set
         */
        function delMoment(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * delMoment targetId.
         * @member {string} targetId
         * @memberof DataCmd.delMoment
         * @instance
         */
        delMoment.prototype.targetId = "";

        /**
         * delMoment momentId.
         * @member {string} momentId
         * @memberof DataCmd.delMoment
         * @instance
         */
        delMoment.prototype.momentId = "";

        /**
         * Encodes the specified delMoment message. Does not implicitly {@link DataCmd.delMoment.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.delMoment
         * @static
         * @param {DataCmd.IdelMoment} message delMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delMoment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.momentId);
            return writer;
        };

        /**
         * Encodes the specified delMoment message, length delimited. Does not implicitly {@link DataCmd.delMoment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.delMoment
         * @static
         * @param {DataCmd.IdelMoment} message delMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delMoment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return delMoment;
    })();

    DataCmd.changeLogo = (function() {

        /**
         * Properties of a changeLogo.
         * @memberof DataCmd
         * @interface IchangeLogo
         * @property {string} targetId changeLogo targetId
         */

        /**
         * Constructs a new changeLogo.
         * @memberof DataCmd
         * @classdesc Represents a changeLogo.
         * @implements IchangeLogo
         * @constructor
         * @param {DataCmd.IchangeLogo=} [properties] Properties to set
         */
        function changeLogo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * changeLogo targetId.
         * @member {string} targetId
         * @memberof DataCmd.changeLogo
         * @instance
         */
        changeLogo.prototype.targetId = "";

        /**
         * Encodes the specified changeLogo message. Does not implicitly {@link DataCmd.changeLogo.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.changeLogo
         * @static
         * @param {DataCmd.IchangeLogo} message changeLogo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        changeLogo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            return writer;
        };

        /**
         * Encodes the specified changeLogo message, length delimited. Does not implicitly {@link DataCmd.changeLogo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.changeLogo
         * @static
         * @param {DataCmd.IchangeLogo} message changeLogo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        changeLogo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return changeLogo;
    })();

    DataCmd.yellowReport = (function() {

        /**
         * Properties of a yellowReport.
         * @memberof DataCmd
         * @interface IyellowReport
         * @property {number} actionType yellowReport actionType
         * @property {number} action yellowReport action
         * @property {number} level yellowReport level
         * @property {number} label yellowReport label
         * @property {string|null} [content] yellowReport content
         */

        /**
         * Constructs a new yellowReport.
         * @memberof DataCmd
         * @classdesc Represents a yellowReport.
         * @implements IyellowReport
         * @constructor
         * @param {DataCmd.IyellowReport=} [properties] Properties to set
         */
        function yellowReport(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * yellowReport actionType.
         * @member {number} actionType
         * @memberof DataCmd.yellowReport
         * @instance
         */
        yellowReport.prototype.actionType = 0;

        /**
         * yellowReport action.
         * @member {number} action
         * @memberof DataCmd.yellowReport
         * @instance
         */
        yellowReport.prototype.action = 0;

        /**
         * yellowReport level.
         * @member {number} level
         * @memberof DataCmd.yellowReport
         * @instance
         */
        yellowReport.prototype.level = 0;

        /**
         * yellowReport label.
         * @member {number} label
         * @memberof DataCmd.yellowReport
         * @instance
         */
        yellowReport.prototype.label = 0;

        /**
         * yellowReport content.
         * @member {string} content
         * @memberof DataCmd.yellowReport
         * @instance
         */
        yellowReport.prototype.content = "";

        /**
         * Encodes the specified yellowReport message. Does not implicitly {@link DataCmd.yellowReport.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.yellowReport
         * @static
         * @param {DataCmd.IyellowReport} message yellowReport message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yellowReport.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.actionType);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.action);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.level);
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
            if (message.content != null && message.hasOwnProperty("content"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.content);
            return writer;
        };

        /**
         * Encodes the specified yellowReport message, length delimited. Does not implicitly {@link DataCmd.yellowReport.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.yellowReport
         * @static
         * @param {DataCmd.IyellowReport} message yellowReport message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yellowReport.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return yellowReport;
    })();

    DataCmd.getSameCharacters = (function() {

        /**
         * Properties of a getSameCharacters.
         * @memberof DataCmd
         * @interface IgetSameCharacters
         * @property {number} size getSameCharacters size
         */

        /**
         * Constructs a new getSameCharacters.
         * @memberof DataCmd
         * @classdesc Represents a getSameCharacters.
         * @implements IgetSameCharacters
         * @constructor
         * @param {DataCmd.IgetSameCharacters=} [properties] Properties to set
         */
        function getSameCharacters(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getSameCharacters size.
         * @member {number} size
         * @memberof DataCmd.getSameCharacters
         * @instance
         */
        getSameCharacters.prototype.size = 0;

        /**
         * Encodes the specified getSameCharacters message. Does not implicitly {@link DataCmd.getSameCharacters.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.getSameCharacters
         * @static
         * @param {DataCmd.IgetSameCharacters} message getSameCharacters message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getSameCharacters.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.size);
            return writer;
        };

        /**
         * Encodes the specified getSameCharacters message, length delimited. Does not implicitly {@link DataCmd.getSameCharacters.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.getSameCharacters
         * @static
         * @param {DataCmd.IgetSameCharacters} message getSameCharacters message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getSameCharacters.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getSameCharacters;
    })();

    DataCmd.clickTestSubject = (function() {

        /**
         * Properties of a clickTestSubject.
         * @memberof DataCmd
         * @interface IclickTestSubject
         * @property {string} subjectId clickTestSubject subjectId
         */

        /**
         * Constructs a new clickTestSubject.
         * @memberof DataCmd
         * @classdesc Represents a clickTestSubject.
         * @implements IclickTestSubject
         * @constructor
         * @param {DataCmd.IclickTestSubject=} [properties] Properties to set
         */
        function clickTestSubject(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * clickTestSubject subjectId.
         * @member {string} subjectId
         * @memberof DataCmd.clickTestSubject
         * @instance
         */
        clickTestSubject.prototype.subjectId = "";

        /**
         * Encodes the specified clickTestSubject message. Does not implicitly {@link DataCmd.clickTestSubject.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.clickTestSubject
         * @static
         * @param {DataCmd.IclickTestSubject} message clickTestSubject message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        clickTestSubject.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.subjectId);
            return writer;
        };

        /**
         * Encodes the specified clickTestSubject message, length delimited. Does not implicitly {@link DataCmd.clickTestSubject.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.clickTestSubject
         * @static
         * @param {DataCmd.IclickTestSubject} message clickTestSubject message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        clickTestSubject.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return clickTestSubject;
    })();

    DataCmd.getTestSubjectData = (function() {

        /**
         * Properties of a getTestSubjectData.
         * @memberof DataCmd
         * @interface IgetTestSubjectData
         */

        /**
         * Constructs a new getTestSubjectData.
         * @memberof DataCmd
         * @classdesc Represents a getTestSubjectData.
         * @implements IgetTestSubjectData
         * @constructor
         * @param {DataCmd.IgetTestSubjectData=} [properties] Properties to set
         */
        function getTestSubjectData(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getTestSubjectData message. Does not implicitly {@link DataCmd.getTestSubjectData.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.getTestSubjectData
         * @static
         * @param {DataCmd.IgetTestSubjectData} message getTestSubjectData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getTestSubjectData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getTestSubjectData message, length delimited. Does not implicitly {@link DataCmd.getTestSubjectData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.getTestSubjectData
         * @static
         * @param {DataCmd.IgetTestSubjectData} message getTestSubjectData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getTestSubjectData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getTestSubjectData;
    })();

    DataCmd.loveRingUserAction = (function() {

        /**
         * Properties of a loveRingUserAction.
         * @memberof DataCmd
         * @interface IloveRingUserAction
         * @property {number} action loveRingUserAction action
         * @property {string|null} [userId1] loveRingUserAction userId1
         * @property {string|null} [userId2] loveRingUserAction userId2
         */

        /**
         * Constructs a new loveRingUserAction.
         * @memberof DataCmd
         * @classdesc Represents a loveRingUserAction.
         * @implements IloveRingUserAction
         * @constructor
         * @param {DataCmd.IloveRingUserAction=} [properties] Properties to set
         */
        function loveRingUserAction(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * loveRingUserAction action.
         * @member {number} action
         * @memberof DataCmd.loveRingUserAction
         * @instance
         */
        loveRingUserAction.prototype.action = 0;

        /**
         * loveRingUserAction userId1.
         * @member {string} userId1
         * @memberof DataCmd.loveRingUserAction
         * @instance
         */
        loveRingUserAction.prototype.userId1 = "";

        /**
         * loveRingUserAction userId2.
         * @member {string} userId2
         * @memberof DataCmd.loveRingUserAction
         * @instance
         */
        loveRingUserAction.prototype.userId2 = "";

        /**
         * Encodes the specified loveRingUserAction message. Does not implicitly {@link DataCmd.loveRingUserAction.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.loveRingUserAction
         * @static
         * @param {DataCmd.IloveRingUserAction} message loveRingUserAction message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        loveRingUserAction.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);
            if (message.userId1 != null && message.hasOwnProperty("userId1"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.userId1);
            if (message.userId2 != null && message.hasOwnProperty("userId2"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.userId2);
            return writer;
        };

        /**
         * Encodes the specified loveRingUserAction message, length delimited. Does not implicitly {@link DataCmd.loveRingUserAction.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.loveRingUserAction
         * @static
         * @param {DataCmd.IloveRingUserAction} message loveRingUserAction message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        loveRingUserAction.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return loveRingUserAction;
    })();

    DataCmd.umengDevice = (function() {

        /**
         * Properties of an umengDevice.
         * @memberof DataCmd
         * @interface IumengDevice
         * @property {string} deviceToken umengDevice deviceToken
         */

        /**
         * Constructs a new umengDevice.
         * @memberof DataCmd
         * @classdesc Represents an umengDevice.
         * @implements IumengDevice
         * @constructor
         * @param {DataCmd.IumengDevice=} [properties] Properties to set
         */
        function umengDevice(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * umengDevice deviceToken.
         * @member {string} deviceToken
         * @memberof DataCmd.umengDevice
         * @instance
         */
        umengDevice.prototype.deviceToken = "";

        /**
         * Encodes the specified umengDevice message. Does not implicitly {@link DataCmd.umengDevice.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.umengDevice
         * @static
         * @param {DataCmd.IumengDevice} message umengDevice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        umengDevice.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.deviceToken);
            return writer;
        };

        /**
         * Encodes the specified umengDevice message, length delimited. Does not implicitly {@link DataCmd.umengDevice.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.umengDevice
         * @static
         * @param {DataCmd.IumengDevice} message umengDevice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        umengDevice.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return umengDevice;
    })();

    DataCmd.sendSecretaryMessage = (function() {

        /**
         * Properties of a sendSecretaryMessage.
         * @memberof DataCmd
         * @interface IsendSecretaryMessage
         * @property {string|null} [targetId] sendSecretaryMessage targetId
         * @property {string} msgId sendSecretaryMessage msgId
         * @property {Array.<string>|null} [formatParams] sendSecretaryMessage formatParams
         * @property {number|null} [actionType] sendSecretaryMessage actionType
         * @property {string|null} [actionParam] sendSecretaryMessage actionParam
         */

        /**
         * Constructs a new sendSecretaryMessage.
         * @memberof DataCmd
         * @classdesc Represents a sendSecretaryMessage.
         * @implements IsendSecretaryMessage
         * @constructor
         * @param {DataCmd.IsendSecretaryMessage=} [properties] Properties to set
         */
        function sendSecretaryMessage(properties) {
            this.formatParams = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * sendSecretaryMessage targetId.
         * @member {string} targetId
         * @memberof DataCmd.sendSecretaryMessage
         * @instance
         */
        sendSecretaryMessage.prototype.targetId = "";

        /**
         * sendSecretaryMessage msgId.
         * @member {string} msgId
         * @memberof DataCmd.sendSecretaryMessage
         * @instance
         */
        sendSecretaryMessage.prototype.msgId = "";

        /**
         * sendSecretaryMessage formatParams.
         * @member {Array.<string>} formatParams
         * @memberof DataCmd.sendSecretaryMessage
         * @instance
         */
        sendSecretaryMessage.prototype.formatParams = $util.emptyArray;

        /**
         * sendSecretaryMessage actionType.
         * @member {number} actionType
         * @memberof DataCmd.sendSecretaryMessage
         * @instance
         */
        sendSecretaryMessage.prototype.actionType = 0;

        /**
         * sendSecretaryMessage actionParam.
         * @member {string} actionParam
         * @memberof DataCmd.sendSecretaryMessage
         * @instance
         */
        sendSecretaryMessage.prototype.actionParam = "";

        /**
         * Encodes the specified sendSecretaryMessage message. Does not implicitly {@link DataCmd.sendSecretaryMessage.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.sendSecretaryMessage
         * @static
         * @param {DataCmd.IsendSecretaryMessage} message sendSecretaryMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendSecretaryMessage.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.targetId != null && message.hasOwnProperty("targetId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.msgId);
            if (message.formatParams != null && message.formatParams.length)
                for (let i = 0; i < message.formatParams.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.formatParams[i]);
            if (message.actionType != null && message.hasOwnProperty("actionType"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.actionType);
            if (message.actionParam != null && message.hasOwnProperty("actionParam"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.actionParam);
            return writer;
        };

        /**
         * Encodes the specified sendSecretaryMessage message, length delimited. Does not implicitly {@link DataCmd.sendSecretaryMessage.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.sendSecretaryMessage
         * @static
         * @param {DataCmd.IsendSecretaryMessage} message sendSecretaryMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendSecretaryMessage.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return sendSecretaryMessage;
    })();

    DataCmd.getCrossRoomRank = (function() {

        /**
         * Properties of a getCrossRoomRank.
         * @memberof DataCmd
         * @interface IgetCrossRoomRank
         * @property {string} roomId getCrossRoomRank roomId
         * @property {number|null} [size] getCrossRoomRank size
         */

        /**
         * Constructs a new getCrossRoomRank.
         * @memberof DataCmd
         * @classdesc Represents a getCrossRoomRank.
         * @implements IgetCrossRoomRank
         * @constructor
         * @param {DataCmd.IgetCrossRoomRank=} [properties] Properties to set
         */
        function getCrossRoomRank(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getCrossRoomRank roomId.
         * @member {string} roomId
         * @memberof DataCmd.getCrossRoomRank
         * @instance
         */
        getCrossRoomRank.prototype.roomId = "";

        /**
         * getCrossRoomRank size.
         * @member {number} size
         * @memberof DataCmd.getCrossRoomRank
         * @instance
         */
        getCrossRoomRank.prototype.size = 0;

        /**
         * Encodes the specified getCrossRoomRank message. Does not implicitly {@link DataCmd.getCrossRoomRank.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.getCrossRoomRank
         * @static
         * @param {DataCmd.IgetCrossRoomRank} message getCrossRoomRank message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getCrossRoomRank.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            if (message.size != null && message.hasOwnProperty("size"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.size);
            return writer;
        };

        /**
         * Encodes the specified getCrossRoomRank message, length delimited. Does not implicitly {@link DataCmd.getCrossRoomRank.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.getCrossRoomRank
         * @static
         * @param {DataCmd.IgetCrossRoomRank} message getCrossRoomRank message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getCrossRoomRank.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getCrossRoomRank;
    })();

    DataCmd.getCrossRoomMvp = (function() {

        /**
         * Properties of a getCrossRoomMvp.
         * @memberof DataCmd
         * @interface IgetCrossRoomMvp
         * @property {number|null} [size] getCrossRoomMvp size
         */

        /**
         * Constructs a new getCrossRoomMvp.
         * @memberof DataCmd
         * @classdesc Represents a getCrossRoomMvp.
         * @implements IgetCrossRoomMvp
         * @constructor
         * @param {DataCmd.IgetCrossRoomMvp=} [properties] Properties to set
         */
        function getCrossRoomMvp(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getCrossRoomMvp size.
         * @member {number} size
         * @memberof DataCmd.getCrossRoomMvp
         * @instance
         */
        getCrossRoomMvp.prototype.size = 0;

        /**
         * Encodes the specified getCrossRoomMvp message. Does not implicitly {@link DataCmd.getCrossRoomMvp.verify|verify} messages.
         * @function encode
         * @memberof DataCmd.getCrossRoomMvp
         * @static
         * @param {DataCmd.IgetCrossRoomMvp} message getCrossRoomMvp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getCrossRoomMvp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.size != null && message.hasOwnProperty("size"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.size);
            return writer;
        };

        /**
         * Encodes the specified getCrossRoomMvp message, length delimited. Does not implicitly {@link DataCmd.getCrossRoomMvp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCmd.getCrossRoomMvp
         * @static
         * @param {DataCmd.IgetCrossRoomMvp} message getCrossRoomMvp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getCrossRoomMvp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getCrossRoomMvp;
    })();

    return DataCmd;
})();

export const FishCmd = $root.FishCmd = (() => {

    /**
     * Namespace FishCmd.
     * @exports FishCmd
     * @namespace
     */
    const FishCmd = {};

    FishCmd.enter = (function() {

        /**
         * Properties of an enter.
         * @memberof FishCmd
         * @interface Ienter
         * @property {string} userId enter userId
         */

        /**
         * Constructs a new enter.
         * @memberof FishCmd
         * @classdesc Represents an enter.
         * @implements Ienter
         * @constructor
         * @param {FishCmd.Ienter=} [properties] Properties to set
         */
        function enter(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * enter userId.
         * @member {string} userId
         * @memberof FishCmd.enter
         * @instance
         */
        enter.prototype.userId = "";

        /**
         * Encodes the specified enter message. Does not implicitly {@link FishCmd.enter.verify|verify} messages.
         * @function encode
         * @memberof FishCmd.enter
         * @static
         * @param {FishCmd.Ienter} message enter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        enter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified enter message, length delimited. Does not implicitly {@link FishCmd.enter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof FishCmd.enter
         * @static
         * @param {FishCmd.Ienter} message enter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        enter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return enter;
    })();

    FishCmd.leave = (function() {

        /**
         * Properties of a leave.
         * @memberof FishCmd
         * @interface Ileave
         * @property {string} userId leave userId
         */

        /**
         * Constructs a new leave.
         * @memberof FishCmd
         * @classdesc Represents a leave.
         * @implements Ileave
         * @constructor
         * @param {FishCmd.Ileave=} [properties] Properties to set
         */
        function leave(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * leave userId.
         * @member {string} userId
         * @memberof FishCmd.leave
         * @instance
         */
        leave.prototype.userId = "";

        /**
         * Encodes the specified leave message. Does not implicitly {@link FishCmd.leave.verify|verify} messages.
         * @function encode
         * @memberof FishCmd.leave
         * @static
         * @param {FishCmd.Ileave} message leave message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        leave.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified leave message, length delimited. Does not implicitly {@link FishCmd.leave.verify|verify} messages.
         * @function encodeDelimited
         * @memberof FishCmd.leave
         * @static
         * @param {FishCmd.Ileave} message leave message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        leave.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return leave;
    })();

    FishCmd.bet = (function() {

        /**
         * Properties of a bet.
         * @memberof FishCmd
         * @interface Ibet
         * @property {string} userId bet userId
         * @property {number} betIndex bet betIndex
         * @property {number} betNum bet betNum
         * @property {number} hitNum bet hitNum
         */

        /**
         * Constructs a new bet.
         * @memberof FishCmd
         * @classdesc Represents a bet.
         * @implements Ibet
         * @constructor
         * @param {FishCmd.Ibet=} [properties] Properties to set
         */
        function bet(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * bet userId.
         * @member {string} userId
         * @memberof FishCmd.bet
         * @instance
         */
        bet.prototype.userId = "";

        /**
         * bet betIndex.
         * @member {number} betIndex
         * @memberof FishCmd.bet
         * @instance
         */
        bet.prototype.betIndex = 0;

        /**
         * bet betNum.
         * @member {number} betNum
         * @memberof FishCmd.bet
         * @instance
         */
        bet.prototype.betNum = 0;

        /**
         * bet hitNum.
         * @member {number} hitNum
         * @memberof FishCmd.bet
         * @instance
         */
        bet.prototype.hitNum = 0;

        /**
         * Encodes the specified bet message. Does not implicitly {@link FishCmd.bet.verify|verify} messages.
         * @function encode
         * @memberof FishCmd.bet
         * @static
         * @param {FishCmd.Ibet} message bet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        bet.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.betIndex);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.betNum);
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.hitNum);
            return writer;
        };

        /**
         * Encodes the specified bet message, length delimited. Does not implicitly {@link FishCmd.bet.verify|verify} messages.
         * @function encodeDelimited
         * @memberof FishCmd.bet
         * @static
         * @param {FishCmd.Ibet} message bet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        bet.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return bet;
    })();

    FishCmd.sendGift = (function() {

        /**
         * Properties of a sendGift.
         * @memberof FishCmd
         * @interface IsendGift
         * @property {string} userId sendGift userId
         * @property {number} hitNum sendGift hitNum
         */

        /**
         * Constructs a new sendGift.
         * @memberof FishCmd
         * @classdesc Represents a sendGift.
         * @implements IsendGift
         * @constructor
         * @param {FishCmd.IsendGift=} [properties] Properties to set
         */
        function sendGift(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * sendGift userId.
         * @member {string} userId
         * @memberof FishCmd.sendGift
         * @instance
         */
        sendGift.prototype.userId = "";

        /**
         * sendGift hitNum.
         * @member {number} hitNum
         * @memberof FishCmd.sendGift
         * @instance
         */
        sendGift.prototype.hitNum = 0;

        /**
         * Encodes the specified sendGift message. Does not implicitly {@link FishCmd.sendGift.verify|verify} messages.
         * @function encode
         * @memberof FishCmd.sendGift
         * @static
         * @param {FishCmd.IsendGift} message sendGift message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendGift.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.hitNum);
            return writer;
        };

        /**
         * Encodes the specified sendGift message, length delimited. Does not implicitly {@link FishCmd.sendGift.verify|verify} messages.
         * @function encodeDelimited
         * @memberof FishCmd.sendGift
         * @static
         * @param {FishCmd.IsendGift} message sendGift message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendGift.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return sendGift;
    })();

    FishCmd.getCommission = (function() {

        /**
         * Properties of a getCommission.
         * @memberof FishCmd
         * @interface IgetCommission
         * @property {string} userId getCommission userId
         */

        /**
         * Constructs a new getCommission.
         * @memberof FishCmd
         * @classdesc Represents a getCommission.
         * @implements IgetCommission
         * @constructor
         * @param {FishCmd.IgetCommission=} [properties] Properties to set
         */
        function getCommission(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getCommission userId.
         * @member {string} userId
         * @memberof FishCmd.getCommission
         * @instance
         */
        getCommission.prototype.userId = "";

        /**
         * Encodes the specified getCommission message. Does not implicitly {@link FishCmd.getCommission.verify|verify} messages.
         * @function encode
         * @memberof FishCmd.getCommission
         * @static
         * @param {FishCmd.IgetCommission} message getCommission message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getCommission.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified getCommission message, length delimited. Does not implicitly {@link FishCmd.getCommission.verify|verify} messages.
         * @function encodeDelimited
         * @memberof FishCmd.getCommission
         * @static
         * @param {FishCmd.IgetCommission} message getCommission message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getCommission.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getCommission;
    })();

    FishCmd.drawCommission = (function() {

        /**
         * Properties of a drawCommission.
         * @memberof FishCmd
         * @interface IdrawCommission
         * @property {string} userId drawCommission userId
         * @property {number} num drawCommission num
         */

        /**
         * Constructs a new drawCommission.
         * @memberof FishCmd
         * @classdesc Represents a drawCommission.
         * @implements IdrawCommission
         * @constructor
         * @param {FishCmd.IdrawCommission=} [properties] Properties to set
         */
        function drawCommission(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * drawCommission userId.
         * @member {string} userId
         * @memberof FishCmd.drawCommission
         * @instance
         */
        drawCommission.prototype.userId = "";

        /**
         * drawCommission num.
         * @member {number} num
         * @memberof FishCmd.drawCommission
         * @instance
         */
        drawCommission.prototype.num = 0;

        /**
         * Encodes the specified drawCommission message. Does not implicitly {@link FishCmd.drawCommission.verify|verify} messages.
         * @function encode
         * @memberof FishCmd.drawCommission
         * @static
         * @param {FishCmd.IdrawCommission} message drawCommission message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawCommission.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.num);
            return writer;
        };

        /**
         * Encodes the specified drawCommission message, length delimited. Does not implicitly {@link FishCmd.drawCommission.verify|verify} messages.
         * @function encodeDelimited
         * @memberof FishCmd.drawCommission
         * @static
         * @param {FishCmd.IdrawCommission} message drawCommission message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawCommission.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return drawCommission;
    })();

    FishCmd.getMyBets = (function() {

        /**
         * Properties of a getMyBets.
         * @memberof FishCmd
         * @interface IgetMyBets
         * @property {string} userId getMyBets userId
         */

        /**
         * Constructs a new getMyBets.
         * @memberof FishCmd
         * @classdesc Represents a getMyBets.
         * @implements IgetMyBets
         * @constructor
         * @param {FishCmd.IgetMyBets=} [properties] Properties to set
         */
        function getMyBets(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getMyBets userId.
         * @member {string} userId
         * @memberof FishCmd.getMyBets
         * @instance
         */
        getMyBets.prototype.userId = "";

        /**
         * Encodes the specified getMyBets message. Does not implicitly {@link FishCmd.getMyBets.verify|verify} messages.
         * @function encode
         * @memberof FishCmd.getMyBets
         * @static
         * @param {FishCmd.IgetMyBets} message getMyBets message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getMyBets.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified getMyBets message, length delimited. Does not implicitly {@link FishCmd.getMyBets.verify|verify} messages.
         * @function encodeDelimited
         * @memberof FishCmd.getMyBets
         * @static
         * @param {FishCmd.IgetMyBets} message getMyBets message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getMyBets.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getMyBets;
    })();

    FishCmd.getUserBetDetail = (function() {

        /**
         * Properties of a getUserBetDetail.
         * @memberof FishCmd
         * @interface IgetUserBetDetail
         * @property {string} userId getUserBetDetail userId
         */

        /**
         * Constructs a new getUserBetDetail.
         * @memberof FishCmd
         * @classdesc Represents a getUserBetDetail.
         * @implements IgetUserBetDetail
         * @constructor
         * @param {FishCmd.IgetUserBetDetail=} [properties] Properties to set
         */
        function getUserBetDetail(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getUserBetDetail userId.
         * @member {string} userId
         * @memberof FishCmd.getUserBetDetail
         * @instance
         */
        getUserBetDetail.prototype.userId = "";

        /**
         * Encodes the specified getUserBetDetail message. Does not implicitly {@link FishCmd.getUserBetDetail.verify|verify} messages.
         * @function encode
         * @memberof FishCmd.getUserBetDetail
         * @static
         * @param {FishCmd.IgetUserBetDetail} message getUserBetDetail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserBetDetail.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified getUserBetDetail message, length delimited. Does not implicitly {@link FishCmd.getUserBetDetail.verify|verify} messages.
         * @function encodeDelimited
         * @memberof FishCmd.getUserBetDetail
         * @static
         * @param {FishCmd.IgetUserBetDetail} message getUserBetDetail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserBetDetail.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getUserBetDetail;
    })();

    FishCmd.getBetLog = (function() {

        /**
         * Properties of a getBetLog.
         * @memberof FishCmd
         * @interface IgetBetLog
         * @property {string} userId getBetLog userId
         * @property {number} start getBetLog start
         * @property {number} end getBetLog end
         */

        /**
         * Constructs a new getBetLog.
         * @memberof FishCmd
         * @classdesc Represents a getBetLog.
         * @implements IgetBetLog
         * @constructor
         * @param {FishCmd.IgetBetLog=} [properties] Properties to set
         */
        function getBetLog(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getBetLog userId.
         * @member {string} userId
         * @memberof FishCmd.getBetLog
         * @instance
         */
        getBetLog.prototype.userId = "";

        /**
         * getBetLog start.
         * @member {number} start
         * @memberof FishCmd.getBetLog
         * @instance
         */
        getBetLog.prototype.start = 0;

        /**
         * getBetLog end.
         * @member {number} end
         * @memberof FishCmd.getBetLog
         * @instance
         */
        getBetLog.prototype.end = 0;

        /**
         * Encodes the specified getBetLog message. Does not implicitly {@link FishCmd.getBetLog.verify|verify} messages.
         * @function encode
         * @memberof FishCmd.getBetLog
         * @static
         * @param {FishCmd.IgetBetLog} message getBetLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getBetLog.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.start);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.end);
            return writer;
        };

        /**
         * Encodes the specified getBetLog message, length delimited. Does not implicitly {@link FishCmd.getBetLog.verify|verify} messages.
         * @function encodeDelimited
         * @memberof FishCmd.getBetLog
         * @static
         * @param {FishCmd.IgetBetLog} message getBetLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getBetLog.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getBetLog;
    })();

    return FishCmd;
})();

export const GiftPackageCmd = $root.GiftPackageCmd = (() => {

    /**
     * Namespace GiftPackageCmd.
     * @exports GiftPackageCmd
     * @namespace
     */
    const GiftPackageCmd = {};

    GiftPackageCmd.isBought = (function() {

        /**
         * Properties of an isBought.
         * @memberof GiftPackageCmd
         * @interface IisBought
         */

        /**
         * Constructs a new isBought.
         * @memberof GiftPackageCmd
         * @classdesc Represents an isBought.
         * @implements IisBought
         * @constructor
         * @param {GiftPackageCmd.IisBought=} [properties] Properties to set
         */
        function isBought(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified isBought message. Does not implicitly {@link GiftPackageCmd.isBought.verify|verify} messages.
         * @function encode
         * @memberof GiftPackageCmd.isBought
         * @static
         * @param {GiftPackageCmd.IisBought} message isBought message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        isBought.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified isBought message, length delimited. Does not implicitly {@link GiftPackageCmd.isBought.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GiftPackageCmd.isBought
         * @static
         * @param {GiftPackageCmd.IisBought} message isBought message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        isBought.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return isBought;
    })();

    GiftPackageCmd.isPop = (function() {

        /**
         * Properties of an isPop.
         * @memberof GiftPackageCmd
         * @interface IisPop
         */

        /**
         * Constructs a new isPop.
         * @memberof GiftPackageCmd
         * @classdesc Represents an isPop.
         * @implements IisPop
         * @constructor
         * @param {GiftPackageCmd.IisPop=} [properties] Properties to set
         */
        function isPop(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified isPop message. Does not implicitly {@link GiftPackageCmd.isPop.verify|verify} messages.
         * @function encode
         * @memberof GiftPackageCmd.isPop
         * @static
         * @param {GiftPackageCmd.IisPop} message isPop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        isPop.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified isPop message, length delimited. Does not implicitly {@link GiftPackageCmd.isPop.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GiftPackageCmd.isPop
         * @static
         * @param {GiftPackageCmd.IisPop} message isPop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        isPop.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return isPop;
    })();

    GiftPackageCmd.popSetting = (function() {

        /**
         * Properties of a popSetting.
         * @memberof GiftPackageCmd
         * @interface IpopSetting
         * @property {boolean} isPop popSetting isPop
         */

        /**
         * Constructs a new popSetting.
         * @memberof GiftPackageCmd
         * @classdesc Represents a popSetting.
         * @implements IpopSetting
         * @constructor
         * @param {GiftPackageCmd.IpopSetting=} [properties] Properties to set
         */
        function popSetting(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * popSetting isPop.
         * @member {boolean} isPop
         * @memberof GiftPackageCmd.popSetting
         * @instance
         */
        popSetting.prototype.isPop = false;

        /**
         * Encodes the specified popSetting message. Does not implicitly {@link GiftPackageCmd.popSetting.verify|verify} messages.
         * @function encode
         * @memberof GiftPackageCmd.popSetting
         * @static
         * @param {GiftPackageCmd.IpopSetting} message popSetting message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        popSetting.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.isPop);
            return writer;
        };

        /**
         * Encodes the specified popSetting message, length delimited. Does not implicitly {@link GiftPackageCmd.popSetting.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GiftPackageCmd.popSetting
         * @static
         * @param {GiftPackageCmd.IpopSetting} message popSetting message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        popSetting.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return popSetting;
    })();

    return GiftPackageCmd;
})();

export const GmCmd = $root.GmCmd = (() => {

    /**
     * Namespace GmCmd.
     * @exports GmCmd
     * @namespace
     */
    const GmCmd = {};

    GmCmd.dealGmcmd = (function() {

        /**
         * Properties of a dealGmcmd.
         * @memberof GmCmd
         * @interface IdealGmcmd
         * @property {string} cmd dealGmcmd cmd
         * @property {Array.<string>|null} [param] dealGmcmd param
         */

        /**
         * Constructs a new dealGmcmd.
         * @memberof GmCmd
         * @classdesc Represents a dealGmcmd.
         * @implements IdealGmcmd
         * @constructor
         * @param {GmCmd.IdealGmcmd=} [properties] Properties to set
         */
        function dealGmcmd(properties) {
            this.param = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * dealGmcmd cmd.
         * @member {string} cmd
         * @memberof GmCmd.dealGmcmd
         * @instance
         */
        dealGmcmd.prototype.cmd = "";

        /**
         * dealGmcmd param.
         * @member {Array.<string>} param
         * @memberof GmCmd.dealGmcmd
         * @instance
         */
        dealGmcmd.prototype.param = $util.emptyArray;

        /**
         * Encodes the specified dealGmcmd message. Does not implicitly {@link GmCmd.dealGmcmd.verify|verify} messages.
         * @function encode
         * @memberof GmCmd.dealGmcmd
         * @static
         * @param {GmCmd.IdealGmcmd} message dealGmcmd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        dealGmcmd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cmd);
            if (message.param != null && message.param.length)
                for (let i = 0; i < message.param.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.param[i]);
            return writer;
        };

        /**
         * Encodes the specified dealGmcmd message, length delimited. Does not implicitly {@link GmCmd.dealGmcmd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GmCmd.dealGmcmd
         * @static
         * @param {GmCmd.IdealGmcmd} message dealGmcmd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        dealGmcmd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return dealGmcmd;
    })();

    return GmCmd;
})();

export const GroupCmd = $root.GroupCmd = (() => {

    /**
     * Namespace GroupCmd.
     * @exports GroupCmd
     * @namespace
     */
    const GroupCmd = {};

    GroupCmd.create = (function() {

        /**
         * Properties of a create.
         * @memberof GroupCmd
         * @interface Icreate
         * @property {string|null} [groupName] create groupName
         * @property {Array.<string>|null} [members] create members
         */

        /**
         * Constructs a new create.
         * @memberof GroupCmd
         * @classdesc Represents a create.
         * @implements Icreate
         * @constructor
         * @param {GroupCmd.Icreate=} [properties] Properties to set
         */
        function create(properties) {
            this.members = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * create groupName.
         * @member {string} groupName
         * @memberof GroupCmd.create
         * @instance
         */
        create.prototype.groupName = "";

        /**
         * create members.
         * @member {Array.<string>} members
         * @memberof GroupCmd.create
         * @instance
         */
        create.prototype.members = $util.emptyArray;

        /**
         * Encodes the specified create message. Does not implicitly {@link GroupCmd.create.verify|verify} messages.
         * @function encode
         * @memberof GroupCmd.create
         * @static
         * @param {GroupCmd.Icreate} message create message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        create.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupName != null && message.hasOwnProperty("groupName"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupName);
            if (message.members != null && message.members.length)
                for (let i = 0; i < message.members.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.members[i]);
            return writer;
        };

        /**
         * Encodes the specified create message, length delimited. Does not implicitly {@link GroupCmd.create.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GroupCmd.create
         * @static
         * @param {GroupCmd.Icreate} message create message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        create.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return create;
    })();

    GroupCmd.inviteEnter = (function() {

        /**
         * Properties of an inviteEnter.
         * @memberof GroupCmd
         * @interface IinviteEnter
         * @property {string} groupId inviteEnter groupId
         * @property {Array.<string>|null} [members] inviteEnter members
         */

        /**
         * Constructs a new inviteEnter.
         * @memberof GroupCmd
         * @classdesc Represents an inviteEnter.
         * @implements IinviteEnter
         * @constructor
         * @param {GroupCmd.IinviteEnter=} [properties] Properties to set
         */
        function inviteEnter(properties) {
            this.members = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * inviteEnter groupId.
         * @member {string} groupId
         * @memberof GroupCmd.inviteEnter
         * @instance
         */
        inviteEnter.prototype.groupId = "";

        /**
         * inviteEnter members.
         * @member {Array.<string>} members
         * @memberof GroupCmd.inviteEnter
         * @instance
         */
        inviteEnter.prototype.members = $util.emptyArray;

        /**
         * Encodes the specified inviteEnter message. Does not implicitly {@link GroupCmd.inviteEnter.verify|verify} messages.
         * @function encode
         * @memberof GroupCmd.inviteEnter
         * @static
         * @param {GroupCmd.IinviteEnter} message inviteEnter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        inviteEnter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);
            if (message.members != null && message.members.length)
                for (let i = 0; i < message.members.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.members[i]);
            return writer;
        };

        /**
         * Encodes the specified inviteEnter message, length delimited. Does not implicitly {@link GroupCmd.inviteEnter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GroupCmd.inviteEnter
         * @static
         * @param {GroupCmd.IinviteEnter} message inviteEnter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        inviteEnter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return inviteEnter;
    })();

    GroupCmd.leave = (function() {

        /**
         * Properties of a leave.
         * @memberof GroupCmd
         * @interface Ileave
         * @property {string} groupId leave groupId
         */

        /**
         * Constructs a new leave.
         * @memberof GroupCmd
         * @classdesc Represents a leave.
         * @implements Ileave
         * @constructor
         * @param {GroupCmd.Ileave=} [properties] Properties to set
         */
        function leave(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * leave groupId.
         * @member {string} groupId
         * @memberof GroupCmd.leave
         * @instance
         */
        leave.prototype.groupId = "";

        /**
         * Encodes the specified leave message. Does not implicitly {@link GroupCmd.leave.verify|verify} messages.
         * @function encode
         * @memberof GroupCmd.leave
         * @static
         * @param {GroupCmd.Ileave} message leave message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        leave.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);
            return writer;
        };

        /**
         * Encodes the specified leave message, length delimited. Does not implicitly {@link GroupCmd.leave.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GroupCmd.leave
         * @static
         * @param {GroupCmd.Ileave} message leave message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        leave.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return leave;
    })();

    GroupCmd.enter = (function() {

        /**
         * Properties of an enter.
         * @memberof GroupCmd
         * @interface Ienter
         * @property {string} groupId enter groupId
         */

        /**
         * Constructs a new enter.
         * @memberof GroupCmd
         * @classdesc Represents an enter.
         * @implements Ienter
         * @constructor
         * @param {GroupCmd.Ienter=} [properties] Properties to set
         */
        function enter(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * enter groupId.
         * @member {string} groupId
         * @memberof GroupCmd.enter
         * @instance
         */
        enter.prototype.groupId = "";

        /**
         * Encodes the specified enter message. Does not implicitly {@link GroupCmd.enter.verify|verify} messages.
         * @function encode
         * @memberof GroupCmd.enter
         * @static
         * @param {GroupCmd.Ienter} message enter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        enter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);
            return writer;
        };

        /**
         * Encodes the specified enter message, length delimited. Does not implicitly {@link GroupCmd.enter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GroupCmd.enter
         * @static
         * @param {GroupCmd.Ienter} message enter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        enter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return enter;
    })();

    GroupCmd.kickOutMember = (function() {

        /**
         * Properties of a kickOutMember.
         * @memberof GroupCmd
         * @interface IkickOutMember
         * @property {string} groupId kickOutMember groupId
         * @property {Array.<string>|null} [members] kickOutMember members
         */

        /**
         * Constructs a new kickOutMember.
         * @memberof GroupCmd
         * @classdesc Represents a kickOutMember.
         * @implements IkickOutMember
         * @constructor
         * @param {GroupCmd.IkickOutMember=} [properties] Properties to set
         */
        function kickOutMember(properties) {
            this.members = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * kickOutMember groupId.
         * @member {string} groupId
         * @memberof GroupCmd.kickOutMember
         * @instance
         */
        kickOutMember.prototype.groupId = "";

        /**
         * kickOutMember members.
         * @member {Array.<string>} members
         * @memberof GroupCmd.kickOutMember
         * @instance
         */
        kickOutMember.prototype.members = $util.emptyArray;

        /**
         * Encodes the specified kickOutMember message. Does not implicitly {@link GroupCmd.kickOutMember.verify|verify} messages.
         * @function encode
         * @memberof GroupCmd.kickOutMember
         * @static
         * @param {GroupCmd.IkickOutMember} message kickOutMember message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        kickOutMember.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);
            if (message.members != null && message.members.length)
                for (let i = 0; i < message.members.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.members[i]);
            return writer;
        };

        /**
         * Encodes the specified kickOutMember message, length delimited. Does not implicitly {@link GroupCmd.kickOutMember.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GroupCmd.kickOutMember
         * @static
         * @param {GroupCmd.IkickOutMember} message kickOutMember message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        kickOutMember.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return kickOutMember;
    })();

    GroupCmd.modifyInfo = (function() {

        /**
         * Properties of a modifyInfo.
         * @memberof GroupCmd
         * @interface ImodifyInfo
         * @property {string} groupId modifyInfo groupId
         * @property {string|null} [groupName] modifyInfo groupName
         * @property {string|null} [notice] modifyInfo notice
         * @property {boolean|null} [logo] modifyInfo logo
         */

        /**
         * Constructs a new modifyInfo.
         * @memberof GroupCmd
         * @classdesc Represents a modifyInfo.
         * @implements ImodifyInfo
         * @constructor
         * @param {GroupCmd.ImodifyInfo=} [properties] Properties to set
         */
        function modifyInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * modifyInfo groupId.
         * @member {string} groupId
         * @memberof GroupCmd.modifyInfo
         * @instance
         */
        modifyInfo.prototype.groupId = "";

        /**
         * modifyInfo groupName.
         * @member {string} groupName
         * @memberof GroupCmd.modifyInfo
         * @instance
         */
        modifyInfo.prototype.groupName = "";

        /**
         * modifyInfo notice.
         * @member {string} notice
         * @memberof GroupCmd.modifyInfo
         * @instance
         */
        modifyInfo.prototype.notice = "";

        /**
         * modifyInfo logo.
         * @member {boolean} logo
         * @memberof GroupCmd.modifyInfo
         * @instance
         */
        modifyInfo.prototype.logo = false;

        /**
         * Encodes the specified modifyInfo message. Does not implicitly {@link GroupCmd.modifyInfo.verify|verify} messages.
         * @function encode
         * @memberof GroupCmd.modifyInfo
         * @static
         * @param {GroupCmd.ImodifyInfo} message modifyInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        modifyInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);
            if (message.groupName != null && message.hasOwnProperty("groupName"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.groupName);
            if (message.notice != null && message.hasOwnProperty("notice"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.notice);
            if (message.logo != null && message.hasOwnProperty("logo"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.logo);
            return writer;
        };

        /**
         * Encodes the specified modifyInfo message, length delimited. Does not implicitly {@link GroupCmd.modifyInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GroupCmd.modifyInfo
         * @static
         * @param {GroupCmd.ImodifyInfo} message modifyInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        modifyInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return modifyInfo;
    })();

    GroupCmd.transfer = (function() {

        /**
         * Properties of a transfer.
         * @memberof GroupCmd
         * @interface Itransfer
         * @property {string} groupId transfer groupId
         * @property {string} targetId transfer targetId
         */

        /**
         * Constructs a new transfer.
         * @memberof GroupCmd
         * @classdesc Represents a transfer.
         * @implements Itransfer
         * @constructor
         * @param {GroupCmd.Itransfer=} [properties] Properties to set
         */
        function transfer(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * transfer groupId.
         * @member {string} groupId
         * @memberof GroupCmd.transfer
         * @instance
         */
        transfer.prototype.groupId = "";

        /**
         * transfer targetId.
         * @member {string} targetId
         * @memberof GroupCmd.transfer
         * @instance
         */
        transfer.prototype.targetId = "";

        /**
         * Encodes the specified transfer message. Does not implicitly {@link GroupCmd.transfer.verify|verify} messages.
         * @function encode
         * @memberof GroupCmd.transfer
         * @static
         * @param {GroupCmd.Itransfer} message transfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        transfer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.targetId);
            return writer;
        };

        /**
         * Encodes the specified transfer message, length delimited. Does not implicitly {@link GroupCmd.transfer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GroupCmd.transfer
         * @static
         * @param {GroupCmd.Itransfer} message transfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        transfer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return transfer;
    })();

    GroupCmd.setNotFriendNeedAgree = (function() {

        /**
         * Properties of a setNotFriendNeedAgree.
         * @memberof GroupCmd
         * @interface IsetNotFriendNeedAgree
         * @property {boolean} need setNotFriendNeedAgree need
         */

        /**
         * Constructs a new setNotFriendNeedAgree.
         * @memberof GroupCmd
         * @classdesc Represents a setNotFriendNeedAgree.
         * @implements IsetNotFriendNeedAgree
         * @constructor
         * @param {GroupCmd.IsetNotFriendNeedAgree=} [properties] Properties to set
         */
        function setNotFriendNeedAgree(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * setNotFriendNeedAgree need.
         * @member {boolean} need
         * @memberof GroupCmd.setNotFriendNeedAgree
         * @instance
         */
        setNotFriendNeedAgree.prototype.need = false;

        /**
         * Encodes the specified setNotFriendNeedAgree message. Does not implicitly {@link GroupCmd.setNotFriendNeedAgree.verify|verify} messages.
         * @function encode
         * @memberof GroupCmd.setNotFriendNeedAgree
         * @static
         * @param {GroupCmd.IsetNotFriendNeedAgree} message setNotFriendNeedAgree message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setNotFriendNeedAgree.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.need);
            return writer;
        };

        /**
         * Encodes the specified setNotFriendNeedAgree message, length delimited. Does not implicitly {@link GroupCmd.setNotFriendNeedAgree.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GroupCmd.setNotFriendNeedAgree
         * @static
         * @param {GroupCmd.IsetNotFriendNeedAgree} message setNotFriendNeedAgree message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setNotFriendNeedAgree.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return setNotFriendNeedAgree;
    })();

    GroupCmd.getGroup = (function() {

        /**
         * Properties of a getGroup.
         * @memberof GroupCmd
         * @interface IgetGroup
         * @property {string} groupId getGroup groupId
         */

        /**
         * Constructs a new getGroup.
         * @memberof GroupCmd
         * @classdesc Represents a getGroup.
         * @implements IgetGroup
         * @constructor
         * @param {GroupCmd.IgetGroup=} [properties] Properties to set
         */
        function getGroup(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getGroup groupId.
         * @member {string} groupId
         * @memberof GroupCmd.getGroup
         * @instance
         */
        getGroup.prototype.groupId = "";

        /**
         * Encodes the specified getGroup message. Does not implicitly {@link GroupCmd.getGroup.verify|verify} messages.
         * @function encode
         * @memberof GroupCmd.getGroup
         * @static
         * @param {GroupCmd.IgetGroup} message getGroup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getGroup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);
            return writer;
        };

        /**
         * Encodes the specified getGroup message, length delimited. Does not implicitly {@link GroupCmd.getGroup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GroupCmd.getGroup
         * @static
         * @param {GroupCmd.IgetGroup} message getGroup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getGroup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getGroup;
    })();

    GroupCmd.getMembers = (function() {

        /**
         * Properties of a getMembers.
         * @memberof GroupCmd
         * @interface IgetMembers
         * @property {string} groupId getMembers groupId
         * @property {string|null} [lastId] getMembers lastId
         * @property {number|null} [size] getMembers size
         */

        /**
         * Constructs a new getMembers.
         * @memberof GroupCmd
         * @classdesc Represents a getMembers.
         * @implements IgetMembers
         * @constructor
         * @param {GroupCmd.IgetMembers=} [properties] Properties to set
         */
        function getMembers(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getMembers groupId.
         * @member {string} groupId
         * @memberof GroupCmd.getMembers
         * @instance
         */
        getMembers.prototype.groupId = "";

        /**
         * getMembers lastId.
         * @member {string} lastId
         * @memberof GroupCmd.getMembers
         * @instance
         */
        getMembers.prototype.lastId = "";

        /**
         * getMembers size.
         * @member {number} size
         * @memberof GroupCmd.getMembers
         * @instance
         */
        getMembers.prototype.size = 0;

        /**
         * Encodes the specified getMembers message. Does not implicitly {@link GroupCmd.getMembers.verify|verify} messages.
         * @function encode
         * @memberof GroupCmd.getMembers
         * @static
         * @param {GroupCmd.IgetMembers} message getMembers message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getMembers.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);
            if (message.lastId != null && message.hasOwnProperty("lastId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.lastId);
            if (message.size != null && message.hasOwnProperty("size"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.size);
            return writer;
        };

        /**
         * Encodes the specified getMembers message, length delimited. Does not implicitly {@link GroupCmd.getMembers.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GroupCmd.getMembers
         * @static
         * @param {GroupCmd.IgetMembers} message getMembers message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getMembers.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getMembers;
    })();

    GroupCmd.delRedPoint = (function() {

        /**
         * Properties of a delRedPoint.
         * @memberof GroupCmd
         * @interface IdelRedPoint
         * @property {string} groupId delRedPoint groupId
         * @property {number} type delRedPoint type
         */

        /**
         * Constructs a new delRedPoint.
         * @memberof GroupCmd
         * @classdesc Represents a delRedPoint.
         * @implements IdelRedPoint
         * @constructor
         * @param {GroupCmd.IdelRedPoint=} [properties] Properties to set
         */
        function delRedPoint(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * delRedPoint groupId.
         * @member {string} groupId
         * @memberof GroupCmd.delRedPoint
         * @instance
         */
        delRedPoint.prototype.groupId = "";

        /**
         * delRedPoint type.
         * @member {number} type
         * @memberof GroupCmd.delRedPoint
         * @instance
         */
        delRedPoint.prototype.type = 0;

        /**
         * Encodes the specified delRedPoint message. Does not implicitly {@link GroupCmd.delRedPoint.verify|verify} messages.
         * @function encode
         * @memberof GroupCmd.delRedPoint
         * @static
         * @param {GroupCmd.IdelRedPoint} message delRedPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delRedPoint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified delRedPoint message, length delimited. Does not implicitly {@link GroupCmd.delRedPoint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GroupCmd.delRedPoint
         * @static
         * @param {GroupCmd.IdelRedPoint} message delRedPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delRedPoint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return delRedPoint;
    })();

    GroupCmd.groupList = (function() {

        /**
         * Properties of a groupList.
         * @memberof GroupCmd
         * @interface IgroupList
         * @property {string|null} [userId] groupList userId
         */

        /**
         * Constructs a new groupList.
         * @memberof GroupCmd
         * @classdesc Represents a groupList.
         * @implements IgroupList
         * @constructor
         * @param {GroupCmd.IgroupList=} [properties] Properties to set
         */
        function groupList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * groupList userId.
         * @member {string} userId
         * @memberof GroupCmd.groupList
         * @instance
         */
        groupList.prototype.userId = "";

        /**
         * Encodes the specified groupList message. Does not implicitly {@link GroupCmd.groupList.verify|verify} messages.
         * @function encode
         * @memberof GroupCmd.groupList
         * @static
         * @param {GroupCmd.IgroupList} message groupList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        groupList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified groupList message, length delimited. Does not implicitly {@link GroupCmd.groupList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GroupCmd.groupList
         * @static
         * @param {GroupCmd.IgroupList} message groupList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        groupList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return groupList;
    })();

    GroupCmd.ownGroupList = (function() {

        /**
         * Properties of an ownGroupList.
         * @memberof GroupCmd
         * @interface IownGroupList
         * @property {string|null} [userId] ownGroupList userId
         * @property {string|null} [lastGroupId] ownGroupList lastGroupId
         * @property {number} size ownGroupList size
         */

        /**
         * Constructs a new ownGroupList.
         * @memberof GroupCmd
         * @classdesc Represents an ownGroupList.
         * @implements IownGroupList
         * @constructor
         * @param {GroupCmd.IownGroupList=} [properties] Properties to set
         */
        function ownGroupList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ownGroupList userId.
         * @member {string} userId
         * @memberof GroupCmd.ownGroupList
         * @instance
         */
        ownGroupList.prototype.userId = "";

        /**
         * ownGroupList lastGroupId.
         * @member {string} lastGroupId
         * @memberof GroupCmd.ownGroupList
         * @instance
         */
        ownGroupList.prototype.lastGroupId = "";

        /**
         * ownGroupList size.
         * @member {number} size
         * @memberof GroupCmd.ownGroupList
         * @instance
         */
        ownGroupList.prototype.size = 0;

        /**
         * Encodes the specified ownGroupList message. Does not implicitly {@link GroupCmd.ownGroupList.verify|verify} messages.
         * @function encode
         * @memberof GroupCmd.ownGroupList
         * @static
         * @param {GroupCmd.IownGroupList} message ownGroupList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ownGroupList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.lastGroupId != null && message.hasOwnProperty("lastGroupId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.lastGroupId);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.size);
            return writer;
        };

        /**
         * Encodes the specified ownGroupList message, length delimited. Does not implicitly {@link GroupCmd.ownGroupList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GroupCmd.ownGroupList
         * @static
         * @param {GroupCmd.IownGroupList} message ownGroupList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ownGroupList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return ownGroupList;
    })();

    GroupCmd.enterBySelf = (function() {

        /**
         * Properties of an enterBySelf.
         * @memberof GroupCmd
         * @interface IenterBySelf
         * @property {string} groupId enterBySelf groupId
         * @property {string|null} [roomId] enterBySelf roomId
         */

        /**
         * Constructs a new enterBySelf.
         * @memberof GroupCmd
         * @classdesc Represents an enterBySelf.
         * @implements IenterBySelf
         * @constructor
         * @param {GroupCmd.IenterBySelf=} [properties] Properties to set
         */
        function enterBySelf(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * enterBySelf groupId.
         * @member {string} groupId
         * @memberof GroupCmd.enterBySelf
         * @instance
         */
        enterBySelf.prototype.groupId = "";

        /**
         * enterBySelf roomId.
         * @member {string} roomId
         * @memberof GroupCmd.enterBySelf
         * @instance
         */
        enterBySelf.prototype.roomId = "";

        /**
         * Encodes the specified enterBySelf message. Does not implicitly {@link GroupCmd.enterBySelf.verify|verify} messages.
         * @function encode
         * @memberof GroupCmd.enterBySelf
         * @static
         * @param {GroupCmd.IenterBySelf} message enterBySelf message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        enterBySelf.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified enterBySelf message, length delimited. Does not implicitly {@link GroupCmd.enterBySelf.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GroupCmd.enterBySelf
         * @static
         * @param {GroupCmd.IenterBySelf} message enterBySelf message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        enterBySelf.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return enterBySelf;
    })();

    GroupCmd.getGroupInfos = (function() {

        /**
         * Properties of a getGroupInfos.
         * @memberof GroupCmd
         * @interface IgetGroupInfos
         * @property {Array.<string>|null} [groupIds] getGroupInfos groupIds
         */

        /**
         * Constructs a new getGroupInfos.
         * @memberof GroupCmd
         * @classdesc Represents a getGroupInfos.
         * @implements IgetGroupInfos
         * @constructor
         * @param {GroupCmd.IgetGroupInfos=} [properties] Properties to set
         */
        function getGroupInfos(properties) {
            this.groupIds = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getGroupInfos groupIds.
         * @member {Array.<string>} groupIds
         * @memberof GroupCmd.getGroupInfos
         * @instance
         */
        getGroupInfos.prototype.groupIds = $util.emptyArray;

        /**
         * Encodes the specified getGroupInfos message. Does not implicitly {@link GroupCmd.getGroupInfos.verify|verify} messages.
         * @function encode
         * @memberof GroupCmd.getGroupInfos
         * @static
         * @param {GroupCmd.IgetGroupInfos} message getGroupInfos message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getGroupInfos.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupIds != null && message.groupIds.length)
                for (let i = 0; i < message.groupIds.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupIds[i]);
            return writer;
        };

        /**
         * Encodes the specified getGroupInfos message, length delimited. Does not implicitly {@link GroupCmd.getGroupInfos.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GroupCmd.getGroupInfos
         * @static
         * @param {GroupCmd.IgetGroupInfos} message getGroupInfos message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getGroupInfos.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getGroupInfos;
    })();

    GroupCmd.hasGroupMemberLive = (function() {

        /**
         * Properties of a hasGroupMemberLive.
         * @memberof GroupCmd
         * @interface IhasGroupMemberLive
         * @property {string} groupId hasGroupMemberLive groupId
         */

        /**
         * Constructs a new hasGroupMemberLive.
         * @memberof GroupCmd
         * @classdesc Represents a hasGroupMemberLive.
         * @implements IhasGroupMemberLive
         * @constructor
         * @param {GroupCmd.IhasGroupMemberLive=} [properties] Properties to set
         */
        function hasGroupMemberLive(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * hasGroupMemberLive groupId.
         * @member {string} groupId
         * @memberof GroupCmd.hasGroupMemberLive
         * @instance
         */
        hasGroupMemberLive.prototype.groupId = "";

        /**
         * Encodes the specified hasGroupMemberLive message. Does not implicitly {@link GroupCmd.hasGroupMemberLive.verify|verify} messages.
         * @function encode
         * @memberof GroupCmd.hasGroupMemberLive
         * @static
         * @param {GroupCmd.IhasGroupMemberLive} message hasGroupMemberLive message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        hasGroupMemberLive.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);
            return writer;
        };

        /**
         * Encodes the specified hasGroupMemberLive message, length delimited. Does not implicitly {@link GroupCmd.hasGroupMemberLive.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GroupCmd.hasGroupMemberLive
         * @static
         * @param {GroupCmd.IhasGroupMemberLive} message hasGroupMemberLive message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        hasGroupMemberLive.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return hasGroupMemberLive;
    })();

    GroupCmd.groupInfoList = (function() {

        /**
         * Properties of a groupInfoList.
         * @memberof GroupCmd
         * @interface IgroupInfoList
         * @property {string|null} [userId] groupInfoList userId
         * @property {number} start groupInfoList start
         * @property {number} end groupInfoList end
         */

        /**
         * Constructs a new groupInfoList.
         * @memberof GroupCmd
         * @classdesc Represents a groupInfoList.
         * @implements IgroupInfoList
         * @constructor
         * @param {GroupCmd.IgroupInfoList=} [properties] Properties to set
         */
        function groupInfoList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * groupInfoList userId.
         * @member {string} userId
         * @memberof GroupCmd.groupInfoList
         * @instance
         */
        groupInfoList.prototype.userId = "";

        /**
         * groupInfoList start.
         * @member {number} start
         * @memberof GroupCmd.groupInfoList
         * @instance
         */
        groupInfoList.prototype.start = 0;

        /**
         * groupInfoList end.
         * @member {number} end
         * @memberof GroupCmd.groupInfoList
         * @instance
         */
        groupInfoList.prototype.end = 0;

        /**
         * Encodes the specified groupInfoList message. Does not implicitly {@link GroupCmd.groupInfoList.verify|verify} messages.
         * @function encode
         * @memberof GroupCmd.groupInfoList
         * @static
         * @param {GroupCmd.IgroupInfoList} message groupInfoList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        groupInfoList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.start);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.end);
            return writer;
        };

        /**
         * Encodes the specified groupInfoList message, length delimited. Does not implicitly {@link GroupCmd.groupInfoList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GroupCmd.groupInfoList
         * @static
         * @param {GroupCmd.IgroupInfoList} message groupInfoList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        groupInfoList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return groupInfoList;
    })();

    GroupCmd.report = (function() {

        /**
         * Properties of a report.
         * @memberof GroupCmd
         * @interface Ireport
         * @property {string} groupId report groupId
         * @property {number} entrance report entrance
         * @property {number} reason report reason
         */

        /**
         * Constructs a new report.
         * @memberof GroupCmd
         * @classdesc Represents a report.
         * @implements Ireport
         * @constructor
         * @param {GroupCmd.Ireport=} [properties] Properties to set
         */
        function report(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * report groupId.
         * @member {string} groupId
         * @memberof GroupCmd.report
         * @instance
         */
        report.prototype.groupId = "";

        /**
         * report entrance.
         * @member {number} entrance
         * @memberof GroupCmd.report
         * @instance
         */
        report.prototype.entrance = 0;

        /**
         * report reason.
         * @member {number} reason
         * @memberof GroupCmd.report
         * @instance
         */
        report.prototype.reason = 0;

        /**
         * Encodes the specified report message. Does not implicitly {@link GroupCmd.report.verify|verify} messages.
         * @function encode
         * @memberof GroupCmd.report
         * @static
         * @param {GroupCmd.Ireport} message report message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        report.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.entrance);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.reason);
            return writer;
        };

        /**
         * Encodes the specified report message, length delimited. Does not implicitly {@link GroupCmd.report.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GroupCmd.report
         * @static
         * @param {GroupCmd.Ireport} message report message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        report.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return report;
    })();

    return GroupCmd;
})();

export const GuardianCmd = $root.GuardianCmd = (() => {

    /**
     * Namespace GuardianCmd.
     * @exports GuardianCmd
     * @namespace
     */
    const GuardianCmd = {};

    GuardianCmd.getGuardians = (function() {

        /**
         * Properties of a getGuardians.
         * @memberof GuardianCmd
         * @interface IgetGuardians
         * @property {string} targetId getGuardians targetId
         * @property {number} start getGuardians start
         * @property {number} end getGuardians end
         */

        /**
         * Constructs a new getGuardians.
         * @memberof GuardianCmd
         * @classdesc Represents a getGuardians.
         * @implements IgetGuardians
         * @constructor
         * @param {GuardianCmd.IgetGuardians=} [properties] Properties to set
         */
        function getGuardians(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getGuardians targetId.
         * @member {string} targetId
         * @memberof GuardianCmd.getGuardians
         * @instance
         */
        getGuardians.prototype.targetId = "";

        /**
         * getGuardians start.
         * @member {number} start
         * @memberof GuardianCmd.getGuardians
         * @instance
         */
        getGuardians.prototype.start = 0;

        /**
         * getGuardians end.
         * @member {number} end
         * @memberof GuardianCmd.getGuardians
         * @instance
         */
        getGuardians.prototype.end = 0;

        /**
         * Encodes the specified getGuardians message. Does not implicitly {@link GuardianCmd.getGuardians.verify|verify} messages.
         * @function encode
         * @memberof GuardianCmd.getGuardians
         * @static
         * @param {GuardianCmd.IgetGuardians} message getGuardians message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getGuardians.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.start);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.end);
            return writer;
        };

        /**
         * Encodes the specified getGuardians message, length delimited. Does not implicitly {@link GuardianCmd.getGuardians.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GuardianCmd.getGuardians
         * @static
         * @param {GuardianCmd.IgetGuardians} message getGuardians message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getGuardians.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getGuardians;
    })();

    GuardianCmd.myGuardianInfo = (function() {

        /**
         * Properties of a myGuardianInfo.
         * @memberof GuardianCmd
         * @interface ImyGuardianInfo
         */

        /**
         * Constructs a new myGuardianInfo.
         * @memberof GuardianCmd
         * @classdesc Represents a myGuardianInfo.
         * @implements ImyGuardianInfo
         * @constructor
         * @param {GuardianCmd.ImyGuardianInfo=} [properties] Properties to set
         */
        function myGuardianInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified myGuardianInfo message. Does not implicitly {@link GuardianCmd.myGuardianInfo.verify|verify} messages.
         * @function encode
         * @memberof GuardianCmd.myGuardianInfo
         * @static
         * @param {GuardianCmd.ImyGuardianInfo} message myGuardianInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        myGuardianInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified myGuardianInfo message, length delimited. Does not implicitly {@link GuardianCmd.myGuardianInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GuardianCmd.myGuardianInfo
         * @static
         * @param {GuardianCmd.ImyGuardianInfo} message myGuardianInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        myGuardianInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return myGuardianInfo;
    })();

    GuardianCmd.myGuardInfo = (function() {

        /**
         * Properties of a myGuardInfo.
         * @memberof GuardianCmd
         * @interface ImyGuardInfo
         * @property {string} targetId myGuardInfo targetId
         */

        /**
         * Constructs a new myGuardInfo.
         * @memberof GuardianCmd
         * @classdesc Represents a myGuardInfo.
         * @implements ImyGuardInfo
         * @constructor
         * @param {GuardianCmd.ImyGuardInfo=} [properties] Properties to set
         */
        function myGuardInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * myGuardInfo targetId.
         * @member {string} targetId
         * @memberof GuardianCmd.myGuardInfo
         * @instance
         */
        myGuardInfo.prototype.targetId = "";

        /**
         * Encodes the specified myGuardInfo message. Does not implicitly {@link GuardianCmd.myGuardInfo.verify|verify} messages.
         * @function encode
         * @memberof GuardianCmd.myGuardInfo
         * @static
         * @param {GuardianCmd.ImyGuardInfo} message myGuardInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        myGuardInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            return writer;
        };

        /**
         * Encodes the specified myGuardInfo message, length delimited. Does not implicitly {@link GuardianCmd.myGuardInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GuardianCmd.myGuardInfo
         * @static
         * @param {GuardianCmd.ImyGuardInfo} message myGuardInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        myGuardInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return myGuardInfo;
    })();

    GuardianCmd.setGuardianName = (function() {

        /**
         * Properties of a setGuardianName.
         * @memberof GuardianCmd
         * @interface IsetGuardianName
         * @property {string} name setGuardianName name
         */

        /**
         * Constructs a new setGuardianName.
         * @memberof GuardianCmd
         * @classdesc Represents a setGuardianName.
         * @implements IsetGuardianName
         * @constructor
         * @param {GuardianCmd.IsetGuardianName=} [properties] Properties to set
         */
        function setGuardianName(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * setGuardianName name.
         * @member {string} name
         * @memberof GuardianCmd.setGuardianName
         * @instance
         */
        setGuardianName.prototype.name = "";

        /**
         * Encodes the specified setGuardianName message. Does not implicitly {@link GuardianCmd.setGuardianName.verify|verify} messages.
         * @function encode
         * @memberof GuardianCmd.setGuardianName
         * @static
         * @param {GuardianCmd.IsetGuardianName} message setGuardianName message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setGuardianName.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified setGuardianName message, length delimited. Does not implicitly {@link GuardianCmd.setGuardianName.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GuardianCmd.setGuardianName
         * @static
         * @param {GuardianCmd.IsetGuardianName} message setGuardianName message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setGuardianName.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return setGuardianName;
    })();

    GuardianCmd.drawTask = (function() {

        /**
         * Properties of a drawTask.
         * @memberof GuardianCmd
         * @interface IdrawTask
         * @property {string} targetId drawTask targetId
         * @property {string} taskId drawTask taskId
         */

        /**
         * Constructs a new drawTask.
         * @memberof GuardianCmd
         * @classdesc Represents a drawTask.
         * @implements IdrawTask
         * @constructor
         * @param {GuardianCmd.IdrawTask=} [properties] Properties to set
         */
        function drawTask(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * drawTask targetId.
         * @member {string} targetId
         * @memberof GuardianCmd.drawTask
         * @instance
         */
        drawTask.prototype.targetId = "";

        /**
         * drawTask taskId.
         * @member {string} taskId
         * @memberof GuardianCmd.drawTask
         * @instance
         */
        drawTask.prototype.taskId = "";

        /**
         * Encodes the specified drawTask message. Does not implicitly {@link GuardianCmd.drawTask.verify|verify} messages.
         * @function encode
         * @memberof GuardianCmd.drawTask
         * @static
         * @param {GuardianCmd.IdrawTask} message drawTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawTask.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.taskId);
            return writer;
        };

        /**
         * Encodes the specified drawTask message, length delimited. Does not implicitly {@link GuardianCmd.drawTask.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GuardianCmd.drawTask
         * @static
         * @param {GuardianCmd.IdrawTask} message drawTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawTask.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return drawTask;
    })();

    GuardianCmd.sign = (function() {

        /**
         * Properties of a sign.
         * @memberof GuardianCmd
         * @interface Isign
         * @property {string} targetId sign targetId
         */

        /**
         * Constructs a new sign.
         * @memberof GuardianCmd
         * @classdesc Represents a sign.
         * @implements Isign
         * @constructor
         * @param {GuardianCmd.Isign=} [properties] Properties to set
         */
        function sign(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * sign targetId.
         * @member {string} targetId
         * @memberof GuardianCmd.sign
         * @instance
         */
        sign.prototype.targetId = "";

        /**
         * Encodes the specified sign message. Does not implicitly {@link GuardianCmd.sign.verify|verify} messages.
         * @function encode
         * @memberof GuardianCmd.sign
         * @static
         * @param {GuardianCmd.Isign} message sign message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sign.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            return writer;
        };

        /**
         * Encodes the specified sign message, length delimited. Does not implicitly {@link GuardianCmd.sign.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GuardianCmd.sign
         * @static
         * @param {GuardianCmd.Isign} message sign message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sign.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return sign;
    })();

    GuardianCmd.drawTaskAward = (function() {

        /**
         * Properties of a drawTaskAward.
         * @memberof GuardianCmd
         * @interface IdrawTaskAward
         * @property {string} targetId drawTaskAward targetId
         * @property {string} taskId drawTaskAward taskId
         */

        /**
         * Constructs a new drawTaskAward.
         * @memberof GuardianCmd
         * @classdesc Represents a drawTaskAward.
         * @implements IdrawTaskAward
         * @constructor
         * @param {GuardianCmd.IdrawTaskAward=} [properties] Properties to set
         */
        function drawTaskAward(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * drawTaskAward targetId.
         * @member {string} targetId
         * @memberof GuardianCmd.drawTaskAward
         * @instance
         */
        drawTaskAward.prototype.targetId = "";

        /**
         * drawTaskAward taskId.
         * @member {string} taskId
         * @memberof GuardianCmd.drawTaskAward
         * @instance
         */
        drawTaskAward.prototype.taskId = "";

        /**
         * Encodes the specified drawTaskAward message. Does not implicitly {@link GuardianCmd.drawTaskAward.verify|verify} messages.
         * @function encode
         * @memberof GuardianCmd.drawTaskAward
         * @static
         * @param {GuardianCmd.IdrawTaskAward} message drawTaskAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawTaskAward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.taskId);
            return writer;
        };

        /**
         * Encodes the specified drawTaskAward message, length delimited. Does not implicitly {@link GuardianCmd.drawTaskAward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GuardianCmd.drawTaskAward
         * @static
         * @param {GuardianCmd.IdrawTaskAward} message drawTaskAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawTaskAward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return drawTaskAward;
    })();

    GuardianCmd.myGuardPartInfo = (function() {

        /**
         * Properties of a myGuardPartInfo.
         * @memberof GuardianCmd
         * @interface ImyGuardPartInfo
         * @property {string} targetId myGuardPartInfo targetId
         */

        /**
         * Constructs a new myGuardPartInfo.
         * @memberof GuardianCmd
         * @classdesc Represents a myGuardPartInfo.
         * @implements ImyGuardPartInfo
         * @constructor
         * @param {GuardianCmd.ImyGuardPartInfo=} [properties] Properties to set
         */
        function myGuardPartInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * myGuardPartInfo targetId.
         * @member {string} targetId
         * @memberof GuardianCmd.myGuardPartInfo
         * @instance
         */
        myGuardPartInfo.prototype.targetId = "";

        /**
         * Encodes the specified myGuardPartInfo message. Does not implicitly {@link GuardianCmd.myGuardPartInfo.verify|verify} messages.
         * @function encode
         * @memberof GuardianCmd.myGuardPartInfo
         * @static
         * @param {GuardianCmd.ImyGuardPartInfo} message myGuardPartInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        myGuardPartInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            return writer;
        };

        /**
         * Encodes the specified myGuardPartInfo message, length delimited. Does not implicitly {@link GuardianCmd.myGuardPartInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GuardianCmd.myGuardPartInfo
         * @static
         * @param {GuardianCmd.ImyGuardPartInfo} message myGuardPartInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        myGuardPartInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return myGuardPartInfo;
    })();

    GuardianCmd.inGuards = (function() {

        /**
         * Properties of an inGuards.
         * @memberof GuardianCmd
         * @interface IinGuards
         * @property {number} start inGuards start
         * @property {number} end inGuards end
         */

        /**
         * Constructs a new inGuards.
         * @memberof GuardianCmd
         * @classdesc Represents an inGuards.
         * @implements IinGuards
         * @constructor
         * @param {GuardianCmd.IinGuards=} [properties] Properties to set
         */
        function inGuards(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * inGuards start.
         * @member {number} start
         * @memberof GuardianCmd.inGuards
         * @instance
         */
        inGuards.prototype.start = 0;

        /**
         * inGuards end.
         * @member {number} end
         * @memberof GuardianCmd.inGuards
         * @instance
         */
        inGuards.prototype.end = 0;

        /**
         * Encodes the specified inGuards message. Does not implicitly {@link GuardianCmd.inGuards.verify|verify} messages.
         * @function encode
         * @memberof GuardianCmd.inGuards
         * @static
         * @param {GuardianCmd.IinGuards} message inGuards message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        inGuards.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
            return writer;
        };

        /**
         * Encodes the specified inGuards message, length delimited. Does not implicitly {@link GuardianCmd.inGuards.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GuardianCmd.inGuards
         * @static
         * @param {GuardianCmd.IinGuards} message inGuards message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        inGuards.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return inGuards;
    })();

    return GuardianCmd;
})();

export const HeartBeatCmd = $root.HeartBeatCmd = (() => {

    /**
     * Namespace HeartBeatCmd.
     * @exports HeartBeatCmd
     * @namespace
     */
    const HeartBeatCmd = {};

    HeartBeatCmd.heartBeat = (function() {

        /**
         * Properties of a heartBeat.
         * @memberof HeartBeatCmd
         * @interface IheartBeat
         */

        /**
         * Constructs a new heartBeat.
         * @memberof HeartBeatCmd
         * @classdesc Represents a heartBeat.
         * @implements IheartBeat
         * @constructor
         * @param {HeartBeatCmd.IheartBeat=} [properties] Properties to set
         */
        function heartBeat(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified heartBeat message. Does not implicitly {@link HeartBeatCmd.heartBeat.verify|verify} messages.
         * @function encode
         * @memberof HeartBeatCmd.heartBeat
         * @static
         * @param {HeartBeatCmd.IheartBeat} message heartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        heartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified heartBeat message, length delimited. Does not implicitly {@link HeartBeatCmd.heartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof HeartBeatCmd.heartBeat
         * @static
         * @param {HeartBeatCmd.IheartBeat} message heartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        heartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return heartBeat;
    })();

    return HeartBeatCmd;
})();

export const LiveRoomCmd = $root.LiveRoomCmd = (() => {

    /**
     * Namespace LiveRoomCmd.
     * @exports LiveRoomCmd
     * @namespace
     */
    const LiveRoomCmd = {};

    LiveRoomCmd.getFamilyList = (function() {

        /**
         * Properties of a getFamilyList.
         * @memberof LiveRoomCmd
         * @interface IgetFamilyList
         * @property {string} key getFamilyList key
         * @property {number} start getFamilyList start
         * @property {number} end getFamilyList end
         */

        /**
         * Constructs a new getFamilyList.
         * @memberof LiveRoomCmd
         * @classdesc Represents a getFamilyList.
         * @implements IgetFamilyList
         * @constructor
         * @param {LiveRoomCmd.IgetFamilyList=} [properties] Properties to set
         */
        function getFamilyList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getFamilyList key.
         * @member {string} key
         * @memberof LiveRoomCmd.getFamilyList
         * @instance
         */
        getFamilyList.prototype.key = "";

        /**
         * getFamilyList start.
         * @member {number} start
         * @memberof LiveRoomCmd.getFamilyList
         * @instance
         */
        getFamilyList.prototype.start = 0;

        /**
         * getFamilyList end.
         * @member {number} end
         * @memberof LiveRoomCmd.getFamilyList
         * @instance
         */
        getFamilyList.prototype.end = 0;

        /**
         * Encodes the specified getFamilyList message. Does not implicitly {@link LiveRoomCmd.getFamilyList.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.getFamilyList
         * @static
         * @param {LiveRoomCmd.IgetFamilyList} message getFamilyList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getFamilyList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.start);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.end);
            return writer;
        };

        /**
         * Encodes the specified getFamilyList message, length delimited. Does not implicitly {@link LiveRoomCmd.getFamilyList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.getFamilyList
         * @static
         * @param {LiveRoomCmd.IgetFamilyList} message getFamilyList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getFamilyList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getFamilyList;
    })();

    LiveRoomCmd.getFamilyStatus = (function() {

        /**
         * Properties of a getFamilyStatus.
         * @memberof LiveRoomCmd
         * @interface IgetFamilyStatus
         */

        /**
         * Constructs a new getFamilyStatus.
         * @memberof LiveRoomCmd
         * @classdesc Represents a getFamilyStatus.
         * @implements IgetFamilyStatus
         * @constructor
         * @param {LiveRoomCmd.IgetFamilyStatus=} [properties] Properties to set
         */
        function getFamilyStatus(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getFamilyStatus message. Does not implicitly {@link LiveRoomCmd.getFamilyStatus.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.getFamilyStatus
         * @static
         * @param {LiveRoomCmd.IgetFamilyStatus} message getFamilyStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getFamilyStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getFamilyStatus message, length delimited. Does not implicitly {@link LiveRoomCmd.getFamilyStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.getFamilyStatus
         * @static
         * @param {LiveRoomCmd.IgetFamilyStatus} message getFamilyStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getFamilyStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getFamilyStatus;
    })();

    LiveRoomCmd.getMyFamily = (function() {

        /**
         * Properties of a getMyFamily.
         * @memberof LiveRoomCmd
         * @interface IgetMyFamily
         */

        /**
         * Constructs a new getMyFamily.
         * @memberof LiveRoomCmd
         * @classdesc Represents a getMyFamily.
         * @implements IgetMyFamily
         * @constructor
         * @param {LiveRoomCmd.IgetMyFamily=} [properties] Properties to set
         */
        function getMyFamily(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getMyFamily message. Does not implicitly {@link LiveRoomCmd.getMyFamily.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.getMyFamily
         * @static
         * @param {LiveRoomCmd.IgetMyFamily} message getMyFamily message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getMyFamily.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getMyFamily message, length delimited. Does not implicitly {@link LiveRoomCmd.getMyFamily.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.getMyFamily
         * @static
         * @param {LiveRoomCmd.IgetMyFamily} message getMyFamily message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getMyFamily.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getMyFamily;
    })();

    LiveRoomCmd.applyFamily = (function() {

        /**
         * Properties of an applyFamily.
         * @memberof LiveRoomCmd
         * @interface IapplyFamily
         * @property {string} familyId applyFamily familyId
         * @property {string} qq applyFamily qq
         * @property {number} signYears applyFamily signYears
         * @property {number} anchorType applyFamily anchorType
         */

        /**
         * Constructs a new applyFamily.
         * @memberof LiveRoomCmd
         * @classdesc Represents an applyFamily.
         * @implements IapplyFamily
         * @constructor
         * @param {LiveRoomCmd.IapplyFamily=} [properties] Properties to set
         */
        function applyFamily(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * applyFamily familyId.
         * @member {string} familyId
         * @memberof LiveRoomCmd.applyFamily
         * @instance
         */
        applyFamily.prototype.familyId = "";

        /**
         * applyFamily qq.
         * @member {string} qq
         * @memberof LiveRoomCmd.applyFamily
         * @instance
         */
        applyFamily.prototype.qq = "";

        /**
         * applyFamily signYears.
         * @member {number} signYears
         * @memberof LiveRoomCmd.applyFamily
         * @instance
         */
        applyFamily.prototype.signYears = 0;

        /**
         * applyFamily anchorType.
         * @member {number} anchorType
         * @memberof LiveRoomCmd.applyFamily
         * @instance
         */
        applyFamily.prototype.anchorType = 0;

        /**
         * Encodes the specified applyFamily message. Does not implicitly {@link LiveRoomCmd.applyFamily.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.applyFamily
         * @static
         * @param {LiveRoomCmd.IapplyFamily} message applyFamily message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        applyFamily.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.familyId);
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.qq);
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.signYears);
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.anchorType);
            return writer;
        };

        /**
         * Encodes the specified applyFamily message, length delimited. Does not implicitly {@link LiveRoomCmd.applyFamily.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.applyFamily
         * @static
         * @param {LiveRoomCmd.IapplyFamily} message applyFamily message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        applyFamily.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return applyFamily;
    })();

    LiveRoomCmd.applyLeaveFamily = (function() {

        /**
         * Properties of an applyLeaveFamily.
         * @memberof LiveRoomCmd
         * @interface IapplyLeaveFamily
         * @property {string} familyId applyLeaveFamily familyId
         */

        /**
         * Constructs a new applyLeaveFamily.
         * @memberof LiveRoomCmd
         * @classdesc Represents an applyLeaveFamily.
         * @implements IapplyLeaveFamily
         * @constructor
         * @param {LiveRoomCmd.IapplyLeaveFamily=} [properties] Properties to set
         */
        function applyLeaveFamily(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * applyLeaveFamily familyId.
         * @member {string} familyId
         * @memberof LiveRoomCmd.applyLeaveFamily
         * @instance
         */
        applyLeaveFamily.prototype.familyId = "";

        /**
         * Encodes the specified applyLeaveFamily message. Does not implicitly {@link LiveRoomCmd.applyLeaveFamily.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.applyLeaveFamily
         * @static
         * @param {LiveRoomCmd.IapplyLeaveFamily} message applyLeaveFamily message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        applyLeaveFamily.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.familyId);
            return writer;
        };

        /**
         * Encodes the specified applyLeaveFamily message, length delimited. Does not implicitly {@link LiveRoomCmd.applyLeaveFamily.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.applyLeaveFamily
         * @static
         * @param {LiveRoomCmd.IapplyLeaveFamily} message applyLeaveFamily message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        applyLeaveFamily.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return applyLeaveFamily;
    })();

    LiveRoomCmd.forcedFamily = (function() {

        /**
         * Properties of a forcedFamily.
         * @memberof LiveRoomCmd
         * @interface IforcedFamily
         * @property {string} familyId forcedFamily familyId
         */

        /**
         * Constructs a new forcedFamily.
         * @memberof LiveRoomCmd
         * @classdesc Represents a forcedFamily.
         * @implements IforcedFamily
         * @constructor
         * @param {LiveRoomCmd.IforcedFamily=} [properties] Properties to set
         */
        function forcedFamily(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * forcedFamily familyId.
         * @member {string} familyId
         * @memberof LiveRoomCmd.forcedFamily
         * @instance
         */
        forcedFamily.prototype.familyId = "";

        /**
         * Encodes the specified forcedFamily message. Does not implicitly {@link LiveRoomCmd.forcedFamily.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.forcedFamily
         * @static
         * @param {LiveRoomCmd.IforcedFamily} message forcedFamily message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        forcedFamily.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.familyId);
            return writer;
        };

        /**
         * Encodes the specified forcedFamily message, length delimited. Does not implicitly {@link LiveRoomCmd.forcedFamily.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.forcedFamily
         * @static
         * @param {LiveRoomCmd.IforcedFamily} message forcedFamily message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        forcedFamily.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return forcedFamily;
    })();

    LiveRoomCmd.needCreateFamily = (function() {

        /**
         * Properties of a needCreateFamily.
         * @memberof LiveRoomCmd
         * @interface IneedCreateFamily
         */

        /**
         * Constructs a new needCreateFamily.
         * @memberof LiveRoomCmd
         * @classdesc Represents a needCreateFamily.
         * @implements IneedCreateFamily
         * @constructor
         * @param {LiveRoomCmd.IneedCreateFamily=} [properties] Properties to set
         */
        function needCreateFamily(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified needCreateFamily message. Does not implicitly {@link LiveRoomCmd.needCreateFamily.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.needCreateFamily
         * @static
         * @param {LiveRoomCmd.IneedCreateFamily} message needCreateFamily message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        needCreateFamily.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified needCreateFamily message, length delimited. Does not implicitly {@link LiveRoomCmd.needCreateFamily.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.needCreateFamily
         * @static
         * @param {LiveRoomCmd.IneedCreateFamily} message needCreateFamily message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        needCreateFamily.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return needCreateFamily;
    })();

    LiveRoomCmd.getCertificationData = (function() {

        /**
         * Properties of a getCertificationData.
         * @memberof LiveRoomCmd
         * @interface IgetCertificationData
         * @property {string|null} [certName] getCertificationData certName
         * @property {string|null} [certNo] getCertificationData certNo
         * @property {string|null} [bizCode] getCertificationData bizCode
         * @property {boolean|null} [userCertify] getCertificationData userCertify
         */

        /**
         * Constructs a new getCertificationData.
         * @memberof LiveRoomCmd
         * @classdesc Represents a getCertificationData.
         * @implements IgetCertificationData
         * @constructor
         * @param {LiveRoomCmd.IgetCertificationData=} [properties] Properties to set
         */
        function getCertificationData(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getCertificationData certName.
         * @member {string} certName
         * @memberof LiveRoomCmd.getCertificationData
         * @instance
         */
        getCertificationData.prototype.certName = "";

        /**
         * getCertificationData certNo.
         * @member {string} certNo
         * @memberof LiveRoomCmd.getCertificationData
         * @instance
         */
        getCertificationData.prototype.certNo = "";

        /**
         * getCertificationData bizCode.
         * @member {string} bizCode
         * @memberof LiveRoomCmd.getCertificationData
         * @instance
         */
        getCertificationData.prototype.bizCode = "";

        /**
         * getCertificationData userCertify.
         * @member {boolean} userCertify
         * @memberof LiveRoomCmd.getCertificationData
         * @instance
         */
        getCertificationData.prototype.userCertify = false;

        /**
         * Encodes the specified getCertificationData message. Does not implicitly {@link LiveRoomCmd.getCertificationData.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.getCertificationData
         * @static
         * @param {LiveRoomCmd.IgetCertificationData} message getCertificationData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getCertificationData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.certName != null && message.hasOwnProperty("certName"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.certName);
            if (message.certNo != null && message.hasOwnProperty("certNo"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.certNo);
            if (message.bizCode != null && message.hasOwnProperty("bizCode"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.bizCode);
            if (message.userCertify != null && message.hasOwnProperty("userCertify"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.userCertify);
            return writer;
        };

        /**
         * Encodes the specified getCertificationData message, length delimited. Does not implicitly {@link LiveRoomCmd.getCertificationData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.getCertificationData
         * @static
         * @param {LiveRoomCmd.IgetCertificationData} message getCertificationData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getCertificationData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getCertificationData;
    })();

    LiveRoomCmd.queryCertification = (function() {

        /**
         * Properties of a queryCertification.
         * @memberof LiveRoomCmd
         * @interface IqueryCertification
         * @property {string} bizNo queryCertification bizNo
         * @property {boolean|null} [userCertify] queryCertification userCertify
         */

        /**
         * Constructs a new queryCertification.
         * @memberof LiveRoomCmd
         * @classdesc Represents a queryCertification.
         * @implements IqueryCertification
         * @constructor
         * @param {LiveRoomCmd.IqueryCertification=} [properties] Properties to set
         */
        function queryCertification(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * queryCertification bizNo.
         * @member {string} bizNo
         * @memberof LiveRoomCmd.queryCertification
         * @instance
         */
        queryCertification.prototype.bizNo = "";

        /**
         * queryCertification userCertify.
         * @member {boolean} userCertify
         * @memberof LiveRoomCmd.queryCertification
         * @instance
         */
        queryCertification.prototype.userCertify = false;

        /**
         * Encodes the specified queryCertification message. Does not implicitly {@link LiveRoomCmd.queryCertification.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.queryCertification
         * @static
         * @param {LiveRoomCmd.IqueryCertification} message queryCertification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        queryCertification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.bizNo);
            if (message.userCertify != null && message.hasOwnProperty("userCertify"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.userCertify);
            return writer;
        };

        /**
         * Encodes the specified queryCertification message, length delimited. Does not implicitly {@link LiveRoomCmd.queryCertification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.queryCertification
         * @static
         * @param {LiveRoomCmd.IqueryCertification} message queryCertification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        queryCertification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return queryCertification;
    })();

    LiveRoomCmd.drawings = (function() {

        /**
         * Properties of a drawings.
         * @memberof LiveRoomCmd
         * @interface Idrawings
         * @property {string} payeeRealName drawings payeeRealName
         * @property {string} payeeAccount drawings payeeAccount
         * @property {string} smsCode drawings smsCode
         * @property {number} amount drawings amount
         */

        /**
         * Constructs a new drawings.
         * @memberof LiveRoomCmd
         * @classdesc Represents a drawings.
         * @implements Idrawings
         * @constructor
         * @param {LiveRoomCmd.Idrawings=} [properties] Properties to set
         */
        function drawings(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * drawings payeeRealName.
         * @member {string} payeeRealName
         * @memberof LiveRoomCmd.drawings
         * @instance
         */
        drawings.prototype.payeeRealName = "";

        /**
         * drawings payeeAccount.
         * @member {string} payeeAccount
         * @memberof LiveRoomCmd.drawings
         * @instance
         */
        drawings.prototype.payeeAccount = "";

        /**
         * drawings smsCode.
         * @member {string} smsCode
         * @memberof LiveRoomCmd.drawings
         * @instance
         */
        drawings.prototype.smsCode = "";

        /**
         * drawings amount.
         * @member {number} amount
         * @memberof LiveRoomCmd.drawings
         * @instance
         */
        drawings.prototype.amount = 0;

        /**
         * Encodes the specified drawings message. Does not implicitly {@link LiveRoomCmd.drawings.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.drawings
         * @static
         * @param {LiveRoomCmd.Idrawings} message drawings message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawings.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.payeeRealName);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.payeeAccount);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.smsCode);
            writer.uint32(/* id 4, wireType 5 =*/37).float(message.amount);
            return writer;
        };

        /**
         * Encodes the specified drawings message, length delimited. Does not implicitly {@link LiveRoomCmd.drawings.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.drawings
         * @static
         * @param {LiveRoomCmd.Idrawings} message drawings message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawings.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return drawings;
    })();

    LiveRoomCmd.drawingsResult = (function() {

        /**
         * Properties of a drawingsResult.
         * @memberof LiveRoomCmd
         * @interface IdrawingsResult
         * @property {string} orderId drawingsResult orderId
         */

        /**
         * Constructs a new drawingsResult.
         * @memberof LiveRoomCmd
         * @classdesc Represents a drawingsResult.
         * @implements IdrawingsResult
         * @constructor
         * @param {LiveRoomCmd.IdrawingsResult=} [properties] Properties to set
         */
        function drawingsResult(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * drawingsResult orderId.
         * @member {string} orderId
         * @memberof LiveRoomCmd.drawingsResult
         * @instance
         */
        drawingsResult.prototype.orderId = "";

        /**
         * Encodes the specified drawingsResult message. Does not implicitly {@link LiveRoomCmd.drawingsResult.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.drawingsResult
         * @static
         * @param {LiveRoomCmd.IdrawingsResult} message drawingsResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawingsResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.orderId);
            return writer;
        };

        /**
         * Encodes the specified drawingsResult message, length delimited. Does not implicitly {@link LiveRoomCmd.drawingsResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.drawingsResult
         * @static
         * @param {LiveRoomCmd.IdrawingsResult} message drawingsResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawingsResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return drawingsResult;
    })();

    LiveRoomCmd.drawingsStatus = (function() {

        /**
         * Properties of a drawingsStatus.
         * @memberof LiveRoomCmd
         * @interface IdrawingsStatus
         * @property {string} orderId drawingsStatus orderId
         */

        /**
         * Constructs a new drawingsStatus.
         * @memberof LiveRoomCmd
         * @classdesc Represents a drawingsStatus.
         * @implements IdrawingsStatus
         * @constructor
         * @param {LiveRoomCmd.IdrawingsStatus=} [properties] Properties to set
         */
        function drawingsStatus(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * drawingsStatus orderId.
         * @member {string} orderId
         * @memberof LiveRoomCmd.drawingsStatus
         * @instance
         */
        drawingsStatus.prototype.orderId = "";

        /**
         * Encodes the specified drawingsStatus message. Does not implicitly {@link LiveRoomCmd.drawingsStatus.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.drawingsStatus
         * @static
         * @param {LiveRoomCmd.IdrawingsStatus} message drawingsStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawingsStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.orderId);
            return writer;
        };

        /**
         * Encodes the specified drawingsStatus message, length delimited. Does not implicitly {@link LiveRoomCmd.drawingsStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.drawingsStatus
         * @static
         * @param {LiveRoomCmd.IdrawingsStatus} message drawingsStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawingsStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return drawingsStatus;
    })();

    LiveRoomCmd.applyExpense = (function() {

        /**
         * Properties of an applyExpense.
         * @memberof LiveRoomCmd
         * @interface IapplyExpense
         * @property {string} payeeRealName applyExpense payeeRealName
         * @property {string} payeeAccount applyExpense payeeAccount
         * @property {string} smsCode applyExpense smsCode
         * @property {number} amount applyExpense amount
         */

        /**
         * Constructs a new applyExpense.
         * @memberof LiveRoomCmd
         * @classdesc Represents an applyExpense.
         * @implements IapplyExpense
         * @constructor
         * @param {LiveRoomCmd.IapplyExpense=} [properties] Properties to set
         */
        function applyExpense(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * applyExpense payeeRealName.
         * @member {string} payeeRealName
         * @memberof LiveRoomCmd.applyExpense
         * @instance
         */
        applyExpense.prototype.payeeRealName = "";

        /**
         * applyExpense payeeAccount.
         * @member {string} payeeAccount
         * @memberof LiveRoomCmd.applyExpense
         * @instance
         */
        applyExpense.prototype.payeeAccount = "";

        /**
         * applyExpense smsCode.
         * @member {string} smsCode
         * @memberof LiveRoomCmd.applyExpense
         * @instance
         */
        applyExpense.prototype.smsCode = "";

        /**
         * applyExpense amount.
         * @member {number} amount
         * @memberof LiveRoomCmd.applyExpense
         * @instance
         */
        applyExpense.prototype.amount = 0;

        /**
         * Encodes the specified applyExpense message. Does not implicitly {@link LiveRoomCmd.applyExpense.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.applyExpense
         * @static
         * @param {LiveRoomCmd.IapplyExpense} message applyExpense message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        applyExpense.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.payeeRealName);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.payeeAccount);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.smsCode);
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.amount);
            return writer;
        };

        /**
         * Encodes the specified applyExpense message, length delimited. Does not implicitly {@link LiveRoomCmd.applyExpense.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.applyExpense
         * @static
         * @param {LiveRoomCmd.IapplyExpense} message applyExpense message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        applyExpense.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return applyExpense;
    })();

    LiveRoomCmd.getLiveExpense = (function() {

        /**
         * Properties of a getLiveExpense.
         * @memberof LiveRoomCmd
         * @interface IgetLiveExpense
         * @property {string} startDate getLiveExpense startDate
         * @property {string} endDate getLiveExpense endDate
         */

        /**
         * Constructs a new getLiveExpense.
         * @memberof LiveRoomCmd
         * @classdesc Represents a getLiveExpense.
         * @implements IgetLiveExpense
         * @constructor
         * @param {LiveRoomCmd.IgetLiveExpense=} [properties] Properties to set
         */
        function getLiveExpense(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getLiveExpense startDate.
         * @member {string} startDate
         * @memberof LiveRoomCmd.getLiveExpense
         * @instance
         */
        getLiveExpense.prototype.startDate = "";

        /**
         * getLiveExpense endDate.
         * @member {string} endDate
         * @memberof LiveRoomCmd.getLiveExpense
         * @instance
         */
        getLiveExpense.prototype.endDate = "";

        /**
         * Encodes the specified getLiveExpense message. Does not implicitly {@link LiveRoomCmd.getLiveExpense.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.getLiveExpense
         * @static
         * @param {LiveRoomCmd.IgetLiveExpense} message getLiveExpense message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveExpense.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.startDate);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.endDate);
            return writer;
        };

        /**
         * Encodes the specified getLiveExpense message, length delimited. Does not implicitly {@link LiveRoomCmd.getLiveExpense.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.getLiveExpense
         * @static
         * @param {LiveRoomCmd.IgetLiveExpense} message getLiveExpense message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveExpense.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLiveExpense;
    })();

    LiveRoomCmd.getLiveExpenseList = (function() {

        /**
         * Properties of a getLiveExpenseList.
         * @memberof LiveRoomCmd
         * @interface IgetLiveExpenseList
         * @property {string} startDate getLiveExpenseList startDate
         * @property {string} endDate getLiveExpenseList endDate
         * @property {number} row getLiveExpenseList row
         * @property {string} lastId getLiveExpenseList lastId
         */

        /**
         * Constructs a new getLiveExpenseList.
         * @memberof LiveRoomCmd
         * @classdesc Represents a getLiveExpenseList.
         * @implements IgetLiveExpenseList
         * @constructor
         * @param {LiveRoomCmd.IgetLiveExpenseList=} [properties] Properties to set
         */
        function getLiveExpenseList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getLiveExpenseList startDate.
         * @member {string} startDate
         * @memberof LiveRoomCmd.getLiveExpenseList
         * @instance
         */
        getLiveExpenseList.prototype.startDate = "";

        /**
         * getLiveExpenseList endDate.
         * @member {string} endDate
         * @memberof LiveRoomCmd.getLiveExpenseList
         * @instance
         */
        getLiveExpenseList.prototype.endDate = "";

        /**
         * getLiveExpenseList row.
         * @member {number} row
         * @memberof LiveRoomCmd.getLiveExpenseList
         * @instance
         */
        getLiveExpenseList.prototype.row = 0;

        /**
         * getLiveExpenseList lastId.
         * @member {string} lastId
         * @memberof LiveRoomCmd.getLiveExpenseList
         * @instance
         */
        getLiveExpenseList.prototype.lastId = "";

        /**
         * Encodes the specified getLiveExpenseList message. Does not implicitly {@link LiveRoomCmd.getLiveExpenseList.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.getLiveExpenseList
         * @static
         * @param {LiveRoomCmd.IgetLiveExpenseList} message getLiveExpenseList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveExpenseList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.startDate);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.endDate);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.row);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.lastId);
            return writer;
        };

        /**
         * Encodes the specified getLiveExpenseList message, length delimited. Does not implicitly {@link LiveRoomCmd.getLiveExpenseList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.getLiveExpenseList
         * @static
         * @param {LiveRoomCmd.IgetLiveExpenseList} message getLiveExpenseList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveExpenseList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLiveExpenseList;
    })();

    LiveRoomCmd.getLiveEarning = (function() {

        /**
         * Properties of a getLiveEarning.
         * @memberof LiveRoomCmd
         * @interface IgetLiveEarning
         * @property {string} startDate getLiveEarning startDate
         * @property {string} endDate getLiveEarning endDate
         */

        /**
         * Constructs a new getLiveEarning.
         * @memberof LiveRoomCmd
         * @classdesc Represents a getLiveEarning.
         * @implements IgetLiveEarning
         * @constructor
         * @param {LiveRoomCmd.IgetLiveEarning=} [properties] Properties to set
         */
        function getLiveEarning(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getLiveEarning startDate.
         * @member {string} startDate
         * @memberof LiveRoomCmd.getLiveEarning
         * @instance
         */
        getLiveEarning.prototype.startDate = "";

        /**
         * getLiveEarning endDate.
         * @member {string} endDate
         * @memberof LiveRoomCmd.getLiveEarning
         * @instance
         */
        getLiveEarning.prototype.endDate = "";

        /**
         * Encodes the specified getLiveEarning message. Does not implicitly {@link LiveRoomCmd.getLiveEarning.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.getLiveEarning
         * @static
         * @param {LiveRoomCmd.IgetLiveEarning} message getLiveEarning message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveEarning.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.startDate);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.endDate);
            return writer;
        };

        /**
         * Encodes the specified getLiveEarning message, length delimited. Does not implicitly {@link LiveRoomCmd.getLiveEarning.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.getLiveEarning
         * @static
         * @param {LiveRoomCmd.IgetLiveEarning} message getLiveEarning message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveEarning.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLiveEarning;
    })();

    LiveRoomCmd.getLiveEarningList = (function() {

        /**
         * Properties of a getLiveEarningList.
         * @memberof LiveRoomCmd
         * @interface IgetLiveEarningList
         * @property {string} startDate getLiveEarningList startDate
         * @property {string} endDate getLiveEarningList endDate
         * @property {number} row getLiveEarningList row
         * @property {string} lastId getLiveEarningList lastId
         */

        /**
         * Constructs a new getLiveEarningList.
         * @memberof LiveRoomCmd
         * @classdesc Represents a getLiveEarningList.
         * @implements IgetLiveEarningList
         * @constructor
         * @param {LiveRoomCmd.IgetLiveEarningList=} [properties] Properties to set
         */
        function getLiveEarningList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getLiveEarningList startDate.
         * @member {string} startDate
         * @memberof LiveRoomCmd.getLiveEarningList
         * @instance
         */
        getLiveEarningList.prototype.startDate = "";

        /**
         * getLiveEarningList endDate.
         * @member {string} endDate
         * @memberof LiveRoomCmd.getLiveEarningList
         * @instance
         */
        getLiveEarningList.prototype.endDate = "";

        /**
         * getLiveEarningList row.
         * @member {number} row
         * @memberof LiveRoomCmd.getLiveEarningList
         * @instance
         */
        getLiveEarningList.prototype.row = 0;

        /**
         * getLiveEarningList lastId.
         * @member {string} lastId
         * @memberof LiveRoomCmd.getLiveEarningList
         * @instance
         */
        getLiveEarningList.prototype.lastId = "";

        /**
         * Encodes the specified getLiveEarningList message. Does not implicitly {@link LiveRoomCmd.getLiveEarningList.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.getLiveEarningList
         * @static
         * @param {LiveRoomCmd.IgetLiveEarningList} message getLiveEarningList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveEarningList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.startDate);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.endDate);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.row);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.lastId);
            return writer;
        };

        /**
         * Encodes the specified getLiveEarningList message, length delimited. Does not implicitly {@link LiveRoomCmd.getLiveEarningList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.getLiveEarningList
         * @static
         * @param {LiveRoomCmd.IgetLiveEarningList} message getLiveEarningList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveEarningList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLiveEarningList;
    })();

    LiveRoomCmd.liveExchangeGoldShell = (function() {

        /**
         * Properties of a liveExchangeGoldShell.
         * @memberof LiveRoomCmd
         * @interface IliveExchangeGoldShell
         * @property {string} rechargeId liveExchangeGoldShell rechargeId
         * @property {string} smsCode liveExchangeGoldShell smsCode
         * @property {string|null} [phoneNumber] liveExchangeGoldShell phoneNumber
         */

        /**
         * Constructs a new liveExchangeGoldShell.
         * @memberof LiveRoomCmd
         * @classdesc Represents a liveExchangeGoldShell.
         * @implements IliveExchangeGoldShell
         * @constructor
         * @param {LiveRoomCmd.IliveExchangeGoldShell=} [properties] Properties to set
         */
        function liveExchangeGoldShell(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * liveExchangeGoldShell rechargeId.
         * @member {string} rechargeId
         * @memberof LiveRoomCmd.liveExchangeGoldShell
         * @instance
         */
        liveExchangeGoldShell.prototype.rechargeId = "";

        /**
         * liveExchangeGoldShell smsCode.
         * @member {string} smsCode
         * @memberof LiveRoomCmd.liveExchangeGoldShell
         * @instance
         */
        liveExchangeGoldShell.prototype.smsCode = "";

        /**
         * liveExchangeGoldShell phoneNumber.
         * @member {string} phoneNumber
         * @memberof LiveRoomCmd.liveExchangeGoldShell
         * @instance
         */
        liveExchangeGoldShell.prototype.phoneNumber = "";

        /**
         * Encodes the specified liveExchangeGoldShell message. Does not implicitly {@link LiveRoomCmd.liveExchangeGoldShell.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.liveExchangeGoldShell
         * @static
         * @param {LiveRoomCmd.IliveExchangeGoldShell} message liveExchangeGoldShell message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        liveExchangeGoldShell.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.rechargeId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.smsCode);
            if (message.phoneNumber != null && message.hasOwnProperty("phoneNumber"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.phoneNumber);
            return writer;
        };

        /**
         * Encodes the specified liveExchangeGoldShell message, length delimited. Does not implicitly {@link LiveRoomCmd.liveExchangeGoldShell.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.liveExchangeGoldShell
         * @static
         * @param {LiveRoomCmd.IliveExchangeGoldShell} message liveExchangeGoldShell message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        liveExchangeGoldShell.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return liveExchangeGoldShell;
    })();

    LiveRoomCmd.getLiveExchangeMoney = (function() {

        /**
         * Properties of a getLiveExchangeMoney.
         * @memberof LiveRoomCmd
         * @interface IgetLiveExchangeMoney
         * @property {string} startDate getLiveExchangeMoney startDate
         * @property {string} endDate getLiveExchangeMoney endDate
         */

        /**
         * Constructs a new getLiveExchangeMoney.
         * @memberof LiveRoomCmd
         * @classdesc Represents a getLiveExchangeMoney.
         * @implements IgetLiveExchangeMoney
         * @constructor
         * @param {LiveRoomCmd.IgetLiveExchangeMoney=} [properties] Properties to set
         */
        function getLiveExchangeMoney(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getLiveExchangeMoney startDate.
         * @member {string} startDate
         * @memberof LiveRoomCmd.getLiveExchangeMoney
         * @instance
         */
        getLiveExchangeMoney.prototype.startDate = "";

        /**
         * getLiveExchangeMoney endDate.
         * @member {string} endDate
         * @memberof LiveRoomCmd.getLiveExchangeMoney
         * @instance
         */
        getLiveExchangeMoney.prototype.endDate = "";

        /**
         * Encodes the specified getLiveExchangeMoney message. Does not implicitly {@link LiveRoomCmd.getLiveExchangeMoney.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.getLiveExchangeMoney
         * @static
         * @param {LiveRoomCmd.IgetLiveExchangeMoney} message getLiveExchangeMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveExchangeMoney.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.startDate);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.endDate);
            return writer;
        };

        /**
         * Encodes the specified getLiveExchangeMoney message, length delimited. Does not implicitly {@link LiveRoomCmd.getLiveExchangeMoney.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.getLiveExchangeMoney
         * @static
         * @param {LiveRoomCmd.IgetLiveExchangeMoney} message getLiveExchangeMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveExchangeMoney.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLiveExchangeMoney;
    })();

    LiveRoomCmd.getLiveExchangeList = (function() {

        /**
         * Properties of a getLiveExchangeList.
         * @memberof LiveRoomCmd
         * @interface IgetLiveExchangeList
         * @property {string} startDate getLiveExchangeList startDate
         * @property {string} endDate getLiveExchangeList endDate
         * @property {number} row getLiveExchangeList row
         * @property {string} lastId getLiveExchangeList lastId
         */

        /**
         * Constructs a new getLiveExchangeList.
         * @memberof LiveRoomCmd
         * @classdesc Represents a getLiveExchangeList.
         * @implements IgetLiveExchangeList
         * @constructor
         * @param {LiveRoomCmd.IgetLiveExchangeList=} [properties] Properties to set
         */
        function getLiveExchangeList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getLiveExchangeList startDate.
         * @member {string} startDate
         * @memberof LiveRoomCmd.getLiveExchangeList
         * @instance
         */
        getLiveExchangeList.prototype.startDate = "";

        /**
         * getLiveExchangeList endDate.
         * @member {string} endDate
         * @memberof LiveRoomCmd.getLiveExchangeList
         * @instance
         */
        getLiveExchangeList.prototype.endDate = "";

        /**
         * getLiveExchangeList row.
         * @member {number} row
         * @memberof LiveRoomCmd.getLiveExchangeList
         * @instance
         */
        getLiveExchangeList.prototype.row = 0;

        /**
         * getLiveExchangeList lastId.
         * @member {string} lastId
         * @memberof LiveRoomCmd.getLiveExchangeList
         * @instance
         */
        getLiveExchangeList.prototype.lastId = "";

        /**
         * Encodes the specified getLiveExchangeList message. Does not implicitly {@link LiveRoomCmd.getLiveExchangeList.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.getLiveExchangeList
         * @static
         * @param {LiveRoomCmd.IgetLiveExchangeList} message getLiveExchangeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveExchangeList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.startDate);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.endDate);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.row);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.lastId);
            return writer;
        };

        /**
         * Encodes the specified getLiveExchangeList message, length delimited. Does not implicitly {@link LiveRoomCmd.getLiveExchangeList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.getLiveExchangeList
         * @static
         * @param {LiveRoomCmd.IgetLiveExchangeList} message getLiveExchangeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveExchangeList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLiveExchangeList;
    })();

    LiveRoomCmd.getLiveRecv = (function() {

        /**
         * Properties of a getLiveRecv.
         * @memberof LiveRoomCmd
         * @interface IgetLiveRecv
         * @property {string} startDate getLiveRecv startDate
         * @property {string} endDate getLiveRecv endDate
         */

        /**
         * Constructs a new getLiveRecv.
         * @memberof LiveRoomCmd
         * @classdesc Represents a getLiveRecv.
         * @implements IgetLiveRecv
         * @constructor
         * @param {LiveRoomCmd.IgetLiveRecv=} [properties] Properties to set
         */
        function getLiveRecv(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getLiveRecv startDate.
         * @member {string} startDate
         * @memberof LiveRoomCmd.getLiveRecv
         * @instance
         */
        getLiveRecv.prototype.startDate = "";

        /**
         * getLiveRecv endDate.
         * @member {string} endDate
         * @memberof LiveRoomCmd.getLiveRecv
         * @instance
         */
        getLiveRecv.prototype.endDate = "";

        /**
         * Encodes the specified getLiveRecv message. Does not implicitly {@link LiveRoomCmd.getLiveRecv.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.getLiveRecv
         * @static
         * @param {LiveRoomCmd.IgetLiveRecv} message getLiveRecv message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveRecv.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.startDate);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.endDate);
            return writer;
        };

        /**
         * Encodes the specified getLiveRecv message, length delimited. Does not implicitly {@link LiveRoomCmd.getLiveRecv.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.getLiveRecv
         * @static
         * @param {LiveRoomCmd.IgetLiveRecv} message getLiveRecv message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveRecv.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLiveRecv;
    })();

    LiveRoomCmd.getLiveRecvList = (function() {

        /**
         * Properties of a getLiveRecvList.
         * @memberof LiveRoomCmd
         * @interface IgetLiveRecvList
         * @property {string} startDate getLiveRecvList startDate
         * @property {string} endDate getLiveRecvList endDate
         * @property {number} row getLiveRecvList row
         * @property {string} lastId getLiveRecvList lastId
         */

        /**
         * Constructs a new getLiveRecvList.
         * @memberof LiveRoomCmd
         * @classdesc Represents a getLiveRecvList.
         * @implements IgetLiveRecvList
         * @constructor
         * @param {LiveRoomCmd.IgetLiveRecvList=} [properties] Properties to set
         */
        function getLiveRecvList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getLiveRecvList startDate.
         * @member {string} startDate
         * @memberof LiveRoomCmd.getLiveRecvList
         * @instance
         */
        getLiveRecvList.prototype.startDate = "";

        /**
         * getLiveRecvList endDate.
         * @member {string} endDate
         * @memberof LiveRoomCmd.getLiveRecvList
         * @instance
         */
        getLiveRecvList.prototype.endDate = "";

        /**
         * getLiveRecvList row.
         * @member {number} row
         * @memberof LiveRoomCmd.getLiveRecvList
         * @instance
         */
        getLiveRecvList.prototype.row = 0;

        /**
         * getLiveRecvList lastId.
         * @member {string} lastId
         * @memberof LiveRoomCmd.getLiveRecvList
         * @instance
         */
        getLiveRecvList.prototype.lastId = "";

        /**
         * Encodes the specified getLiveRecvList message. Does not implicitly {@link LiveRoomCmd.getLiveRecvList.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.getLiveRecvList
         * @static
         * @param {LiveRoomCmd.IgetLiveRecvList} message getLiveRecvList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveRecvList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.startDate);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.endDate);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.row);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.lastId);
            return writer;
        };

        /**
         * Encodes the specified getLiveRecvList message, length delimited. Does not implicitly {@link LiveRoomCmd.getLiveRecvList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.getLiveRecvList
         * @static
         * @param {LiveRoomCmd.IgetLiveRecvList} message getLiveRecvList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveRecvList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLiveRecvList;
    })();

    LiveRoomCmd.getLiveData = (function() {

        /**
         * Properties of a getLiveData.
         * @memberof LiveRoomCmd
         * @interface IgetLiveData
         */

        /**
         * Constructs a new getLiveData.
         * @memberof LiveRoomCmd
         * @classdesc Represents a getLiveData.
         * @implements IgetLiveData
         * @constructor
         * @param {LiveRoomCmd.IgetLiveData=} [properties] Properties to set
         */
        function getLiveData(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getLiveData message. Does not implicitly {@link LiveRoomCmd.getLiveData.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.getLiveData
         * @static
         * @param {LiveRoomCmd.IgetLiveData} message getLiveData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getLiveData message, length delimited. Does not implicitly {@link LiveRoomCmd.getLiveData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.getLiveData
         * @static
         * @param {LiveRoomCmd.IgetLiveData} message getLiveData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLiveData;
    })();

    LiveRoomCmd.applyMatchmaker = (function() {

        /**
         * Properties of an applyMatchmaker.
         * @memberof LiveRoomCmd
         * @interface IapplyMatchmaker
         */

        /**
         * Constructs a new applyMatchmaker.
         * @memberof LiveRoomCmd
         * @classdesc Represents an applyMatchmaker.
         * @implements IapplyMatchmaker
         * @constructor
         * @param {LiveRoomCmd.IapplyMatchmaker=} [properties] Properties to set
         */
        function applyMatchmaker(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified applyMatchmaker message. Does not implicitly {@link LiveRoomCmd.applyMatchmaker.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.applyMatchmaker
         * @static
         * @param {LiveRoomCmd.IapplyMatchmaker} message applyMatchmaker message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        applyMatchmaker.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified applyMatchmaker message, length delimited. Does not implicitly {@link LiveRoomCmd.applyMatchmaker.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.applyMatchmaker
         * @static
         * @param {LiveRoomCmd.IapplyMatchmaker} message applyMatchmaker message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        applyMatchmaker.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return applyMatchmaker;
    })();

    LiveRoomCmd.myLiveInfo = (function() {

        /**
         * Properties of a myLiveInfo.
         * @memberof LiveRoomCmd
         * @interface ImyLiveInfo
         */

        /**
         * Constructs a new myLiveInfo.
         * @memberof LiveRoomCmd
         * @classdesc Represents a myLiveInfo.
         * @implements ImyLiveInfo
         * @constructor
         * @param {LiveRoomCmd.ImyLiveInfo=} [properties] Properties to set
         */
        function myLiveInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified myLiveInfo message. Does not implicitly {@link LiveRoomCmd.myLiveInfo.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.myLiveInfo
         * @static
         * @param {LiveRoomCmd.ImyLiveInfo} message myLiveInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        myLiveInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified myLiveInfo message, length delimited. Does not implicitly {@link LiveRoomCmd.myLiveInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.myLiveInfo
         * @static
         * @param {LiveRoomCmd.ImyLiveInfo} message myLiveInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        myLiveInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return myLiveInfo;
    })();

    LiveRoomCmd.applyMatchmakerTask = (function() {

        /**
         * Properties of an applyMatchmakerTask.
         * @memberof LiveRoomCmd
         * @interface IapplyMatchmakerTask
         */

        /**
         * Constructs a new applyMatchmakerTask.
         * @memberof LiveRoomCmd
         * @classdesc Represents an applyMatchmakerTask.
         * @implements IapplyMatchmakerTask
         * @constructor
         * @param {LiveRoomCmd.IapplyMatchmakerTask=} [properties] Properties to set
         */
        function applyMatchmakerTask(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified applyMatchmakerTask message. Does not implicitly {@link LiveRoomCmd.applyMatchmakerTask.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.applyMatchmakerTask
         * @static
         * @param {LiveRoomCmd.IapplyMatchmakerTask} message applyMatchmakerTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        applyMatchmakerTask.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified applyMatchmakerTask message, length delimited. Does not implicitly {@link LiveRoomCmd.applyMatchmakerTask.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.applyMatchmakerTask
         * @static
         * @param {LiveRoomCmd.IapplyMatchmakerTask} message applyMatchmakerTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        applyMatchmakerTask.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return applyMatchmakerTask;
    })();

    LiveRoomCmd.familyExchangeGoldShell = (function() {

        /**
         * Properties of a familyExchangeGoldShell.
         * @memberof LiveRoomCmd
         * @interface IfamilyExchangeGoldShell
         * @property {string} targetId familyExchangeGoldShell targetId
         * @property {string} rechargeId familyExchangeGoldShell rechargeId
         * @property {string} smsCode familyExchangeGoldShell smsCode
         * @property {string|null} [phoneNumber] familyExchangeGoldShell phoneNumber
         */

        /**
         * Constructs a new familyExchangeGoldShell.
         * @memberof LiveRoomCmd
         * @classdesc Represents a familyExchangeGoldShell.
         * @implements IfamilyExchangeGoldShell
         * @constructor
         * @param {LiveRoomCmd.IfamilyExchangeGoldShell=} [properties] Properties to set
         */
        function familyExchangeGoldShell(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * familyExchangeGoldShell targetId.
         * @member {string} targetId
         * @memberof LiveRoomCmd.familyExchangeGoldShell
         * @instance
         */
        familyExchangeGoldShell.prototype.targetId = "";

        /**
         * familyExchangeGoldShell rechargeId.
         * @member {string} rechargeId
         * @memberof LiveRoomCmd.familyExchangeGoldShell
         * @instance
         */
        familyExchangeGoldShell.prototype.rechargeId = "";

        /**
         * familyExchangeGoldShell smsCode.
         * @member {string} smsCode
         * @memberof LiveRoomCmd.familyExchangeGoldShell
         * @instance
         */
        familyExchangeGoldShell.prototype.smsCode = "";

        /**
         * familyExchangeGoldShell phoneNumber.
         * @member {string} phoneNumber
         * @memberof LiveRoomCmd.familyExchangeGoldShell
         * @instance
         */
        familyExchangeGoldShell.prototype.phoneNumber = "";

        /**
         * Encodes the specified familyExchangeGoldShell message. Does not implicitly {@link LiveRoomCmd.familyExchangeGoldShell.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.familyExchangeGoldShell
         * @static
         * @param {LiveRoomCmd.IfamilyExchangeGoldShell} message familyExchangeGoldShell message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        familyExchangeGoldShell.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.rechargeId);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.smsCode);
            if (message.phoneNumber != null && message.hasOwnProperty("phoneNumber"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.phoneNumber);
            return writer;
        };

        /**
         * Encodes the specified familyExchangeGoldShell message, length delimited. Does not implicitly {@link LiveRoomCmd.familyExchangeGoldShell.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.familyExchangeGoldShell
         * @static
         * @param {LiveRoomCmd.IfamilyExchangeGoldShell} message familyExchangeGoldShell message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        familyExchangeGoldShell.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return familyExchangeGoldShell;
    })();

    LiveRoomCmd.getLiveEarningData = (function() {

        /**
         * Properties of a getLiveEarningData.
         * @memberof LiveRoomCmd
         * @interface IgetLiveEarningData
         * @property {string} ym getLiveEarningData ym
         * @property {number} type getLiveEarningData type
         * @property {string|null} [roomId] getLiveEarningData roomId
         * @property {string|null} [lastId] getLiveEarningData lastId
         * @property {number|null} [row] getLiveEarningData row
         */

        /**
         * Constructs a new getLiveEarningData.
         * @memberof LiveRoomCmd
         * @classdesc Represents a getLiveEarningData.
         * @implements IgetLiveEarningData
         * @constructor
         * @param {LiveRoomCmd.IgetLiveEarningData=} [properties] Properties to set
         */
        function getLiveEarningData(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getLiveEarningData ym.
         * @member {string} ym
         * @memberof LiveRoomCmd.getLiveEarningData
         * @instance
         */
        getLiveEarningData.prototype.ym = "";

        /**
         * getLiveEarningData type.
         * @member {number} type
         * @memberof LiveRoomCmd.getLiveEarningData
         * @instance
         */
        getLiveEarningData.prototype.type = 0;

        /**
         * getLiveEarningData roomId.
         * @member {string} roomId
         * @memberof LiveRoomCmd.getLiveEarningData
         * @instance
         */
        getLiveEarningData.prototype.roomId = "";

        /**
         * getLiveEarningData lastId.
         * @member {string} lastId
         * @memberof LiveRoomCmd.getLiveEarningData
         * @instance
         */
        getLiveEarningData.prototype.lastId = "";

        /**
         * getLiveEarningData row.
         * @member {number} row
         * @memberof LiveRoomCmd.getLiveEarningData
         * @instance
         */
        getLiveEarningData.prototype.row = 0;

        /**
         * Encodes the specified getLiveEarningData message. Does not implicitly {@link LiveRoomCmd.getLiveEarningData.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.getLiveEarningData
         * @static
         * @param {LiveRoomCmd.IgetLiveEarningData} message getLiveEarningData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveEarningData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.ym);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.roomId);
            if (message.lastId != null && message.hasOwnProperty("lastId"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.lastId);
            if (message.row != null && message.hasOwnProperty("row"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.row);
            return writer;
        };

        /**
         * Encodes the specified getLiveEarningData message, length delimited. Does not implicitly {@link LiveRoomCmd.getLiveEarningData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.getLiveEarningData
         * @static
         * @param {LiveRoomCmd.IgetLiveEarningData} message getLiveEarningData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveEarningData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLiveEarningData;
    })();

    LiveRoomCmd.getMatchmakerEarningData = (function() {

        /**
         * Properties of a getMatchmakerEarningData.
         * @memberof LiveRoomCmd
         * @interface IgetMatchmakerEarningData
         * @property {string} ym getMatchmakerEarningData ym
         * @property {number} type getMatchmakerEarningData type
         * @property {string|null} [lastId] getMatchmakerEarningData lastId
         * @property {number|null} [row] getMatchmakerEarningData row
         */

        /**
         * Constructs a new getMatchmakerEarningData.
         * @memberof LiveRoomCmd
         * @classdesc Represents a getMatchmakerEarningData.
         * @implements IgetMatchmakerEarningData
         * @constructor
         * @param {LiveRoomCmd.IgetMatchmakerEarningData=} [properties] Properties to set
         */
        function getMatchmakerEarningData(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getMatchmakerEarningData ym.
         * @member {string} ym
         * @memberof LiveRoomCmd.getMatchmakerEarningData
         * @instance
         */
        getMatchmakerEarningData.prototype.ym = "";

        /**
         * getMatchmakerEarningData type.
         * @member {number} type
         * @memberof LiveRoomCmd.getMatchmakerEarningData
         * @instance
         */
        getMatchmakerEarningData.prototype.type = 0;

        /**
         * getMatchmakerEarningData lastId.
         * @member {string} lastId
         * @memberof LiveRoomCmd.getMatchmakerEarningData
         * @instance
         */
        getMatchmakerEarningData.prototype.lastId = "";

        /**
         * getMatchmakerEarningData row.
         * @member {number} row
         * @memberof LiveRoomCmd.getMatchmakerEarningData
         * @instance
         */
        getMatchmakerEarningData.prototype.row = 0;

        /**
         * Encodes the specified getMatchmakerEarningData message. Does not implicitly {@link LiveRoomCmd.getMatchmakerEarningData.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.getMatchmakerEarningData
         * @static
         * @param {LiveRoomCmd.IgetMatchmakerEarningData} message getMatchmakerEarningData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getMatchmakerEarningData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.ym);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            if (message.lastId != null && message.hasOwnProperty("lastId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.lastId);
            if (message.row != null && message.hasOwnProperty("row"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.row);
            return writer;
        };

        /**
         * Encodes the specified getMatchmakerEarningData message, length delimited. Does not implicitly {@link LiveRoomCmd.getMatchmakerEarningData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.getMatchmakerEarningData
         * @static
         * @param {LiveRoomCmd.IgetMatchmakerEarningData} message getMatchmakerEarningData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getMatchmakerEarningData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getMatchmakerEarningData;
    })();

    LiveRoomCmd.getFamilyAnchorList = (function() {

        /**
         * Properties of a getFamilyAnchorList.
         * @memberof LiveRoomCmd
         * @interface IgetFamilyAnchorList
         * @property {number|null} [start] getFamilyAnchorList start
         * @property {number|null} [size] getFamilyAnchorList size
         */

        /**
         * Constructs a new getFamilyAnchorList.
         * @memberof LiveRoomCmd
         * @classdesc Represents a getFamilyAnchorList.
         * @implements IgetFamilyAnchorList
         * @constructor
         * @param {LiveRoomCmd.IgetFamilyAnchorList=} [properties] Properties to set
         */
        function getFamilyAnchorList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getFamilyAnchorList start.
         * @member {number} start
         * @memberof LiveRoomCmd.getFamilyAnchorList
         * @instance
         */
        getFamilyAnchorList.prototype.start = 0;

        /**
         * getFamilyAnchorList size.
         * @member {number} size
         * @memberof LiveRoomCmd.getFamilyAnchorList
         * @instance
         */
        getFamilyAnchorList.prototype.size = 0;

        /**
         * Encodes the specified getFamilyAnchorList message. Does not implicitly {@link LiveRoomCmd.getFamilyAnchorList.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.getFamilyAnchorList
         * @static
         * @param {LiveRoomCmd.IgetFamilyAnchorList} message getFamilyAnchorList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getFamilyAnchorList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.start != null && message.hasOwnProperty("start"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
            if (message.size != null && message.hasOwnProperty("size"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.size);
            return writer;
        };

        /**
         * Encodes the specified getFamilyAnchorList message, length delimited. Does not implicitly {@link LiveRoomCmd.getFamilyAnchorList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.getFamilyAnchorList
         * @static
         * @param {LiveRoomCmd.IgetFamilyAnchorList} message getFamilyAnchorList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getFamilyAnchorList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getFamilyAnchorList;
    })();

    LiveRoomCmd.auditAnchorApply = (function() {

        /**
         * Properties of an auditAnchorApply.
         * @memberof LiveRoomCmd
         * @interface IauditAnchorApply
         * @property {string} userId auditAnchorApply userId
         * @property {number} status auditAnchorApply status
         */

        /**
         * Constructs a new auditAnchorApply.
         * @memberof LiveRoomCmd
         * @classdesc Represents an auditAnchorApply.
         * @implements IauditAnchorApply
         * @constructor
         * @param {LiveRoomCmd.IauditAnchorApply=} [properties] Properties to set
         */
        function auditAnchorApply(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * auditAnchorApply userId.
         * @member {string} userId
         * @memberof LiveRoomCmd.auditAnchorApply
         * @instance
         */
        auditAnchorApply.prototype.userId = "";

        /**
         * auditAnchorApply status.
         * @member {number} status
         * @memberof LiveRoomCmd.auditAnchorApply
         * @instance
         */
        auditAnchorApply.prototype.status = 0;

        /**
         * Encodes the specified auditAnchorApply message. Does not implicitly {@link LiveRoomCmd.auditAnchorApply.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.auditAnchorApply
         * @static
         * @param {LiveRoomCmd.IauditAnchorApply} message auditAnchorApply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        auditAnchorApply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.status);
            return writer;
        };

        /**
         * Encodes the specified auditAnchorApply message, length delimited. Does not implicitly {@link LiveRoomCmd.auditAnchorApply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.auditAnchorApply
         * @static
         * @param {LiveRoomCmd.IauditAnchorApply} message auditAnchorApply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        auditAnchorApply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return auditAnchorApply;
    })();

    LiveRoomCmd.liveExchange = (function() {

        /**
         * Properties of a liveExchange.
         * @memberof LiveRoomCmd
         * @interface IliveExchange
         * @property {string} rechargeId liveExchange rechargeId
         * @property {number} money liveExchange money
         * @property {string} smsCode liveExchange smsCode
         * @property {string|null} [phoneNumber] liveExchange phoneNumber
         */

        /**
         * Constructs a new liveExchange.
         * @memberof LiveRoomCmd
         * @classdesc Represents a liveExchange.
         * @implements IliveExchange
         * @constructor
         * @param {LiveRoomCmd.IliveExchange=} [properties] Properties to set
         */
        function liveExchange(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * liveExchange rechargeId.
         * @member {string} rechargeId
         * @memberof LiveRoomCmd.liveExchange
         * @instance
         */
        liveExchange.prototype.rechargeId = "";

        /**
         * liveExchange money.
         * @member {number} money
         * @memberof LiveRoomCmd.liveExchange
         * @instance
         */
        liveExchange.prototype.money = 0;

        /**
         * liveExchange smsCode.
         * @member {string} smsCode
         * @memberof LiveRoomCmd.liveExchange
         * @instance
         */
        liveExchange.prototype.smsCode = "";

        /**
         * liveExchange phoneNumber.
         * @member {string} phoneNumber
         * @memberof LiveRoomCmd.liveExchange
         * @instance
         */
        liveExchange.prototype.phoneNumber = "";

        /**
         * Encodes the specified liveExchange message. Does not implicitly {@link LiveRoomCmd.liveExchange.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.liveExchange
         * @static
         * @param {LiveRoomCmd.IliveExchange} message liveExchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        liveExchange.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.rechargeId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.money);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.smsCode);
            if (message.phoneNumber != null && message.hasOwnProperty("phoneNumber"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.phoneNumber);
            return writer;
        };

        /**
         * Encodes the specified liveExchange message, length delimited. Does not implicitly {@link LiveRoomCmd.liveExchange.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.liveExchange
         * @static
         * @param {LiveRoomCmd.IliveExchange} message liveExchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        liveExchange.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return liveExchange;
    })();

    LiveRoomCmd.familyExchange = (function() {

        /**
         * Properties of a familyExchange.
         * @memberof LiveRoomCmd
         * @interface IfamilyExchange
         * @property {string} targetId familyExchange targetId
         * @property {string} rechargeId familyExchange rechargeId
         * @property {number} money familyExchange money
         * @property {string} smsCode familyExchange smsCode
         * @property {string|null} [phoneNumber] familyExchange phoneNumber
         */

        /**
         * Constructs a new familyExchange.
         * @memberof LiveRoomCmd
         * @classdesc Represents a familyExchange.
         * @implements IfamilyExchange
         * @constructor
         * @param {LiveRoomCmd.IfamilyExchange=} [properties] Properties to set
         */
        function familyExchange(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * familyExchange targetId.
         * @member {string} targetId
         * @memberof LiveRoomCmd.familyExchange
         * @instance
         */
        familyExchange.prototype.targetId = "";

        /**
         * familyExchange rechargeId.
         * @member {string} rechargeId
         * @memberof LiveRoomCmd.familyExchange
         * @instance
         */
        familyExchange.prototype.rechargeId = "";

        /**
         * familyExchange money.
         * @member {number} money
         * @memberof LiveRoomCmd.familyExchange
         * @instance
         */
        familyExchange.prototype.money = 0;

        /**
         * familyExchange smsCode.
         * @member {string} smsCode
         * @memberof LiveRoomCmd.familyExchange
         * @instance
         */
        familyExchange.prototype.smsCode = "";

        /**
         * familyExchange phoneNumber.
         * @member {string} phoneNumber
         * @memberof LiveRoomCmd.familyExchange
         * @instance
         */
        familyExchange.prototype.phoneNumber = "";

        /**
         * Encodes the specified familyExchange message. Does not implicitly {@link LiveRoomCmd.familyExchange.verify|verify} messages.
         * @function encode
         * @memberof LiveRoomCmd.familyExchange
         * @static
         * @param {LiveRoomCmd.IfamilyExchange} message familyExchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        familyExchange.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.rechargeId);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.money);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.smsCode);
            if (message.phoneNumber != null && message.hasOwnProperty("phoneNumber"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.phoneNumber);
            return writer;
        };

        /**
         * Encodes the specified familyExchange message, length delimited. Does not implicitly {@link LiveRoomCmd.familyExchange.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LiveRoomCmd.familyExchange
         * @static
         * @param {LiveRoomCmd.IfamilyExchange} message familyExchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        familyExchange.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return familyExchange;
    })();

    return LiveRoomCmd;
})();

export const MessageCmd = $root.MessageCmd = (() => {

    /**
     * Namespace MessageCmd.
     * @exports MessageCmd
     * @namespace
     */
    const MessageCmd = {};

    return MessageCmd;
})();

export const MomentCmd = $root.MomentCmd = (() => {

    /**
     * Namespace MomentCmd.
     * @exports MomentCmd
     * @namespace
     */
    const MomentCmd = {};

    MomentCmd.momentSquare = (function() {

        /**
         * Properties of a momentSquare.
         * @memberof MomentCmd
         * @interface ImomentSquare
         * @property {string} lastId momentSquare lastId
         * @property {number} size momentSquare size
         * @property {number} tabType momentSquare tabType
         * @property {number} index momentSquare index
         */

        /**
         * Constructs a new momentSquare.
         * @memberof MomentCmd
         * @classdesc Represents a momentSquare.
         * @implements ImomentSquare
         * @constructor
         * @param {MomentCmd.ImomentSquare=} [properties] Properties to set
         */
        function momentSquare(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * momentSquare lastId.
         * @member {string} lastId
         * @memberof MomentCmd.momentSquare
         * @instance
         */
        momentSquare.prototype.lastId = "";

        /**
         * momentSquare size.
         * @member {number} size
         * @memberof MomentCmd.momentSquare
         * @instance
         */
        momentSquare.prototype.size = 0;

        /**
         * momentSquare tabType.
         * @member {number} tabType
         * @memberof MomentCmd.momentSquare
         * @instance
         */
        momentSquare.prototype.tabType = 0;

        /**
         * momentSquare index.
         * @member {number} index
         * @memberof MomentCmd.momentSquare
         * @instance
         */
        momentSquare.prototype.index = 0;

        /**
         * Encodes the specified momentSquare message. Does not implicitly {@link MomentCmd.momentSquare.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.momentSquare
         * @static
         * @param {MomentCmd.ImomentSquare} message momentSquare message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        momentSquare.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.lastId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.size);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.tabType);
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.index);
            return writer;
        };

        /**
         * Encodes the specified momentSquare message, length delimited. Does not implicitly {@link MomentCmd.momentSquare.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.momentSquare
         * @static
         * @param {MomentCmd.ImomentSquare} message momentSquare message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        momentSquare.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return momentSquare;
    })();

    MomentCmd.issueMoment = (function() {

        /**
         * Properties of an issueMoment.
         * @memberof MomentCmd
         * @interface IissueMoment
         * @property {string|null} [word] issueMoment word
         * @property {string|null} [location] issueMoment location
         * @property {string|null} [topic] issueMoment topic
         * @property {number|null} [contType] issueMoment contType
         * @property {number|null} [isVoiceCard] issueMoment isVoiceCard
         * @property {number|null} [lng] issueMoment lng
         * @property {number|null} [lat] issueMoment lat
         * @property {string|null} [cityCode] issueMoment cityCode
         * @property {Array.<MomentCmd.IMomentMedia>|null} [medias] issueMoment medias
         */

        /**
         * Constructs a new issueMoment.
         * @memberof MomentCmd
         * @classdesc Represents an issueMoment.
         * @implements IissueMoment
         * @constructor
         * @param {MomentCmd.IissueMoment=} [properties] Properties to set
         */
        function issueMoment(properties) {
            this.medias = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * issueMoment word.
         * @member {string} word
         * @memberof MomentCmd.issueMoment
         * @instance
         */
        issueMoment.prototype.word = "";

        /**
         * issueMoment location.
         * @member {string} location
         * @memberof MomentCmd.issueMoment
         * @instance
         */
        issueMoment.prototype.location = "";

        /**
         * issueMoment topic.
         * @member {string} topic
         * @memberof MomentCmd.issueMoment
         * @instance
         */
        issueMoment.prototype.topic = "";

        /**
         * issueMoment contType.
         * @member {number} contType
         * @memberof MomentCmd.issueMoment
         * @instance
         */
        issueMoment.prototype.contType = 0;

        /**
         * issueMoment isVoiceCard.
         * @member {number} isVoiceCard
         * @memberof MomentCmd.issueMoment
         * @instance
         */
        issueMoment.prototype.isVoiceCard = 0;

        /**
         * issueMoment lng.
         * @member {number} lng
         * @memberof MomentCmd.issueMoment
         * @instance
         */
        issueMoment.prototype.lng = 0;

        /**
         * issueMoment lat.
         * @member {number} lat
         * @memberof MomentCmd.issueMoment
         * @instance
         */
        issueMoment.prototype.lat = 0;

        /**
         * issueMoment cityCode.
         * @member {string} cityCode
         * @memberof MomentCmd.issueMoment
         * @instance
         */
        issueMoment.prototype.cityCode = "";

        /**
         * issueMoment medias.
         * @member {Array.<MomentCmd.IMomentMedia>} medias
         * @memberof MomentCmd.issueMoment
         * @instance
         */
        issueMoment.prototype.medias = $util.emptyArray;

        /**
         * Encodes the specified issueMoment message. Does not implicitly {@link MomentCmd.issueMoment.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.issueMoment
         * @static
         * @param {MomentCmd.IissueMoment} message issueMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        issueMoment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.word != null && message.hasOwnProperty("word"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.word);
            if (message.location != null && message.hasOwnProperty("location"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.location);
            if (message.topic != null && message.hasOwnProperty("topic"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.topic);
            if (message.contType != null && message.hasOwnProperty("contType"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.contType);
            if (message.isVoiceCard != null && message.hasOwnProperty("isVoiceCard"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.isVoiceCard);
            if (message.lng != null && message.hasOwnProperty("lng"))
                writer.uint32(/* id 6, wireType 1 =*/49).double(message.lng);
            if (message.lat != null && message.hasOwnProperty("lat"))
                writer.uint32(/* id 7, wireType 1 =*/57).double(message.lat);
            if (message.cityCode != null && message.hasOwnProperty("cityCode"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.cityCode);
            if (message.medias != null && message.medias.length)
                for (let i = 0; i < message.medias.length; ++i)
                    $root.MomentCmd.MomentMedia.encode(message.medias[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified issueMoment message, length delimited. Does not implicitly {@link MomentCmd.issueMoment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.issueMoment
         * @static
         * @param {MomentCmd.IissueMoment} message issueMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        issueMoment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return issueMoment;
    })();

    MomentCmd.likeMoment = (function() {

        /**
         * Properties of a likeMoment.
         * @memberof MomentCmd
         * @interface IlikeMoment
         * @property {string} momentId likeMoment momentId
         */

        /**
         * Constructs a new likeMoment.
         * @memberof MomentCmd
         * @classdesc Represents a likeMoment.
         * @implements IlikeMoment
         * @constructor
         * @param {MomentCmd.IlikeMoment=} [properties] Properties to set
         */
        function likeMoment(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * likeMoment momentId.
         * @member {string} momentId
         * @memberof MomentCmd.likeMoment
         * @instance
         */
        likeMoment.prototype.momentId = "";

        /**
         * Encodes the specified likeMoment message. Does not implicitly {@link MomentCmd.likeMoment.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.likeMoment
         * @static
         * @param {MomentCmd.IlikeMoment} message likeMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        likeMoment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.momentId);
            return writer;
        };

        /**
         * Encodes the specified likeMoment message, length delimited. Does not implicitly {@link MomentCmd.likeMoment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.likeMoment
         * @static
         * @param {MomentCmd.IlikeMoment} message likeMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        likeMoment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return likeMoment;
    })();

    MomentCmd.cancelLikeMoment = (function() {

        /**
         * Properties of a cancelLikeMoment.
         * @memberof MomentCmd
         * @interface IcancelLikeMoment
         * @property {string} momentId cancelLikeMoment momentId
         */

        /**
         * Constructs a new cancelLikeMoment.
         * @memberof MomentCmd
         * @classdesc Represents a cancelLikeMoment.
         * @implements IcancelLikeMoment
         * @constructor
         * @param {MomentCmd.IcancelLikeMoment=} [properties] Properties to set
         */
        function cancelLikeMoment(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cancelLikeMoment momentId.
         * @member {string} momentId
         * @memberof MomentCmd.cancelLikeMoment
         * @instance
         */
        cancelLikeMoment.prototype.momentId = "";

        /**
         * Encodes the specified cancelLikeMoment message. Does not implicitly {@link MomentCmd.cancelLikeMoment.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.cancelLikeMoment
         * @static
         * @param {MomentCmd.IcancelLikeMoment} message cancelLikeMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cancelLikeMoment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.momentId);
            return writer;
        };

        /**
         * Encodes the specified cancelLikeMoment message, length delimited. Does not implicitly {@link MomentCmd.cancelLikeMoment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.cancelLikeMoment
         * @static
         * @param {MomentCmd.IcancelLikeMoment} message cancelLikeMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cancelLikeMoment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return cancelLikeMoment;
    })();

    MomentCmd.shieldingMoment = (function() {

        /**
         * Properties of a shieldingMoment.
         * @memberof MomentCmd
         * @interface IshieldingMoment
         * @property {string} momentId shieldingMoment momentId
         */

        /**
         * Constructs a new shieldingMoment.
         * @memberof MomentCmd
         * @classdesc Represents a shieldingMoment.
         * @implements IshieldingMoment
         * @constructor
         * @param {MomentCmd.IshieldingMoment=} [properties] Properties to set
         */
        function shieldingMoment(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * shieldingMoment momentId.
         * @member {string} momentId
         * @memberof MomentCmd.shieldingMoment
         * @instance
         */
        shieldingMoment.prototype.momentId = "";

        /**
         * Encodes the specified shieldingMoment message. Does not implicitly {@link MomentCmd.shieldingMoment.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.shieldingMoment
         * @static
         * @param {MomentCmd.IshieldingMoment} message shieldingMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        shieldingMoment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.momentId);
            return writer;
        };

        /**
         * Encodes the specified shieldingMoment message, length delimited. Does not implicitly {@link MomentCmd.shieldingMoment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.shieldingMoment
         * @static
         * @param {MomentCmd.IshieldingMoment} message shieldingMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        shieldingMoment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return shieldingMoment;
    })();

    MomentCmd.viewMoment = (function() {

        /**
         * Properties of a viewMoment.
         * @memberof MomentCmd
         * @interface IviewMoment
         * @property {string} momentId viewMoment momentId
         */

        /**
         * Constructs a new viewMoment.
         * @memberof MomentCmd
         * @classdesc Represents a viewMoment.
         * @implements IviewMoment
         * @constructor
         * @param {MomentCmd.IviewMoment=} [properties] Properties to set
         */
        function viewMoment(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * viewMoment momentId.
         * @member {string} momentId
         * @memberof MomentCmd.viewMoment
         * @instance
         */
        viewMoment.prototype.momentId = "";

        /**
         * Encodes the specified viewMoment message. Does not implicitly {@link MomentCmd.viewMoment.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.viewMoment
         * @static
         * @param {MomentCmd.IviewMoment} message viewMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        viewMoment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.momentId);
            return writer;
        };

        /**
         * Encodes the specified viewMoment message, length delimited. Does not implicitly {@link MomentCmd.viewMoment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.viewMoment
         * @static
         * @param {MomentCmd.IviewMoment} message viewMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        viewMoment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return viewMoment;
    })();

    MomentCmd.listMoments = (function() {

        /**
         * Properties of a listMoments.
         * @memberof MomentCmd
         * @interface IlistMoments
         * @property {string} userId listMoments userId
         * @property {string} lastId listMoments lastId
         * @property {number} size listMoments size
         */

        /**
         * Constructs a new listMoments.
         * @memberof MomentCmd
         * @classdesc Represents a listMoments.
         * @implements IlistMoments
         * @constructor
         * @param {MomentCmd.IlistMoments=} [properties] Properties to set
         */
        function listMoments(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * listMoments userId.
         * @member {string} userId
         * @memberof MomentCmd.listMoments
         * @instance
         */
        listMoments.prototype.userId = "";

        /**
         * listMoments lastId.
         * @member {string} lastId
         * @memberof MomentCmd.listMoments
         * @instance
         */
        listMoments.prototype.lastId = "";

        /**
         * listMoments size.
         * @member {number} size
         * @memberof MomentCmd.listMoments
         * @instance
         */
        listMoments.prototype.size = 0;

        /**
         * Encodes the specified listMoments message. Does not implicitly {@link MomentCmd.listMoments.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.listMoments
         * @static
         * @param {MomentCmd.IlistMoments} message listMoments message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listMoments.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.lastId);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.size);
            return writer;
        };

        /**
         * Encodes the specified listMoments message, length delimited. Does not implicitly {@link MomentCmd.listMoments.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.listMoments
         * @static
         * @param {MomentCmd.IlistMoments} message listMoments message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listMoments.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return listMoments;
    })();

    MomentCmd.delMoment = (function() {

        /**
         * Properties of a delMoment.
         * @memberof MomentCmd
         * @interface IdelMoment
         * @property {string} momentId delMoment momentId
         */

        /**
         * Constructs a new delMoment.
         * @memberof MomentCmd
         * @classdesc Represents a delMoment.
         * @implements IdelMoment
         * @constructor
         * @param {MomentCmd.IdelMoment=} [properties] Properties to set
         */
        function delMoment(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * delMoment momentId.
         * @member {string} momentId
         * @memberof MomentCmd.delMoment
         * @instance
         */
        delMoment.prototype.momentId = "";

        /**
         * Encodes the specified delMoment message. Does not implicitly {@link MomentCmd.delMoment.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.delMoment
         * @static
         * @param {MomentCmd.IdelMoment} message delMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delMoment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.momentId);
            return writer;
        };

        /**
         * Encodes the specified delMoment message, length delimited. Does not implicitly {@link MomentCmd.delMoment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.delMoment
         * @static
         * @param {MomentCmd.IdelMoment} message delMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delMoment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return delMoment;
    })();

    MomentCmd.reportMoment = (function() {

        /**
         * Properties of a reportMoment.
         * @memberof MomentCmd
         * @interface IreportMoment
         * @property {string} momentId reportMoment momentId
         * @property {number} reason reportMoment reason
         */

        /**
         * Constructs a new reportMoment.
         * @memberof MomentCmd
         * @classdesc Represents a reportMoment.
         * @implements IreportMoment
         * @constructor
         * @param {MomentCmd.IreportMoment=} [properties] Properties to set
         */
        function reportMoment(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * reportMoment momentId.
         * @member {string} momentId
         * @memberof MomentCmd.reportMoment
         * @instance
         */
        reportMoment.prototype.momentId = "";

        /**
         * reportMoment reason.
         * @member {number} reason
         * @memberof MomentCmd.reportMoment
         * @instance
         */
        reportMoment.prototype.reason = 0;

        /**
         * Encodes the specified reportMoment message. Does not implicitly {@link MomentCmd.reportMoment.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.reportMoment
         * @static
         * @param {MomentCmd.IreportMoment} message reportMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        reportMoment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.momentId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.reason);
            return writer;
        };

        /**
         * Encodes the specified reportMoment message, length delimited. Does not implicitly {@link MomentCmd.reportMoment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.reportMoment
         * @static
         * @param {MomentCmd.IreportMoment} message reportMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        reportMoment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return reportMoment;
    })();

    MomentCmd.listMomentMedia = (function() {

        /**
         * Properties of a listMomentMedia.
         * @memberof MomentCmd
         * @interface IlistMomentMedia
         * @property {number} index listMomentMedia index
         * @property {number} size listMomentMedia size
         * @property {Array.<number>|null} [contType] listMomentMedia contType
         */

        /**
         * Constructs a new listMomentMedia.
         * @memberof MomentCmd
         * @classdesc Represents a listMomentMedia.
         * @implements IlistMomentMedia
         * @constructor
         * @param {MomentCmd.IlistMomentMedia=} [properties] Properties to set
         */
        function listMomentMedia(properties) {
            this.contType = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * listMomentMedia index.
         * @member {number} index
         * @memberof MomentCmd.listMomentMedia
         * @instance
         */
        listMomentMedia.prototype.index = 0;

        /**
         * listMomentMedia size.
         * @member {number} size
         * @memberof MomentCmd.listMomentMedia
         * @instance
         */
        listMomentMedia.prototype.size = 0;

        /**
         * listMomentMedia contType.
         * @member {Array.<number>} contType
         * @memberof MomentCmd.listMomentMedia
         * @instance
         */
        listMomentMedia.prototype.contType = $util.emptyArray;

        /**
         * Encodes the specified listMomentMedia message. Does not implicitly {@link MomentCmd.listMomentMedia.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.listMomentMedia
         * @static
         * @param {MomentCmd.IlistMomentMedia} message listMomentMedia message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listMomentMedia.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.index);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.size);
            if (message.contType != null && message.contType.length)
                for (let i = 0; i < message.contType.length; ++i)
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.contType[i]);
            return writer;
        };

        /**
         * Encodes the specified listMomentMedia message, length delimited. Does not implicitly {@link MomentCmd.listMomentMedia.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.listMomentMedia
         * @static
         * @param {MomentCmd.IlistMomentMedia} message listMomentMedia message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listMomentMedia.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return listMomentMedia;
    })();

    MomentCmd.nextVoiceCard = (function() {

        /**
         * Properties of a nextVoiceCard.
         * @memberof MomentCmd
         * @interface InextVoiceCard
         * @property {number} nextIdx nextVoiceCard nextIdx
         */

        /**
         * Constructs a new nextVoiceCard.
         * @memberof MomentCmd
         * @classdesc Represents a nextVoiceCard.
         * @implements InextVoiceCard
         * @constructor
         * @param {MomentCmd.InextVoiceCard=} [properties] Properties to set
         */
        function nextVoiceCard(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * nextVoiceCard nextIdx.
         * @member {number} nextIdx
         * @memberof MomentCmd.nextVoiceCard
         * @instance
         */
        nextVoiceCard.prototype.nextIdx = 0;

        /**
         * Encodes the specified nextVoiceCard message. Does not implicitly {@link MomentCmd.nextVoiceCard.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.nextVoiceCard
         * @static
         * @param {MomentCmd.InextVoiceCard} message nextVoiceCard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nextVoiceCard.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nextIdx);
            return writer;
        };

        /**
         * Encodes the specified nextVoiceCard message, length delimited. Does not implicitly {@link MomentCmd.nextVoiceCard.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.nextVoiceCard
         * @static
         * @param {MomentCmd.InextVoiceCard} message nextVoiceCard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nextVoiceCard.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return nextVoiceCard;
    })();

    MomentCmd.getTopicDatas = (function() {

        /**
         * Properties of a getTopicDatas.
         * @memberof MomentCmd
         * @interface IgetTopicDatas
         */

        /**
         * Constructs a new getTopicDatas.
         * @memberof MomentCmd
         * @classdesc Represents a getTopicDatas.
         * @implements IgetTopicDatas
         * @constructor
         * @param {MomentCmd.IgetTopicDatas=} [properties] Properties to set
         */
        function getTopicDatas(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getTopicDatas message. Does not implicitly {@link MomentCmd.getTopicDatas.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.getTopicDatas
         * @static
         * @param {MomentCmd.IgetTopicDatas} message getTopicDatas message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getTopicDatas.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getTopicDatas message, length delimited. Does not implicitly {@link MomentCmd.getTopicDatas.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.getTopicDatas
         * @static
         * @param {MomentCmd.IgetTopicDatas} message getTopicDatas message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getTopicDatas.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getTopicDatas;
    })();

    MomentCmd.getTopicData = (function() {

        /**
         * Properties of a getTopicData.
         * @memberof MomentCmd
         * @interface IgetTopicData
         * @property {string} topicId getTopicData topicId
         */

        /**
         * Constructs a new getTopicData.
         * @memberof MomentCmd
         * @classdesc Represents a getTopicData.
         * @implements IgetTopicData
         * @constructor
         * @param {MomentCmd.IgetTopicData=} [properties] Properties to set
         */
        function getTopicData(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getTopicData topicId.
         * @member {string} topicId
         * @memberof MomentCmd.getTopicData
         * @instance
         */
        getTopicData.prototype.topicId = "";

        /**
         * Encodes the specified getTopicData message. Does not implicitly {@link MomentCmd.getTopicData.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.getTopicData
         * @static
         * @param {MomentCmd.IgetTopicData} message getTopicData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getTopicData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.topicId);
            return writer;
        };

        /**
         * Encodes the specified getTopicData message, length delimited. Does not implicitly {@link MomentCmd.getTopicData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.getTopicData
         * @static
         * @param {MomentCmd.IgetTopicData} message getTopicData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getTopicData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getTopicData;
    })();

    MomentCmd.getTopicMoments = (function() {

        /**
         * Properties of a getTopicMoments.
         * @memberof MomentCmd
         * @interface IgetTopicMoments
         * @property {string} topicId getTopicMoments topicId
         * @property {string} lastId getTopicMoments lastId
         * @property {number} size getTopicMoments size
         * @property {number} tabType getTopicMoments tabType
         * @property {number|null} [index] getTopicMoments index
         */

        /**
         * Constructs a new getTopicMoments.
         * @memberof MomentCmd
         * @classdesc Represents a getTopicMoments.
         * @implements IgetTopicMoments
         * @constructor
         * @param {MomentCmd.IgetTopicMoments=} [properties] Properties to set
         */
        function getTopicMoments(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getTopicMoments topicId.
         * @member {string} topicId
         * @memberof MomentCmd.getTopicMoments
         * @instance
         */
        getTopicMoments.prototype.topicId = "";

        /**
         * getTopicMoments lastId.
         * @member {string} lastId
         * @memberof MomentCmd.getTopicMoments
         * @instance
         */
        getTopicMoments.prototype.lastId = "";

        /**
         * getTopicMoments size.
         * @member {number} size
         * @memberof MomentCmd.getTopicMoments
         * @instance
         */
        getTopicMoments.prototype.size = 0;

        /**
         * getTopicMoments tabType.
         * @member {number} tabType
         * @memberof MomentCmd.getTopicMoments
         * @instance
         */
        getTopicMoments.prototype.tabType = 0;

        /**
         * getTopicMoments index.
         * @member {number} index
         * @memberof MomentCmd.getTopicMoments
         * @instance
         */
        getTopicMoments.prototype.index = 0;

        /**
         * Encodes the specified getTopicMoments message. Does not implicitly {@link MomentCmd.getTopicMoments.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.getTopicMoments
         * @static
         * @param {MomentCmd.IgetTopicMoments} message getTopicMoments message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getTopicMoments.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.topicId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.lastId);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.size);
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.tabType);
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.index);
            return writer;
        };

        /**
         * Encodes the specified getTopicMoments message, length delimited. Does not implicitly {@link MomentCmd.getTopicMoments.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.getTopicMoments
         * @static
         * @param {MomentCmd.IgetTopicMoments} message getTopicMoments message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getTopicMoments.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getTopicMoments;
    })();

    MomentCmd.shareMoment = (function() {

        /**
         * Properties of a shareMoment.
         * @memberof MomentCmd
         * @interface IshareMoment
         * @property {string} momentId shareMoment momentId
         */

        /**
         * Constructs a new shareMoment.
         * @memberof MomentCmd
         * @classdesc Represents a shareMoment.
         * @implements IshareMoment
         * @constructor
         * @param {MomentCmd.IshareMoment=} [properties] Properties to set
         */
        function shareMoment(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * shareMoment momentId.
         * @member {string} momentId
         * @memberof MomentCmd.shareMoment
         * @instance
         */
        shareMoment.prototype.momentId = "";

        /**
         * Encodes the specified shareMoment message. Does not implicitly {@link MomentCmd.shareMoment.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.shareMoment
         * @static
         * @param {MomentCmd.IshareMoment} message shareMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        shareMoment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.momentId);
            return writer;
        };

        /**
         * Encodes the specified shareMoment message, length delimited. Does not implicitly {@link MomentCmd.shareMoment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.shareMoment
         * @static
         * @param {MomentCmd.IshareMoment} message shareMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        shareMoment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return shareMoment;
    })();

    MomentCmd.MomentMedia = (function() {

        /**
         * Properties of a MomentMedia.
         * @memberof MomentCmd
         * @interface IMomentMedia
         * @property {string|null} [pic] MomentMedia pic
         * @property {number|null} [height] MomentMedia height
         * @property {number|null} [width] MomentMedia width
         * @property {string|null} [video] MomentMedia video
         * @property {string|null} [videoPic] MomentMedia videoPic
         * @property {string|null} [voice] MomentMedia voice
         * @property {number|null} [duration] MomentMedia duration
         * @property {number} type MomentMedia type
         * @property {string|null} [ext] MomentMedia ext
         */

        /**
         * Constructs a new MomentMedia.
         * @memberof MomentCmd
         * @classdesc Represents a MomentMedia.
         * @implements IMomentMedia
         * @constructor
         * @param {MomentCmd.IMomentMedia=} [properties] Properties to set
         */
        function MomentMedia(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MomentMedia pic.
         * @member {string} pic
         * @memberof MomentCmd.MomentMedia
         * @instance
         */
        MomentMedia.prototype.pic = "";

        /**
         * MomentMedia height.
         * @member {number} height
         * @memberof MomentCmd.MomentMedia
         * @instance
         */
        MomentMedia.prototype.height = 0;

        /**
         * MomentMedia width.
         * @member {number} width
         * @memberof MomentCmd.MomentMedia
         * @instance
         */
        MomentMedia.prototype.width = 0;

        /**
         * MomentMedia video.
         * @member {string} video
         * @memberof MomentCmd.MomentMedia
         * @instance
         */
        MomentMedia.prototype.video = "";

        /**
         * MomentMedia videoPic.
         * @member {string} videoPic
         * @memberof MomentCmd.MomentMedia
         * @instance
         */
        MomentMedia.prototype.videoPic = "";

        /**
         * MomentMedia voice.
         * @member {string} voice
         * @memberof MomentCmd.MomentMedia
         * @instance
         */
        MomentMedia.prototype.voice = "";

        /**
         * MomentMedia duration.
         * @member {number} duration
         * @memberof MomentCmd.MomentMedia
         * @instance
         */
        MomentMedia.prototype.duration = 0;

        /**
         * MomentMedia type.
         * @member {number} type
         * @memberof MomentCmd.MomentMedia
         * @instance
         */
        MomentMedia.prototype.type = 0;

        /**
         * MomentMedia ext.
         * @member {string} ext
         * @memberof MomentCmd.MomentMedia
         * @instance
         */
        MomentMedia.prototype.ext = "";

        /**
         * Encodes the specified MomentMedia message. Does not implicitly {@link MomentCmd.MomentMedia.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.MomentMedia
         * @static
         * @param {MomentCmd.IMomentMedia} message MomentMedia message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MomentMedia.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pic != null && message.hasOwnProperty("pic"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.pic);
            if (message.height != null && message.hasOwnProperty("height"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.height);
            if (message.width != null && message.hasOwnProperty("width"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.width);
            if (message.video != null && message.hasOwnProperty("video"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.video);
            if (message.videoPic != null && message.hasOwnProperty("videoPic"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.videoPic);
            if (message.voice != null && message.hasOwnProperty("voice"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.voice);
            if (message.duration != null && message.hasOwnProperty("duration"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.duration);
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.type);
            if (message.ext != null && message.hasOwnProperty("ext"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.ext);
            return writer;
        };

        /**
         * Encodes the specified MomentMedia message, length delimited. Does not implicitly {@link MomentCmd.MomentMedia.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.MomentMedia
         * @static
         * @param {MomentCmd.IMomentMedia} message MomentMedia message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MomentMedia.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return MomentMedia;
    })();

    MomentCmd.createTopic = (function() {

        /**
         * Properties of a createTopic.
         * @memberof MomentCmd
         * @interface IcreateTopic
         * @property {string} topicName createTopic topicName
         * @property {string} topicIntroduce createTopic topicIntroduce
         * @property {string} pic createTopic pic
         * @property {boolean|null} [topSearchTopic] createTopic topSearchTopic
         * @property {string|null} [topSearchLabel] createTopic topSearchLabel
         * @property {string|null} [topSearchStartTime] createTopic topSearchStartTime
         * @property {string|null} [topSearchEndTime] createTopic topSearchEndTime
         * @property {number|null} [weight] createTopic weight
         */

        /**
         * Constructs a new createTopic.
         * @memberof MomentCmd
         * @classdesc Represents a createTopic.
         * @implements IcreateTopic
         * @constructor
         * @param {MomentCmd.IcreateTopic=} [properties] Properties to set
         */
        function createTopic(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * createTopic topicName.
         * @member {string} topicName
         * @memberof MomentCmd.createTopic
         * @instance
         */
        createTopic.prototype.topicName = "";

        /**
         * createTopic topicIntroduce.
         * @member {string} topicIntroduce
         * @memberof MomentCmd.createTopic
         * @instance
         */
        createTopic.prototype.topicIntroduce = "";

        /**
         * createTopic pic.
         * @member {string} pic
         * @memberof MomentCmd.createTopic
         * @instance
         */
        createTopic.prototype.pic = "";

        /**
         * createTopic topSearchTopic.
         * @member {boolean} topSearchTopic
         * @memberof MomentCmd.createTopic
         * @instance
         */
        createTopic.prototype.topSearchTopic = false;

        /**
         * createTopic topSearchLabel.
         * @member {string} topSearchLabel
         * @memberof MomentCmd.createTopic
         * @instance
         */
        createTopic.prototype.topSearchLabel = "";

        /**
         * createTopic topSearchStartTime.
         * @member {string} topSearchStartTime
         * @memberof MomentCmd.createTopic
         * @instance
         */
        createTopic.prototype.topSearchStartTime = "";

        /**
         * createTopic topSearchEndTime.
         * @member {string} topSearchEndTime
         * @memberof MomentCmd.createTopic
         * @instance
         */
        createTopic.prototype.topSearchEndTime = "";

        /**
         * createTopic weight.
         * @member {number} weight
         * @memberof MomentCmd.createTopic
         * @instance
         */
        createTopic.prototype.weight = 0;

        /**
         * Encodes the specified createTopic message. Does not implicitly {@link MomentCmd.createTopic.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.createTopic
         * @static
         * @param {MomentCmd.IcreateTopic} message createTopic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        createTopic.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.topicName);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.topicIntroduce);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.pic);
            if (message.topSearchTopic != null && message.hasOwnProperty("topSearchTopic"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.topSearchTopic);
            if (message.topSearchLabel != null && message.hasOwnProperty("topSearchLabel"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.topSearchLabel);
            if (message.topSearchStartTime != null && message.hasOwnProperty("topSearchStartTime"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.topSearchStartTime);
            if (message.topSearchEndTime != null && message.hasOwnProperty("topSearchEndTime"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.topSearchEndTime);
            if (message.weight != null && message.hasOwnProperty("weight"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.weight);
            return writer;
        };

        /**
         * Encodes the specified createTopic message, length delimited. Does not implicitly {@link MomentCmd.createTopic.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.createTopic
         * @static
         * @param {MomentCmd.IcreateTopic} message createTopic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        createTopic.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return createTopic;
    })();

    MomentCmd.topicSquare = (function() {

        /**
         * Properties of a topicSquare.
         * @memberof MomentCmd
         * @interface ItopicSquare
         * @property {number} type topicSquare type
         * @property {number} index topicSquare index
         * @property {number} size topicSquare size
         * @property {string|null} [targetUserId] topicSquare targetUserId
         */

        /**
         * Constructs a new topicSquare.
         * @memberof MomentCmd
         * @classdesc Represents a topicSquare.
         * @implements ItopicSquare
         * @constructor
         * @param {MomentCmd.ItopicSquare=} [properties] Properties to set
         */
        function topicSquare(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * topicSquare type.
         * @member {number} type
         * @memberof MomentCmd.topicSquare
         * @instance
         */
        topicSquare.prototype.type = 0;

        /**
         * topicSquare index.
         * @member {number} index
         * @memberof MomentCmd.topicSquare
         * @instance
         */
        topicSquare.prototype.index = 0;

        /**
         * topicSquare size.
         * @member {number} size
         * @memberof MomentCmd.topicSquare
         * @instance
         */
        topicSquare.prototype.size = 0;

        /**
         * topicSquare targetUserId.
         * @member {string} targetUserId
         * @memberof MomentCmd.topicSquare
         * @instance
         */
        topicSquare.prototype.targetUserId = "";

        /**
         * Encodes the specified topicSquare message. Does not implicitly {@link MomentCmd.topicSquare.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.topicSquare
         * @static
         * @param {MomentCmd.ItopicSquare} message topicSquare message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        topicSquare.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.index);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.size);
            if (message.targetUserId != null && message.hasOwnProperty("targetUserId"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.targetUserId);
            return writer;
        };

        /**
         * Encodes the specified topicSquare message, length delimited. Does not implicitly {@link MomentCmd.topicSquare.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.topicSquare
         * @static
         * @param {MomentCmd.ItopicSquare} message topicSquare message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        topicSquare.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return topicSquare;
    })();

    MomentCmd.searchTopic = (function() {

        /**
         * Properties of a searchTopic.
         * @memberof MomentCmd
         * @interface IsearchTopic
         * @property {string} keyword searchTopic keyword
         * @property {number|null} [index] searchTopic index
         */

        /**
         * Constructs a new searchTopic.
         * @memberof MomentCmd
         * @classdesc Represents a searchTopic.
         * @implements IsearchTopic
         * @constructor
         * @param {MomentCmd.IsearchTopic=} [properties] Properties to set
         */
        function searchTopic(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * searchTopic keyword.
         * @member {string} keyword
         * @memberof MomentCmd.searchTopic
         * @instance
         */
        searchTopic.prototype.keyword = "";

        /**
         * searchTopic index.
         * @member {number} index
         * @memberof MomentCmd.searchTopic
         * @instance
         */
        searchTopic.prototype.index = 0;

        /**
         * Encodes the specified searchTopic message. Does not implicitly {@link MomentCmd.searchTopic.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.searchTopic
         * @static
         * @param {MomentCmd.IsearchTopic} message searchTopic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        searchTopic.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.keyword);
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.index);
            return writer;
        };

        /**
         * Encodes the specified searchTopic message, length delimited. Does not implicitly {@link MomentCmd.searchTopic.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.searchTopic
         * @static
         * @param {MomentCmd.IsearchTopic} message searchTopic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        searchTopic.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return searchTopic;
    })();

    MomentCmd.listLikeMoments = (function() {

        /**
         * Properties of a listLikeMoments.
         * @memberof MomentCmd
         * @interface IlistLikeMoments
         * @property {string} userId listLikeMoments userId
         * @property {number} pageNo listLikeMoments pageNo
         * @property {number} pageSize listLikeMoments pageSize
         */

        /**
         * Constructs a new listLikeMoments.
         * @memberof MomentCmd
         * @classdesc Represents a listLikeMoments.
         * @implements IlistLikeMoments
         * @constructor
         * @param {MomentCmd.IlistLikeMoments=} [properties] Properties to set
         */
        function listLikeMoments(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * listLikeMoments userId.
         * @member {string} userId
         * @memberof MomentCmd.listLikeMoments
         * @instance
         */
        listLikeMoments.prototype.userId = "";

        /**
         * listLikeMoments pageNo.
         * @member {number} pageNo
         * @memberof MomentCmd.listLikeMoments
         * @instance
         */
        listLikeMoments.prototype.pageNo = 0;

        /**
         * listLikeMoments pageSize.
         * @member {number} pageSize
         * @memberof MomentCmd.listLikeMoments
         * @instance
         */
        listLikeMoments.prototype.pageSize = 0;

        /**
         * Encodes the specified listLikeMoments message. Does not implicitly {@link MomentCmd.listLikeMoments.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.listLikeMoments
         * @static
         * @param {MomentCmd.IlistLikeMoments} message listLikeMoments message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listLikeMoments.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageNo);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
            return writer;
        };

        /**
         * Encodes the specified listLikeMoments message, length delimited. Does not implicitly {@link MomentCmd.listLikeMoments.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.listLikeMoments
         * @static
         * @param {MomentCmd.IlistLikeMoments} message listLikeMoments message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listLikeMoments.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return listLikeMoments;
    })();

    MomentCmd.setReadMoment = (function() {

        /**
         * Properties of a setReadMoment.
         * @memberof MomentCmd
         * @interface IsetReadMoment
         * @property {string} momentId setReadMoment momentId
         */

        /**
         * Constructs a new setReadMoment.
         * @memberof MomentCmd
         * @classdesc Represents a setReadMoment.
         * @implements IsetReadMoment
         * @constructor
         * @param {MomentCmd.IsetReadMoment=} [properties] Properties to set
         */
        function setReadMoment(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * setReadMoment momentId.
         * @member {string} momentId
         * @memberof MomentCmd.setReadMoment
         * @instance
         */
        setReadMoment.prototype.momentId = "";

        /**
         * Encodes the specified setReadMoment message. Does not implicitly {@link MomentCmd.setReadMoment.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.setReadMoment
         * @static
         * @param {MomentCmd.IsetReadMoment} message setReadMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setReadMoment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.momentId);
            return writer;
        };

        /**
         * Encodes the specified setReadMoment message, length delimited. Does not implicitly {@link MomentCmd.setReadMoment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.setReadMoment
         * @static
         * @param {MomentCmd.IsetReadMoment} message setReadMoment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setReadMoment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return setReadMoment;
    })();

    MomentCmd.addFocusTopic = (function() {

        /**
         * Properties of an addFocusTopic.
         * @memberof MomentCmd
         * @interface IaddFocusTopic
         * @property {string} topicId addFocusTopic topicId
         */

        /**
         * Constructs a new addFocusTopic.
         * @memberof MomentCmd
         * @classdesc Represents an addFocusTopic.
         * @implements IaddFocusTopic
         * @constructor
         * @param {MomentCmd.IaddFocusTopic=} [properties] Properties to set
         */
        function addFocusTopic(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * addFocusTopic topicId.
         * @member {string} topicId
         * @memberof MomentCmd.addFocusTopic
         * @instance
         */
        addFocusTopic.prototype.topicId = "";

        /**
         * Encodes the specified addFocusTopic message. Does not implicitly {@link MomentCmd.addFocusTopic.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.addFocusTopic
         * @static
         * @param {MomentCmd.IaddFocusTopic} message addFocusTopic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        addFocusTopic.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.topicId);
            return writer;
        };

        /**
         * Encodes the specified addFocusTopic message, length delimited. Does not implicitly {@link MomentCmd.addFocusTopic.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.addFocusTopic
         * @static
         * @param {MomentCmd.IaddFocusTopic} message addFocusTopic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        addFocusTopic.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return addFocusTopic;
    })();

    MomentCmd.cancelFocusTopic = (function() {

        /**
         * Properties of a cancelFocusTopic.
         * @memberof MomentCmd
         * @interface IcancelFocusTopic
         * @property {string} topicId cancelFocusTopic topicId
         */

        /**
         * Constructs a new cancelFocusTopic.
         * @memberof MomentCmd
         * @classdesc Represents a cancelFocusTopic.
         * @implements IcancelFocusTopic
         * @constructor
         * @param {MomentCmd.IcancelFocusTopic=} [properties] Properties to set
         */
        function cancelFocusTopic(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cancelFocusTopic topicId.
         * @member {string} topicId
         * @memberof MomentCmd.cancelFocusTopic
         * @instance
         */
        cancelFocusTopic.prototype.topicId = "";

        /**
         * Encodes the specified cancelFocusTopic message. Does not implicitly {@link MomentCmd.cancelFocusTopic.verify|verify} messages.
         * @function encode
         * @memberof MomentCmd.cancelFocusTopic
         * @static
         * @param {MomentCmd.IcancelFocusTopic} message cancelFocusTopic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cancelFocusTopic.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.topicId);
            return writer;
        };

        /**
         * Encodes the specified cancelFocusTopic message, length delimited. Does not implicitly {@link MomentCmd.cancelFocusTopic.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MomentCmd.cancelFocusTopic
         * @static
         * @param {MomentCmd.IcancelFocusTopic} message cancelFocusTopic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cancelFocusTopic.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return cancelFocusTopic;
    })();

    return MomentCmd;
})();

export const MyCmd = $root.MyCmd = (() => {

    /**
     * Namespace MyCmd.
     * @exports MyCmd
     * @namespace
     */
    const MyCmd = {};

    MyCmd.getUserList = (function() {

        /**
         * Properties of a getUserList.
         * @memberof MyCmd
         * @interface IgetUserList
         * @property {Array.<string>|null} [userIds] getUserList userIds
         */

        /**
         * Constructs a new getUserList.
         * @memberof MyCmd
         * @classdesc Represents a getUserList.
         * @implements IgetUserList
         * @constructor
         * @param {MyCmd.IgetUserList=} [properties] Properties to set
         */
        function getUserList(properties) {
            this.userIds = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getUserList userIds.
         * @member {Array.<string>} userIds
         * @memberof MyCmd.getUserList
         * @instance
         */
        getUserList.prototype.userIds = $util.emptyArray;

        /**
         * Encodes the specified getUserList message. Does not implicitly {@link MyCmd.getUserList.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.getUserList
         * @static
         * @param {MyCmd.IgetUserList} message getUserList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userIds != null && message.userIds.length)
                for (let i = 0; i < message.userIds.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.userIds[i]);
            return writer;
        };

        /**
         * Encodes the specified getUserList message, length delimited. Does not implicitly {@link MyCmd.getUserList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.getUserList
         * @static
         * @param {MyCmd.IgetUserList} message getUserList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getUserList;
    })();

    MyCmd.getUserInfoList = (function() {

        /**
         * Properties of a getUserInfoList.
         * @memberof MyCmd
         * @interface IgetUserInfoList
         * @property {Array.<string>|null} [userIds] getUserInfoList userIds
         * @property {number|Long} type getUserInfoList type
         */

        /**
         * Constructs a new getUserInfoList.
         * @memberof MyCmd
         * @classdesc Represents a getUserInfoList.
         * @implements IgetUserInfoList
         * @constructor
         * @param {MyCmd.IgetUserInfoList=} [properties] Properties to set
         */
        function getUserInfoList(properties) {
            this.userIds = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getUserInfoList userIds.
         * @member {Array.<string>} userIds
         * @memberof MyCmd.getUserInfoList
         * @instance
         */
        getUserInfoList.prototype.userIds = $util.emptyArray;

        /**
         * getUserInfoList type.
         * @member {number|Long} type
         * @memberof MyCmd.getUserInfoList
         * @instance
         */
        getUserInfoList.prototype.type = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Encodes the specified getUserInfoList message. Does not implicitly {@link MyCmd.getUserInfoList.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.getUserInfoList
         * @static
         * @param {MyCmd.IgetUserInfoList} message getUserInfoList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserInfoList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userIds != null && message.userIds.length)
                for (let i = 0; i < message.userIds.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.userIds[i]);
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.type);
            return writer;
        };

        /**
         * Encodes the specified getUserInfoList message, length delimited. Does not implicitly {@link MyCmd.getUserInfoList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.getUserInfoList
         * @static
         * @param {MyCmd.IgetUserInfoList} message getUserInfoList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserInfoList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getUserInfoList;
    })();

    MyCmd.getPersonPage = (function() {

        /**
         * Properties of a getPersonPage.
         * @memberof MyCmd
         * @interface IgetPersonPage
         * @property {string} userId getPersonPage userId
         */

        /**
         * Constructs a new getPersonPage.
         * @memberof MyCmd
         * @classdesc Represents a getPersonPage.
         * @implements IgetPersonPage
         * @constructor
         * @param {MyCmd.IgetPersonPage=} [properties] Properties to set
         */
        function getPersonPage(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getPersonPage userId.
         * @member {string} userId
         * @memberof MyCmd.getPersonPage
         * @instance
         */
        getPersonPage.prototype.userId = "";

        /**
         * Encodes the specified getPersonPage message. Does not implicitly {@link MyCmd.getPersonPage.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.getPersonPage
         * @static
         * @param {MyCmd.IgetPersonPage} message getPersonPage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getPersonPage.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified getPersonPage message, length delimited. Does not implicitly {@link MyCmd.getPersonPage.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.getPersonPage
         * @static
         * @param {MyCmd.IgetPersonPage} message getPersonPage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getPersonPage.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getPersonPage;
    })();

    MyCmd.modifyUserInfo = (function() {

        /**
         * Properties of a modifyUserInfo.
         * @memberof MyCmd
         * @interface ImodifyUserInfo
         * @property {string} nickName modifyUserInfo nickName
         * @property {number} sex modifyUserInfo sex
         * @property {string} birthday modifyUserInfo birthday
         * @property {boolean|null} [logo] modifyUserInfo logo
         * @property {string|null} [headUrl] modifyUserInfo headUrl
         * @property {string|null} [photoIds] modifyUserInfo photoIds
         * @property {string|null} [inviteCode] modifyUserInfo inviteCode
         * @property {string|null} [position] modifyUserInfo position
         * @property {string|null} [slogan] modifyUserInfo slogan
         * @property {boolean|null} [updateSex] modifyUserInfo updateSex
         * @property {number|null} [lng] modifyUserInfo lng
         * @property {number|null} [lat] modifyUserInfo lat
         * @property {string|null} [cityCode] modifyUserInfo cityCode
         * @property {string|null} [height] modifyUserInfo height
         */

        /**
         * Constructs a new modifyUserInfo.
         * @memberof MyCmd
         * @classdesc Represents a modifyUserInfo.
         * @implements ImodifyUserInfo
         * @constructor
         * @param {MyCmd.ImodifyUserInfo=} [properties] Properties to set
         */
        function modifyUserInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * modifyUserInfo nickName.
         * @member {string} nickName
         * @memberof MyCmd.modifyUserInfo
         * @instance
         */
        modifyUserInfo.prototype.nickName = "";

        /**
         * modifyUserInfo sex.
         * @member {number} sex
         * @memberof MyCmd.modifyUserInfo
         * @instance
         */
        modifyUserInfo.prototype.sex = 0;

        /**
         * modifyUserInfo birthday.
         * @member {string} birthday
         * @memberof MyCmd.modifyUserInfo
         * @instance
         */
        modifyUserInfo.prototype.birthday = "";

        /**
         * modifyUserInfo logo.
         * @member {boolean} logo
         * @memberof MyCmd.modifyUserInfo
         * @instance
         */
        modifyUserInfo.prototype.logo = false;

        /**
         * modifyUserInfo headUrl.
         * @member {string} headUrl
         * @memberof MyCmd.modifyUserInfo
         * @instance
         */
        modifyUserInfo.prototype.headUrl = "";

        /**
         * modifyUserInfo photoIds.
         * @member {string} photoIds
         * @memberof MyCmd.modifyUserInfo
         * @instance
         */
        modifyUserInfo.prototype.photoIds = "";

        /**
         * modifyUserInfo inviteCode.
         * @member {string} inviteCode
         * @memberof MyCmd.modifyUserInfo
         * @instance
         */
        modifyUserInfo.prototype.inviteCode = "";

        /**
         * modifyUserInfo position.
         * @member {string} position
         * @memberof MyCmd.modifyUserInfo
         * @instance
         */
        modifyUserInfo.prototype.position = "";

        /**
         * modifyUserInfo slogan.
         * @member {string} slogan
         * @memberof MyCmd.modifyUserInfo
         * @instance
         */
        modifyUserInfo.prototype.slogan = "";

        /**
         * modifyUserInfo updateSex.
         * @member {boolean} updateSex
         * @memberof MyCmd.modifyUserInfo
         * @instance
         */
        modifyUserInfo.prototype.updateSex = false;

        /**
         * modifyUserInfo lng.
         * @member {number} lng
         * @memberof MyCmd.modifyUserInfo
         * @instance
         */
        modifyUserInfo.prototype.lng = 0;

        /**
         * modifyUserInfo lat.
         * @member {number} lat
         * @memberof MyCmd.modifyUserInfo
         * @instance
         */
        modifyUserInfo.prototype.lat = 0;

        /**
         * modifyUserInfo cityCode.
         * @member {string} cityCode
         * @memberof MyCmd.modifyUserInfo
         * @instance
         */
        modifyUserInfo.prototype.cityCode = "";

        /**
         * modifyUserInfo height.
         * @member {string} height
         * @memberof MyCmd.modifyUserInfo
         * @instance
         */
        modifyUserInfo.prototype.height = "";

        /**
         * Encodes the specified modifyUserInfo message. Does not implicitly {@link MyCmd.modifyUserInfo.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.modifyUserInfo
         * @static
         * @param {MyCmd.ImodifyUserInfo} message modifyUserInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        modifyUserInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.nickName);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.sex);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.birthday);
            if (message.logo != null && message.hasOwnProperty("logo"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.logo);
            if (message.headUrl != null && message.hasOwnProperty("headUrl"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.headUrl);
            if (message.photoIds != null && message.hasOwnProperty("photoIds"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.photoIds);
            if (message.inviteCode != null && message.hasOwnProperty("inviteCode"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.inviteCode);
            if (message.position != null && message.hasOwnProperty("position"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.position);
            if (message.slogan != null && message.hasOwnProperty("slogan"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.slogan);
            if (message.updateSex != null && message.hasOwnProperty("updateSex"))
                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.updateSex);
            if (message.lng != null && message.hasOwnProperty("lng"))
                writer.uint32(/* id 11, wireType 1 =*/89).double(message.lng);
            if (message.lat != null && message.hasOwnProperty("lat"))
                writer.uint32(/* id 12, wireType 1 =*/97).double(message.lat);
            if (message.cityCode != null && message.hasOwnProperty("cityCode"))
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.cityCode);
            if (message.height != null && message.hasOwnProperty("height"))
                writer.uint32(/* id 14, wireType 2 =*/114).string(message.height);
            return writer;
        };

        /**
         * Encodes the specified modifyUserInfo message, length delimited. Does not implicitly {@link MyCmd.modifyUserInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.modifyUserInfo
         * @static
         * @param {MyCmd.ImodifyUserInfo} message modifyUserInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        modifyUserInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return modifyUserInfo;
    })();

    MyCmd.favourHall = (function() {

        /**
         * Properties of a favourHall.
         * @memberof MyCmd
         * @interface IfavourHall
         * @property {string} hallId favourHall hallId
         * @property {boolean} flag favourHall flag
         */

        /**
         * Constructs a new favourHall.
         * @memberof MyCmd
         * @classdesc Represents a favourHall.
         * @implements IfavourHall
         * @constructor
         * @param {MyCmd.IfavourHall=} [properties] Properties to set
         */
        function favourHall(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * favourHall hallId.
         * @member {string} hallId
         * @memberof MyCmd.favourHall
         * @instance
         */
        favourHall.prototype.hallId = "";

        /**
         * favourHall flag.
         * @member {boolean} flag
         * @memberof MyCmd.favourHall
         * @instance
         */
        favourHall.prototype.flag = false;

        /**
         * Encodes the specified favourHall message. Does not implicitly {@link MyCmd.favourHall.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.favourHall
         * @static
         * @param {MyCmd.IfavourHall} message favourHall message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        favourHall.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.hallId);
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.flag);
            return writer;
        };

        /**
         * Encodes the specified favourHall message, length delimited. Does not implicitly {@link MyCmd.favourHall.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.favourHall
         * @static
         * @param {MyCmd.IfavourHall} message favourHall message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        favourHall.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return favourHall;
    })();

    MyCmd.getFavourRoomList = (function() {

        /**
         * Properties of a getFavourRoomList.
         * @memberof MyCmd
         * @interface IgetFavourRoomList
         * @property {boolean} getTopOne getFavourRoomList getTopOne
         */

        /**
         * Constructs a new getFavourRoomList.
         * @memberof MyCmd
         * @classdesc Represents a getFavourRoomList.
         * @implements IgetFavourRoomList
         * @constructor
         * @param {MyCmd.IgetFavourRoomList=} [properties] Properties to set
         */
        function getFavourRoomList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getFavourRoomList getTopOne.
         * @member {boolean} getTopOne
         * @memberof MyCmd.getFavourRoomList
         * @instance
         */
        getFavourRoomList.prototype.getTopOne = false;

        /**
         * Encodes the specified getFavourRoomList message. Does not implicitly {@link MyCmd.getFavourRoomList.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.getFavourRoomList
         * @static
         * @param {MyCmd.IgetFavourRoomList} message getFavourRoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getFavourRoomList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.getTopOne);
            return writer;
        };

        /**
         * Encodes the specified getFavourRoomList message, length delimited. Does not implicitly {@link MyCmd.getFavourRoomList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.getFavourRoomList
         * @static
         * @param {MyCmd.IgetFavourRoomList} message getFavourRoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getFavourRoomList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getFavourRoomList;
    })();

    MyCmd.addLover = (function() {

        /**
         * Properties of an addLover.
         * @memberof MyCmd
         * @interface IaddLover
         * @property {string} friendId addLover friendId
         * @property {boolean} flag addLover flag
         */

        /**
         * Constructs a new addLover.
         * @memberof MyCmd
         * @classdesc Represents an addLover.
         * @implements IaddLover
         * @constructor
         * @param {MyCmd.IaddLover=} [properties] Properties to set
         */
        function addLover(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * addLover friendId.
         * @member {string} friendId
         * @memberof MyCmd.addLover
         * @instance
         */
        addLover.prototype.friendId = "";

        /**
         * addLover flag.
         * @member {boolean} flag
         * @memberof MyCmd.addLover
         * @instance
         */
        addLover.prototype.flag = false;

        /**
         * Encodes the specified addLover message. Does not implicitly {@link MyCmd.addLover.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.addLover
         * @static
         * @param {MyCmd.IaddLover} message addLover message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        addLover.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.friendId);
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.flag);
            return writer;
        };

        /**
         * Encodes the specified addLover message, length delimited. Does not implicitly {@link MyCmd.addLover.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.addLover
         * @static
         * @param {MyCmd.IaddLover} message addLover message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        addLover.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return addLover;
    })();

    MyCmd.getFriendList = (function() {

        /**
         * Properties of a getFriendList.
         * @memberof MyCmd
         * @interface IgetFriendList
         * @property {number} type getFriendList type
         */

        /**
         * Constructs a new getFriendList.
         * @memberof MyCmd
         * @classdesc Represents a getFriendList.
         * @implements IgetFriendList
         * @constructor
         * @param {MyCmd.IgetFriendList=} [properties] Properties to set
         */
        function getFriendList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getFriendList type.
         * @member {number} type
         * @memberof MyCmd.getFriendList
         * @instance
         */
        getFriendList.prototype.type = 0;

        /**
         * Encodes the specified getFriendList message. Does not implicitly {@link MyCmd.getFriendList.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.getFriendList
         * @static
         * @param {MyCmd.IgetFriendList} message getFriendList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getFriendList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified getFriendList message, length delimited. Does not implicitly {@link MyCmd.getFriendList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.getFriendList
         * @static
         * @param {MyCmd.IgetFriendList} message getFriendList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getFriendList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getFriendList;
    })();

    MyCmd.getLookMeList = (function() {

        /**
         * Properties of a getLookMeList.
         * @memberof MyCmd
         * @interface IgetLookMeList
         * @property {number} start getLookMeList start
         * @property {number} end getLookMeList end
         */

        /**
         * Constructs a new getLookMeList.
         * @memberof MyCmd
         * @classdesc Represents a getLookMeList.
         * @implements IgetLookMeList
         * @constructor
         * @param {MyCmd.IgetLookMeList=} [properties] Properties to set
         */
        function getLookMeList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getLookMeList start.
         * @member {number} start
         * @memberof MyCmd.getLookMeList
         * @instance
         */
        getLookMeList.prototype.start = 0;

        /**
         * getLookMeList end.
         * @member {number} end
         * @memberof MyCmd.getLookMeList
         * @instance
         */
        getLookMeList.prototype.end = 0;

        /**
         * Encodes the specified getLookMeList message. Does not implicitly {@link MyCmd.getLookMeList.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.getLookMeList
         * @static
         * @param {MyCmd.IgetLookMeList} message getLookMeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLookMeList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
            return writer;
        };

        /**
         * Encodes the specified getLookMeList message, length delimited. Does not implicitly {@link MyCmd.getLookMeList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.getLookMeList
         * @static
         * @param {MyCmd.IgetLookMeList} message getLookMeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLookMeList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLookMeList;
    })();

    MyCmd.getNewLookMeNum = (function() {

        /**
         * Properties of a getNewLookMeNum.
         * @memberof MyCmd
         * @interface IgetNewLookMeNum
         */

        /**
         * Constructs a new getNewLookMeNum.
         * @memberof MyCmd
         * @classdesc Represents a getNewLookMeNum.
         * @implements IgetNewLookMeNum
         * @constructor
         * @param {MyCmd.IgetNewLookMeNum=} [properties] Properties to set
         */
        function getNewLookMeNum(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getNewLookMeNum message. Does not implicitly {@link MyCmd.getNewLookMeNum.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.getNewLookMeNum
         * @static
         * @param {MyCmd.IgetNewLookMeNum} message getNewLookMeNum message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getNewLookMeNum.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getNewLookMeNum message, length delimited. Does not implicitly {@link MyCmd.getNewLookMeNum.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.getNewLookMeNum
         * @static
         * @param {MyCmd.IgetNewLookMeNum} message getNewLookMeNum message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getNewLookMeNum.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getNewLookMeNum;
    })();

    MyCmd.delLookMeRecord = (function() {

        /**
         * Properties of a delLookMeRecord.
         * @memberof MyCmd
         * @interface IdelLookMeRecord
         * @property {string} delUserId delLookMeRecord delUserId
         */

        /**
         * Constructs a new delLookMeRecord.
         * @memberof MyCmd
         * @classdesc Represents a delLookMeRecord.
         * @implements IdelLookMeRecord
         * @constructor
         * @param {MyCmd.IdelLookMeRecord=} [properties] Properties to set
         */
        function delLookMeRecord(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * delLookMeRecord delUserId.
         * @member {string} delUserId
         * @memberof MyCmd.delLookMeRecord
         * @instance
         */
        delLookMeRecord.prototype.delUserId = "";

        /**
         * Encodes the specified delLookMeRecord message. Does not implicitly {@link MyCmd.delLookMeRecord.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.delLookMeRecord
         * @static
         * @param {MyCmd.IdelLookMeRecord} message delLookMeRecord message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delLookMeRecord.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.delUserId);
            return writer;
        };

        /**
         * Encodes the specified delLookMeRecord message, length delimited. Does not implicitly {@link MyCmd.delLookMeRecord.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.delLookMeRecord
         * @static
         * @param {MyCmd.IdelLookMeRecord} message delLookMeRecord message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delLookMeRecord.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return delLookMeRecord;
    })();

    MyCmd.addSysGMemberSuccess = (function() {

        /**
         * Properties of an addSysGMemberSuccess.
         * @memberof MyCmd
         * @interface IaddSysGMemberSuccess
         */

        /**
         * Constructs a new addSysGMemberSuccess.
         * @memberof MyCmd
         * @classdesc Represents an addSysGMemberSuccess.
         * @implements IaddSysGMemberSuccess
         * @constructor
         * @param {MyCmd.IaddSysGMemberSuccess=} [properties] Properties to set
         */
        function addSysGMemberSuccess(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified addSysGMemberSuccess message. Does not implicitly {@link MyCmd.addSysGMemberSuccess.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.addSysGMemberSuccess
         * @static
         * @param {MyCmd.IaddSysGMemberSuccess} message addSysGMemberSuccess message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        addSysGMemberSuccess.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified addSysGMemberSuccess message, length delimited. Does not implicitly {@link MyCmd.addSysGMemberSuccess.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.addSysGMemberSuccess
         * @static
         * @param {MyCmd.IaddSysGMemberSuccess} message addSysGMemberSuccess message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        addSysGMemberSuccess.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return addSysGMemberSuccess;
    })();

    MyCmd.redoImHeadUrl = (function() {

        /**
         * Properties of a redoImHeadUrl.
         * @memberof MyCmd
         * @interface IredoImHeadUrl
         * @property {string} userId redoImHeadUrl userId
         */

        /**
         * Constructs a new redoImHeadUrl.
         * @memberof MyCmd
         * @classdesc Represents a redoImHeadUrl.
         * @implements IredoImHeadUrl
         * @constructor
         * @param {MyCmd.IredoImHeadUrl=} [properties] Properties to set
         */
        function redoImHeadUrl(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * redoImHeadUrl userId.
         * @member {string} userId
         * @memberof MyCmd.redoImHeadUrl
         * @instance
         */
        redoImHeadUrl.prototype.userId = "";

        /**
         * Encodes the specified redoImHeadUrl message. Does not implicitly {@link MyCmd.redoImHeadUrl.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.redoImHeadUrl
         * @static
         * @param {MyCmd.IredoImHeadUrl} message redoImHeadUrl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        redoImHeadUrl.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified redoImHeadUrl message, length delimited. Does not implicitly {@link MyCmd.redoImHeadUrl.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.redoImHeadUrl
         * @static
         * @param {MyCmd.IredoImHeadUrl} message redoImHeadUrl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        redoImHeadUrl.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return redoImHeadUrl;
    })();

    MyCmd.followEnterRoom = (function() {

        /**
         * Properties of a followEnterRoom.
         * @memberof MyCmd
         * @interface IfollowEnterRoom
         * @property {boolean} type followEnterRoom type
         */

        /**
         * Constructs a new followEnterRoom.
         * @memberof MyCmd
         * @classdesc Represents a followEnterRoom.
         * @implements IfollowEnterRoom
         * @constructor
         * @param {MyCmd.IfollowEnterRoom=} [properties] Properties to set
         */
        function followEnterRoom(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * followEnterRoom type.
         * @member {boolean} type
         * @memberof MyCmd.followEnterRoom
         * @instance
         */
        followEnterRoom.prototype.type = false;

        /**
         * Encodes the specified followEnterRoom message. Does not implicitly {@link MyCmd.followEnterRoom.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.followEnterRoom
         * @static
         * @param {MyCmd.IfollowEnterRoom} message followEnterRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        followEnterRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.type);
            return writer;
        };

        /**
         * Encodes the specified followEnterRoom message, length delimited. Does not implicitly {@link MyCmd.followEnterRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.followEnterRoom
         * @static
         * @param {MyCmd.IfollowEnterRoom} message followEnterRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        followEnterRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return followEnterRoom;
    })();

    MyCmd.shakeMicUp = (function() {

        /**
         * Properties of a shakeMicUp.
         * @memberof MyCmd
         * @interface IshakeMicUp
         * @property {boolean} type shakeMicUp type
         */

        /**
         * Constructs a new shakeMicUp.
         * @memberof MyCmd
         * @classdesc Represents a shakeMicUp.
         * @implements IshakeMicUp
         * @constructor
         * @param {MyCmd.IshakeMicUp=} [properties] Properties to set
         */
        function shakeMicUp(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * shakeMicUp type.
         * @member {boolean} type
         * @memberof MyCmd.shakeMicUp
         * @instance
         */
        shakeMicUp.prototype.type = false;

        /**
         * Encodes the specified shakeMicUp message. Does not implicitly {@link MyCmd.shakeMicUp.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.shakeMicUp
         * @static
         * @param {MyCmd.IshakeMicUp} message shakeMicUp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        shakeMicUp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.type);
            return writer;
        };

        /**
         * Encodes the specified shakeMicUp message, length delimited. Does not implicitly {@link MyCmd.shakeMicUp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.shakeMicUp
         * @static
         * @param {MyCmd.IshakeMicUp} message shakeMicUp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        shakeMicUp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return shakeMicUp;
    })();

    MyCmd.openTips = (function() {

        /**
         * Properties of an openTips.
         * @memberof MyCmd
         * @interface IopenTips
         * @property {boolean} type openTips type
         */

        /**
         * Constructs a new openTips.
         * @memberof MyCmd
         * @classdesc Represents an openTips.
         * @implements IopenTips
         * @constructor
         * @param {MyCmd.IopenTips=} [properties] Properties to set
         */
        function openTips(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * openTips type.
         * @member {boolean} type
         * @memberof MyCmd.openTips
         * @instance
         */
        openTips.prototype.type = false;

        /**
         * Encodes the specified openTips message. Does not implicitly {@link MyCmd.openTips.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.openTips
         * @static
         * @param {MyCmd.IopenTips} message openTips message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        openTips.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.type);
            return writer;
        };

        /**
         * Encodes the specified openTips message, length delimited. Does not implicitly {@link MyCmd.openTips.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.openTips
         * @static
         * @param {MyCmd.IopenTips} message openTips message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        openTips.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return openTips;
    })();

    MyCmd.bindMobile = (function() {

        /**
         * Properties of a bindMobile.
         * @memberof MyCmd
         * @interface IbindMobile
         * @property {string} mobile bindMobile mobile
         * @property {string} msgCode bindMobile msgCode
         */

        /**
         * Constructs a new bindMobile.
         * @memberof MyCmd
         * @classdesc Represents a bindMobile.
         * @implements IbindMobile
         * @constructor
         * @param {MyCmd.IbindMobile=} [properties] Properties to set
         */
        function bindMobile(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * bindMobile mobile.
         * @member {string} mobile
         * @memberof MyCmd.bindMobile
         * @instance
         */
        bindMobile.prototype.mobile = "";

        /**
         * bindMobile msgCode.
         * @member {string} msgCode
         * @memberof MyCmd.bindMobile
         * @instance
         */
        bindMobile.prototype.msgCode = "";

        /**
         * Encodes the specified bindMobile message. Does not implicitly {@link MyCmd.bindMobile.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.bindMobile
         * @static
         * @param {MyCmd.IbindMobile} message bindMobile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        bindMobile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.mobile);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.msgCode);
            return writer;
        };

        /**
         * Encodes the specified bindMobile message, length delimited. Does not implicitly {@link MyCmd.bindMobile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.bindMobile
         * @static
         * @param {MyCmd.IbindMobile} message bindMobile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        bindMobile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return bindMobile;
    })();

    MyCmd.setInvitationCode = (function() {

        /**
         * Properties of a setInvitationCode.
         * @memberof MyCmd
         * @interface IsetInvitationCode
         * @property {string|null} [invitationCode] setInvitationCode invitationCode
         */

        /**
         * Constructs a new setInvitationCode.
         * @memberof MyCmd
         * @classdesc Represents a setInvitationCode.
         * @implements IsetInvitationCode
         * @constructor
         * @param {MyCmd.IsetInvitationCode=} [properties] Properties to set
         */
        function setInvitationCode(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * setInvitationCode invitationCode.
         * @member {string} invitationCode
         * @memberof MyCmd.setInvitationCode
         * @instance
         */
        setInvitationCode.prototype.invitationCode = "";

        /**
         * Encodes the specified setInvitationCode message. Does not implicitly {@link MyCmd.setInvitationCode.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.setInvitationCode
         * @static
         * @param {MyCmd.IsetInvitationCode} message setInvitationCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setInvitationCode.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.invitationCode != null && message.hasOwnProperty("invitationCode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.invitationCode);
            return writer;
        };

        /**
         * Encodes the specified setInvitationCode message, length delimited. Does not implicitly {@link MyCmd.setInvitationCode.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.setInvitationCode
         * @static
         * @param {MyCmd.IsetInvitationCode} message setInvitationCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setInvitationCode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return setInvitationCode;
    })();

    MyCmd.setFriendRemark = (function() {

        /**
         * Properties of a setFriendRemark.
         * @memberof MyCmd
         * @interface IsetFriendRemark
         * @property {string} userId setFriendRemark userId
         * @property {string} friendRemark setFriendRemark friendRemark
         */

        /**
         * Constructs a new setFriendRemark.
         * @memberof MyCmd
         * @classdesc Represents a setFriendRemark.
         * @implements IsetFriendRemark
         * @constructor
         * @param {MyCmd.IsetFriendRemark=} [properties] Properties to set
         */
        function setFriendRemark(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * setFriendRemark userId.
         * @member {string} userId
         * @memberof MyCmd.setFriendRemark
         * @instance
         */
        setFriendRemark.prototype.userId = "";

        /**
         * setFriendRemark friendRemark.
         * @member {string} friendRemark
         * @memberof MyCmd.setFriendRemark
         * @instance
         */
        setFriendRemark.prototype.friendRemark = "";

        /**
         * Encodes the specified setFriendRemark message. Does not implicitly {@link MyCmd.setFriendRemark.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.setFriendRemark
         * @static
         * @param {MyCmd.IsetFriendRemark} message setFriendRemark message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setFriendRemark.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.friendRemark);
            return writer;
        };

        /**
         * Encodes the specified setFriendRemark message, length delimited. Does not implicitly {@link MyCmd.setFriendRemark.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.setFriendRemark
         * @static
         * @param {MyCmd.IsetFriendRemark} message setFriendRemark message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setFriendRemark.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return setFriendRemark;
    })();

    MyCmd.postLocation = (function() {

        /**
         * Properties of a postLocation.
         * @memberof MyCmd
         * @interface IpostLocation
         * @property {number|null} [lng] postLocation lng
         * @property {number|null} [lat] postLocation lat
         */

        /**
         * Constructs a new postLocation.
         * @memberof MyCmd
         * @classdesc Represents a postLocation.
         * @implements IpostLocation
         * @constructor
         * @param {MyCmd.IpostLocation=} [properties] Properties to set
         */
        function postLocation(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * postLocation lng.
         * @member {number} lng
         * @memberof MyCmd.postLocation
         * @instance
         */
        postLocation.prototype.lng = 0;

        /**
         * postLocation lat.
         * @member {number} lat
         * @memberof MyCmd.postLocation
         * @instance
         */
        postLocation.prototype.lat = 0;

        /**
         * Encodes the specified postLocation message. Does not implicitly {@link MyCmd.postLocation.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.postLocation
         * @static
         * @param {MyCmd.IpostLocation} message postLocation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        postLocation.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.lng != null && message.hasOwnProperty("lng"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.lng);
            if (message.lat != null && message.hasOwnProperty("lat"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.lat);
            return writer;
        };

        /**
         * Encodes the specified postLocation message, length delimited. Does not implicitly {@link MyCmd.postLocation.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.postLocation
         * @static
         * @param {MyCmd.IpostLocation} message postLocation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        postLocation.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return postLocation;
    })();

    MyCmd.getUserLevel = (function() {

        /**
         * Properties of a getUserLevel.
         * @memberof MyCmd
         * @interface IgetUserLevel
         * @property {string} userId getUserLevel userId
         */

        /**
         * Constructs a new getUserLevel.
         * @memberof MyCmd
         * @classdesc Represents a getUserLevel.
         * @implements IgetUserLevel
         * @constructor
         * @param {MyCmd.IgetUserLevel=} [properties] Properties to set
         */
        function getUserLevel(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getUserLevel userId.
         * @member {string} userId
         * @memberof MyCmd.getUserLevel
         * @instance
         */
        getUserLevel.prototype.userId = "";

        /**
         * Encodes the specified getUserLevel message. Does not implicitly {@link MyCmd.getUserLevel.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.getUserLevel
         * @static
         * @param {MyCmd.IgetUserLevel} message getUserLevel message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserLevel.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified getUserLevel message, length delimited. Does not implicitly {@link MyCmd.getUserLevel.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.getUserLevel
         * @static
         * @param {MyCmd.IgetUserLevel} message getUserLevel message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserLevel.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getUserLevel;
    })();

    MyCmd.setPassword = (function() {

        /**
         * Properties of a setPassword.
         * @memberof MyCmd
         * @interface IsetPassword
         * @property {string} userId setPassword userId
         * @property {string} oldPassword setPassword oldPassword
         * @property {string} newPassword setPassword newPassword
         */

        /**
         * Constructs a new setPassword.
         * @memberof MyCmd
         * @classdesc Represents a setPassword.
         * @implements IsetPassword
         * @constructor
         * @param {MyCmd.IsetPassword=} [properties] Properties to set
         */
        function setPassword(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * setPassword userId.
         * @member {string} userId
         * @memberof MyCmd.setPassword
         * @instance
         */
        setPassword.prototype.userId = "";

        /**
         * setPassword oldPassword.
         * @member {string} oldPassword
         * @memberof MyCmd.setPassword
         * @instance
         */
        setPassword.prototype.oldPassword = "";

        /**
         * setPassword newPassword.
         * @member {string} newPassword
         * @memberof MyCmd.setPassword
         * @instance
         */
        setPassword.prototype.newPassword = "";

        /**
         * Encodes the specified setPassword message. Does not implicitly {@link MyCmd.setPassword.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.setPassword
         * @static
         * @param {MyCmd.IsetPassword} message setPassword message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setPassword.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.oldPassword);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.newPassword);
            return writer;
        };

        /**
         * Encodes the specified setPassword message, length delimited. Does not implicitly {@link MyCmd.setPassword.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.setPassword
         * @static
         * @param {MyCmd.IsetPassword} message setPassword message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setPassword.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return setPassword;
    })();

    MyCmd.getDeviceConfig = (function() {

        /**
         * Properties of a getDeviceConfig.
         * @memberof MyCmd
         * @interface IgetDeviceConfig
         * @property {string} deviceId getDeviceConfig deviceId
         */

        /**
         * Constructs a new getDeviceConfig.
         * @memberof MyCmd
         * @classdesc Represents a getDeviceConfig.
         * @implements IgetDeviceConfig
         * @constructor
         * @param {MyCmd.IgetDeviceConfig=} [properties] Properties to set
         */
        function getDeviceConfig(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getDeviceConfig deviceId.
         * @member {string} deviceId
         * @memberof MyCmd.getDeviceConfig
         * @instance
         */
        getDeviceConfig.prototype.deviceId = "";

        /**
         * Encodes the specified getDeviceConfig message. Does not implicitly {@link MyCmd.getDeviceConfig.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.getDeviceConfig
         * @static
         * @param {MyCmd.IgetDeviceConfig} message getDeviceConfig message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getDeviceConfig.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.deviceId);
            return writer;
        };

        /**
         * Encodes the specified getDeviceConfig message, length delimited. Does not implicitly {@link MyCmd.getDeviceConfig.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.getDeviceConfig
         * @static
         * @param {MyCmd.IgetDeviceConfig} message getDeviceConfig message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getDeviceConfig.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getDeviceConfig;
    })();

    MyCmd.setDeviceConfig = (function() {

        /**
         * Properties of a setDeviceConfig.
         * @memberof MyCmd
         * @interface IsetDeviceConfig
         * @property {Array.<string>|null} [paramKey] setDeviceConfig paramKey
         * @property {Array.<string>|null} [paramValue] setDeviceConfig paramValue
         */

        /**
         * Constructs a new setDeviceConfig.
         * @memberof MyCmd
         * @classdesc Represents a setDeviceConfig.
         * @implements IsetDeviceConfig
         * @constructor
         * @param {MyCmd.IsetDeviceConfig=} [properties] Properties to set
         */
        function setDeviceConfig(properties) {
            this.paramKey = [];
            this.paramValue = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * setDeviceConfig paramKey.
         * @member {Array.<string>} paramKey
         * @memberof MyCmd.setDeviceConfig
         * @instance
         */
        setDeviceConfig.prototype.paramKey = $util.emptyArray;

        /**
         * setDeviceConfig paramValue.
         * @member {Array.<string>} paramValue
         * @memberof MyCmd.setDeviceConfig
         * @instance
         */
        setDeviceConfig.prototype.paramValue = $util.emptyArray;

        /**
         * Encodes the specified setDeviceConfig message. Does not implicitly {@link MyCmd.setDeviceConfig.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.setDeviceConfig
         * @static
         * @param {MyCmd.IsetDeviceConfig} message setDeviceConfig message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setDeviceConfig.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.paramKey != null && message.paramKey.length)
                for (let i = 0; i < message.paramKey.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.paramKey[i]);
            if (message.paramValue != null && message.paramValue.length)
                for (let i = 0; i < message.paramValue.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.paramValue[i]);
            return writer;
        };

        /**
         * Encodes the specified setDeviceConfig message, length delimited. Does not implicitly {@link MyCmd.setDeviceConfig.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.setDeviceConfig
         * @static
         * @param {MyCmd.IsetDeviceConfig} message setDeviceConfig message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setDeviceConfig.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return setDeviceConfig;
    })();

    MyCmd.unbindMobile = (function() {

        /**
         * Properties of an unbindMobile.
         * @memberof MyCmd
         * @interface IunbindMobile
         * @property {string} msgCode unbindMobile msgCode
         */

        /**
         * Constructs a new unbindMobile.
         * @memberof MyCmd
         * @classdesc Represents an unbindMobile.
         * @implements IunbindMobile
         * @constructor
         * @param {MyCmd.IunbindMobile=} [properties] Properties to set
         */
        function unbindMobile(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * unbindMobile msgCode.
         * @member {string} msgCode
         * @memberof MyCmd.unbindMobile
         * @instance
         */
        unbindMobile.prototype.msgCode = "";

        /**
         * Encodes the specified unbindMobile message. Does not implicitly {@link MyCmd.unbindMobile.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.unbindMobile
         * @static
         * @param {MyCmd.IunbindMobile} message unbindMobile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        unbindMobile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.msgCode);
            return writer;
        };

        /**
         * Encodes the specified unbindMobile message, length delimited. Does not implicitly {@link MyCmd.unbindMobile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.unbindMobile
         * @static
         * @param {MyCmd.IunbindMobile} message unbindMobile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        unbindMobile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return unbindMobile;
    })();

    MyCmd.shieldingHandle = (function() {

        /**
         * Properties of a shieldingHandle.
         * @memberof MyCmd
         * @interface IshieldingHandle
         * @property {string} targetId shieldingHandle targetId
         * @property {boolean} shielding shieldingHandle shielding
         */

        /**
         * Constructs a new shieldingHandle.
         * @memberof MyCmd
         * @classdesc Represents a shieldingHandle.
         * @implements IshieldingHandle
         * @constructor
         * @param {MyCmd.IshieldingHandle=} [properties] Properties to set
         */
        function shieldingHandle(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * shieldingHandle targetId.
         * @member {string} targetId
         * @memberof MyCmd.shieldingHandle
         * @instance
         */
        shieldingHandle.prototype.targetId = "";

        /**
         * shieldingHandle shielding.
         * @member {boolean} shielding
         * @memberof MyCmd.shieldingHandle
         * @instance
         */
        shieldingHandle.prototype.shielding = false;

        /**
         * Encodes the specified shieldingHandle message. Does not implicitly {@link MyCmd.shieldingHandle.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.shieldingHandle
         * @static
         * @param {MyCmd.IshieldingHandle} message shieldingHandle message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        shieldingHandle.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.shielding);
            return writer;
        };

        /**
         * Encodes the specified shieldingHandle message, length delimited. Does not implicitly {@link MyCmd.shieldingHandle.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.shieldingHandle
         * @static
         * @param {MyCmd.IshieldingHandle} message shieldingHandle message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        shieldingHandle.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return shieldingHandle;
    })();

    MyCmd.addStrangerMsg = (function() {

        /**
         * Properties of an addStrangerMsg.
         * @memberof MyCmd
         * @interface IaddStrangerMsg
         * @property {string} strangerId addStrangerMsg strangerId
         * @property {number} type addStrangerMsg type
         */

        /**
         * Constructs a new addStrangerMsg.
         * @memberof MyCmd
         * @classdesc Represents an addStrangerMsg.
         * @implements IaddStrangerMsg
         * @constructor
         * @param {MyCmd.IaddStrangerMsg=} [properties] Properties to set
         */
        function addStrangerMsg(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * addStrangerMsg strangerId.
         * @member {string} strangerId
         * @memberof MyCmd.addStrangerMsg
         * @instance
         */
        addStrangerMsg.prototype.strangerId = "";

        /**
         * addStrangerMsg type.
         * @member {number} type
         * @memberof MyCmd.addStrangerMsg
         * @instance
         */
        addStrangerMsg.prototype.type = 0;

        /**
         * Encodes the specified addStrangerMsg message. Does not implicitly {@link MyCmd.addStrangerMsg.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.addStrangerMsg
         * @static
         * @param {MyCmd.IaddStrangerMsg} message addStrangerMsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        addStrangerMsg.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.strangerId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified addStrangerMsg message, length delimited. Does not implicitly {@link MyCmd.addStrangerMsg.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.addStrangerMsg
         * @static
         * @param {MyCmd.IaddStrangerMsg} message addStrangerMsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        addStrangerMsg.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return addStrangerMsg;
    })();

    MyCmd.getStrangerInfo = (function() {

        /**
         * Properties of a getStrangerInfo.
         * @memberof MyCmd
         * @interface IgetStrangerInfo
         * @property {Array.<string>|null} [strangerId] getStrangerInfo strangerId
         */

        /**
         * Constructs a new getStrangerInfo.
         * @memberof MyCmd
         * @classdesc Represents a getStrangerInfo.
         * @implements IgetStrangerInfo
         * @constructor
         * @param {MyCmd.IgetStrangerInfo=} [properties] Properties to set
         */
        function getStrangerInfo(properties) {
            this.strangerId = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getStrangerInfo strangerId.
         * @member {Array.<string>} strangerId
         * @memberof MyCmd.getStrangerInfo
         * @instance
         */
        getStrangerInfo.prototype.strangerId = $util.emptyArray;

        /**
         * Encodes the specified getStrangerInfo message. Does not implicitly {@link MyCmd.getStrangerInfo.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.getStrangerInfo
         * @static
         * @param {MyCmd.IgetStrangerInfo} message getStrangerInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getStrangerInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.strangerId != null && message.strangerId.length)
                for (let i = 0; i < message.strangerId.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.strangerId[i]);
            return writer;
        };

        /**
         * Encodes the specified getStrangerInfo message, length delimited. Does not implicitly {@link MyCmd.getStrangerInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.getStrangerInfo
         * @static
         * @param {MyCmd.IgetStrangerInfo} message getStrangerInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getStrangerInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getStrangerInfo;
    })();

    MyCmd.breakStranger = (function() {

        /**
         * Properties of a breakStranger.
         * @memberof MyCmd
         * @interface IbreakStranger
         * @property {string} userId breakStranger userId
         * @property {string} strangerId breakStranger strangerId
         */

        /**
         * Constructs a new breakStranger.
         * @memberof MyCmd
         * @classdesc Represents a breakStranger.
         * @implements IbreakStranger
         * @constructor
         * @param {MyCmd.IbreakStranger=} [properties] Properties to set
         */
        function breakStranger(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * breakStranger userId.
         * @member {string} userId
         * @memberof MyCmd.breakStranger
         * @instance
         */
        breakStranger.prototype.userId = "";

        /**
         * breakStranger strangerId.
         * @member {string} strangerId
         * @memberof MyCmd.breakStranger
         * @instance
         */
        breakStranger.prototype.strangerId = "";

        /**
         * Encodes the specified breakStranger message. Does not implicitly {@link MyCmd.breakStranger.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.breakStranger
         * @static
         * @param {MyCmd.IbreakStranger} message breakStranger message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        breakStranger.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.strangerId);
            return writer;
        };

        /**
         * Encodes the specified breakStranger message, length delimited. Does not implicitly {@link MyCmd.breakStranger.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.breakStranger
         * @static
         * @param {MyCmd.IbreakStranger} message breakStranger message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        breakStranger.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return breakStranger;
    })();

    MyCmd.reportUser = (function() {

        /**
         * Properties of a reportUser.
         * @memberof MyCmd
         * @interface IreportUser
         * @property {string} illegalId reportUser illegalId
         * @property {number} entrance reportUser entrance
         * @property {number} reason reportUser reason
         */

        /**
         * Constructs a new reportUser.
         * @memberof MyCmd
         * @classdesc Represents a reportUser.
         * @implements IreportUser
         * @constructor
         * @param {MyCmd.IreportUser=} [properties] Properties to set
         */
        function reportUser(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * reportUser illegalId.
         * @member {string} illegalId
         * @memberof MyCmd.reportUser
         * @instance
         */
        reportUser.prototype.illegalId = "";

        /**
         * reportUser entrance.
         * @member {number} entrance
         * @memberof MyCmd.reportUser
         * @instance
         */
        reportUser.prototype.entrance = 0;

        /**
         * reportUser reason.
         * @member {number} reason
         * @memberof MyCmd.reportUser
         * @instance
         */
        reportUser.prototype.reason = 0;

        /**
         * Encodes the specified reportUser message. Does not implicitly {@link MyCmd.reportUser.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.reportUser
         * @static
         * @param {MyCmd.IreportUser} message reportUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        reportUser.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.illegalId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.entrance);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.reason);
            return writer;
        };

        /**
         * Encodes the specified reportUser message, length delimited. Does not implicitly {@link MyCmd.reportUser.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.reportUser
         * @static
         * @param {MyCmd.IreportUser} message reportUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        reportUser.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return reportUser;
    })();

    MyCmd.changeMobile = (function() {

        /**
         * Properties of a changeMobile.
         * @memberof MyCmd
         * @interface IchangeMobile
         * @property {string} msgCode changeMobile msgCode
         * @property {string} newPhoneNum changeMobile newPhoneNum
         * @property {string} newMsgCode changeMobile newMsgCode
         */

        /**
         * Constructs a new changeMobile.
         * @memberof MyCmd
         * @classdesc Represents a changeMobile.
         * @implements IchangeMobile
         * @constructor
         * @param {MyCmd.IchangeMobile=} [properties] Properties to set
         */
        function changeMobile(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * changeMobile msgCode.
         * @member {string} msgCode
         * @memberof MyCmd.changeMobile
         * @instance
         */
        changeMobile.prototype.msgCode = "";

        /**
         * changeMobile newPhoneNum.
         * @member {string} newPhoneNum
         * @memberof MyCmd.changeMobile
         * @instance
         */
        changeMobile.prototype.newPhoneNum = "";

        /**
         * changeMobile newMsgCode.
         * @member {string} newMsgCode
         * @memberof MyCmd.changeMobile
         * @instance
         */
        changeMobile.prototype.newMsgCode = "";

        /**
         * Encodes the specified changeMobile message. Does not implicitly {@link MyCmd.changeMobile.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.changeMobile
         * @static
         * @param {MyCmd.IchangeMobile} message changeMobile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        changeMobile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.msgCode);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.newPhoneNum);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.newMsgCode);
            return writer;
        };

        /**
         * Encodes the specified changeMobile message, length delimited. Does not implicitly {@link MyCmd.changeMobile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.changeMobile
         * @static
         * @param {MyCmd.IchangeMobile} message changeMobile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        changeMobile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return changeMobile;
    })();

    MyCmd.replyOfficialUser = (function() {

        /**
         * Properties of a replyOfficialUser.
         * @memberof MyCmd
         * @interface IreplyOfficialUser
         * @property {string} officialId replyOfficialUser officialId
         */

        /**
         * Constructs a new replyOfficialUser.
         * @memberof MyCmd
         * @classdesc Represents a replyOfficialUser.
         * @implements IreplyOfficialUser
         * @constructor
         * @param {MyCmd.IreplyOfficialUser=} [properties] Properties to set
         */
        function replyOfficialUser(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * replyOfficialUser officialId.
         * @member {string} officialId
         * @memberof MyCmd.replyOfficialUser
         * @instance
         */
        replyOfficialUser.prototype.officialId = "";

        /**
         * Encodes the specified replyOfficialUser message. Does not implicitly {@link MyCmd.replyOfficialUser.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.replyOfficialUser
         * @static
         * @param {MyCmd.IreplyOfficialUser} message replyOfficialUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        replyOfficialUser.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.officialId);
            return writer;
        };

        /**
         * Encodes the specified replyOfficialUser message, length delimited. Does not implicitly {@link MyCmd.replyOfficialUser.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.replyOfficialUser
         * @static
         * @param {MyCmd.IreplyOfficialUser} message replyOfficialUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        replyOfficialUser.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return replyOfficialUser;
    })();

    MyCmd.invisible = (function() {

        /**
         * Properties of an invisible.
         * @memberof MyCmd
         * @interface Iinvisible
         * @property {boolean} invisible invisible invisible
         */

        /**
         * Constructs a new invisible.
         * @memberof MyCmd
         * @classdesc Represents an invisible.
         * @implements Iinvisible
         * @constructor
         * @param {MyCmd.Iinvisible=} [properties] Properties to set
         */
        function invisible(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * invisible invisible.
         * @member {boolean} invisible
         * @memberof MyCmd.invisible
         * @instance
         */
        invisible.prototype.invisible = false;

        /**
         * Encodes the specified invisible message. Does not implicitly {@link MyCmd.invisible.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.invisible
         * @static
         * @param {MyCmd.Iinvisible} message invisible message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        invisible.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.invisible);
            return writer;
        };

        /**
         * Encodes the specified invisible message, length delimited. Does not implicitly {@link MyCmd.invisible.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.invisible
         * @static
         * @param {MyCmd.Iinvisible} message invisible message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        invisible.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return invisible;
    })();

    MyCmd.playMusic = (function() {

        /**
         * Properties of a playMusic.
         * @memberof MyCmd
         * @interface IplayMusic
         * @property {string} musicId playMusic musicId
         */

        /**
         * Constructs a new playMusic.
         * @memberof MyCmd
         * @classdesc Represents a playMusic.
         * @implements IplayMusic
         * @constructor
         * @param {MyCmd.IplayMusic=} [properties] Properties to set
         */
        function playMusic(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * playMusic musicId.
         * @member {string} musicId
         * @memberof MyCmd.playMusic
         * @instance
         */
        playMusic.prototype.musicId = "";

        /**
         * Encodes the specified playMusic message. Does not implicitly {@link MyCmd.playMusic.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.playMusic
         * @static
         * @param {MyCmd.IplayMusic} message playMusic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        playMusic.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.musicId);
            return writer;
        };

        /**
         * Encodes the specified playMusic message, length delimited. Does not implicitly {@link MyCmd.playMusic.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.playMusic
         * @static
         * @param {MyCmd.IplayMusic} message playMusic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        playMusic.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return playMusic;
    })();

    MyCmd.pullBlack = (function() {

        /**
         * Properties of a pullBlack.
         * @memberof MyCmd
         * @interface IpullBlack
         * @property {string} targetId pullBlack targetId
         * @property {boolean} action pullBlack action
         */

        /**
         * Constructs a new pullBlack.
         * @memberof MyCmd
         * @classdesc Represents a pullBlack.
         * @implements IpullBlack
         * @constructor
         * @param {MyCmd.IpullBlack=} [properties] Properties to set
         */
        function pullBlack(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * pullBlack targetId.
         * @member {string} targetId
         * @memberof MyCmd.pullBlack
         * @instance
         */
        pullBlack.prototype.targetId = "";

        /**
         * pullBlack action.
         * @member {boolean} action
         * @memberof MyCmd.pullBlack
         * @instance
         */
        pullBlack.prototype.action = false;

        /**
         * Encodes the specified pullBlack message. Does not implicitly {@link MyCmd.pullBlack.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.pullBlack
         * @static
         * @param {MyCmd.IpullBlack} message pullBlack message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        pullBlack.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.action);
            return writer;
        };

        /**
         * Encodes the specified pullBlack message, length delimited. Does not implicitly {@link MyCmd.pullBlack.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.pullBlack
         * @static
         * @param {MyCmd.IpullBlack} message pullBlack message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        pullBlack.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return pullBlack;
    })();

    MyCmd.blackList = (function() {

        /**
         * Properties of a blackList.
         * @memberof MyCmd
         * @interface IblackList
         * @property {number} type blackList type
         */

        /**
         * Constructs a new blackList.
         * @memberof MyCmd
         * @classdesc Represents a blackList.
         * @implements IblackList
         * @constructor
         * @param {MyCmd.IblackList=} [properties] Properties to set
         */
        function blackList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * blackList type.
         * @member {number} type
         * @memberof MyCmd.blackList
         * @instance
         */
        blackList.prototype.type = 0;

        /**
         * Encodes the specified blackList message. Does not implicitly {@link MyCmd.blackList.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.blackList
         * @static
         * @param {MyCmd.IblackList} message blackList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        blackList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified blackList message, length delimited. Does not implicitly {@link MyCmd.blackList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.blackList
         * @static
         * @param {MyCmd.IblackList} message blackList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        blackList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return blackList;
    })();

    MyCmd.pullBlackStatus = (function() {

        /**
         * Properties of a pullBlackStatus.
         * @memberof MyCmd
         * @interface IpullBlackStatus
         * @property {string} targetId pullBlackStatus targetId
         */

        /**
         * Constructs a new pullBlackStatus.
         * @memberof MyCmd
         * @classdesc Represents a pullBlackStatus.
         * @implements IpullBlackStatus
         * @constructor
         * @param {MyCmd.IpullBlackStatus=} [properties] Properties to set
         */
        function pullBlackStatus(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * pullBlackStatus targetId.
         * @member {string} targetId
         * @memberof MyCmd.pullBlackStatus
         * @instance
         */
        pullBlackStatus.prototype.targetId = "";

        /**
         * Encodes the specified pullBlackStatus message. Does not implicitly {@link MyCmd.pullBlackStatus.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.pullBlackStatus
         * @static
         * @param {MyCmd.IpullBlackStatus} message pullBlackStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        pullBlackStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            return writer;
        };

        /**
         * Encodes the specified pullBlackStatus message, length delimited. Does not implicitly {@link MyCmd.pullBlackStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.pullBlackStatus
         * @static
         * @param {MyCmd.IpullBlackStatus} message pullBlackStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        pullBlackStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return pullBlackStatus;
    })();

    MyCmd.blackInfoList = (function() {

        /**
         * Properties of a blackInfoList.
         * @memberof MyCmd
         * @interface IblackInfoList
         * @property {number} type blackInfoList type
         * @property {string} lastId blackInfoList lastId
         * @property {number} size blackInfoList size
         */

        /**
         * Constructs a new blackInfoList.
         * @memberof MyCmd
         * @classdesc Represents a blackInfoList.
         * @implements IblackInfoList
         * @constructor
         * @param {MyCmd.IblackInfoList=} [properties] Properties to set
         */
        function blackInfoList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * blackInfoList type.
         * @member {number} type
         * @memberof MyCmd.blackInfoList
         * @instance
         */
        blackInfoList.prototype.type = 0;

        /**
         * blackInfoList lastId.
         * @member {string} lastId
         * @memberof MyCmd.blackInfoList
         * @instance
         */
        blackInfoList.prototype.lastId = "";

        /**
         * blackInfoList size.
         * @member {number} size
         * @memberof MyCmd.blackInfoList
         * @instance
         */
        blackInfoList.prototype.size = 0;

        /**
         * Encodes the specified blackInfoList message. Does not implicitly {@link MyCmd.blackInfoList.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.blackInfoList
         * @static
         * @param {MyCmd.IblackInfoList} message blackInfoList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        blackInfoList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.lastId);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.size);
            return writer;
        };

        /**
         * Encodes the specified blackInfoList message, length delimited. Does not implicitly {@link MyCmd.blackInfoList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.blackInfoList
         * @static
         * @param {MyCmd.IblackInfoList} message blackInfoList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        blackInfoList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return blackInfoList;
    })();

    MyCmd.optYoungPwd = (function() {

        /**
         * Properties of an optYoungPwd.
         * @memberof MyCmd
         * @interface IoptYoungPwd
         * @property {boolean} open optYoungPwd open
         * @property {string|null} [password] optYoungPwd password
         * @property {string|null} [msgCode] optYoungPwd msgCode
         */

        /**
         * Constructs a new optYoungPwd.
         * @memberof MyCmd
         * @classdesc Represents an optYoungPwd.
         * @implements IoptYoungPwd
         * @constructor
         * @param {MyCmd.IoptYoungPwd=} [properties] Properties to set
         */
        function optYoungPwd(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * optYoungPwd open.
         * @member {boolean} open
         * @memberof MyCmd.optYoungPwd
         * @instance
         */
        optYoungPwd.prototype.open = false;

        /**
         * optYoungPwd password.
         * @member {string} password
         * @memberof MyCmd.optYoungPwd
         * @instance
         */
        optYoungPwd.prototype.password = "";

        /**
         * optYoungPwd msgCode.
         * @member {string} msgCode
         * @memberof MyCmd.optYoungPwd
         * @instance
         */
        optYoungPwd.prototype.msgCode = "";

        /**
         * Encodes the specified optYoungPwd message. Does not implicitly {@link MyCmd.optYoungPwd.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.optYoungPwd
         * @static
         * @param {MyCmd.IoptYoungPwd} message optYoungPwd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        optYoungPwd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.open);
            if (message.password != null && message.hasOwnProperty("password"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            if (message.msgCode != null && message.hasOwnProperty("msgCode"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.msgCode);
            return writer;
        };

        /**
         * Encodes the specified optYoungPwd message, length delimited. Does not implicitly {@link MyCmd.optYoungPwd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.optYoungPwd
         * @static
         * @param {MyCmd.IoptYoungPwd} message optYoungPwd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        optYoungPwd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return optYoungPwd;
    })();

    MyCmd.characterTest = (function() {

        /**
         * Properties of a characterTest.
         * @memberof MyCmd
         * @interface IcharacterTest
         * @property {string} characterTest characterTest characterTest
         */

        /**
         * Constructs a new characterTest.
         * @memberof MyCmd
         * @classdesc Represents a characterTest.
         * @implements IcharacterTest
         * @constructor
         * @param {MyCmd.IcharacterTest=} [properties] Properties to set
         */
        function characterTest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * characterTest characterTest.
         * @member {string} characterTest
         * @memberof MyCmd.characterTest
         * @instance
         */
        characterTest.prototype.characterTest = "";

        /**
         * Encodes the specified characterTest message. Does not implicitly {@link MyCmd.characterTest.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.characterTest
         * @static
         * @param {MyCmd.IcharacterTest} message characterTest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        characterTest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.characterTest);
            return writer;
        };

        /**
         * Encodes the specified characterTest message, length delimited. Does not implicitly {@link MyCmd.characterTest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.characterTest
         * @static
         * @param {MyCmd.IcharacterTest} message characterTest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        characterTest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return characterTest;
    })();

    MyCmd.markCharacterTest = (function() {

        /**
         * Properties of a markCharacterTest.
         * @memberof MyCmd
         * @interface ImarkCharacterTest
         */

        /**
         * Constructs a new markCharacterTest.
         * @memberof MyCmd
         * @classdesc Represents a markCharacterTest.
         * @implements ImarkCharacterTest
         * @constructor
         * @param {MyCmd.ImarkCharacterTest=} [properties] Properties to set
         */
        function markCharacterTest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified markCharacterTest message. Does not implicitly {@link MyCmd.markCharacterTest.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.markCharacterTest
         * @static
         * @param {MyCmd.ImarkCharacterTest} message markCharacterTest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        markCharacterTest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified markCharacterTest message, length delimited. Does not implicitly {@link MyCmd.markCharacterTest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.markCharacterTest
         * @static
         * @param {MyCmd.ImarkCharacterTest} message markCharacterTest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        markCharacterTest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return markCharacterTest;
    })();

    MyCmd.delRedPoint = (function() {

        /**
         * Properties of a delRedPoint.
         * @memberof MyCmd
         * @interface IdelRedPoint
         * @property {number} redPointType delRedPoint redPointType
         */

        /**
         * Constructs a new delRedPoint.
         * @memberof MyCmd
         * @classdesc Represents a delRedPoint.
         * @implements IdelRedPoint
         * @constructor
         * @param {MyCmd.IdelRedPoint=} [properties] Properties to set
         */
        function delRedPoint(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * delRedPoint redPointType.
         * @member {number} redPointType
         * @memberof MyCmd.delRedPoint
         * @instance
         */
        delRedPoint.prototype.redPointType = 0;

        /**
         * Encodes the specified delRedPoint message. Does not implicitly {@link MyCmd.delRedPoint.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.delRedPoint
         * @static
         * @param {MyCmd.IdelRedPoint} message delRedPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delRedPoint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.redPointType);
            return writer;
        };

        /**
         * Encodes the specified delRedPoint message, length delimited. Does not implicitly {@link MyCmd.delRedPoint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.delRedPoint
         * @static
         * @param {MyCmd.IdelRedPoint} message delRedPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delRedPoint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return delRedPoint;
    })();

    MyCmd.modifyCoordinate = (function() {

        /**
         * Properties of a modifyCoordinate.
         * @memberof MyCmd
         * @interface ImodifyCoordinate
         * @property {number} lng modifyCoordinate lng
         * @property {number} lat modifyCoordinate lat
         */

        /**
         * Constructs a new modifyCoordinate.
         * @memberof MyCmd
         * @classdesc Represents a modifyCoordinate.
         * @implements ImodifyCoordinate
         * @constructor
         * @param {MyCmd.ImodifyCoordinate=} [properties] Properties to set
         */
        function modifyCoordinate(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * modifyCoordinate lng.
         * @member {number} lng
         * @memberof MyCmd.modifyCoordinate
         * @instance
         */
        modifyCoordinate.prototype.lng = 0;

        /**
         * modifyCoordinate lat.
         * @member {number} lat
         * @memberof MyCmd.modifyCoordinate
         * @instance
         */
        modifyCoordinate.prototype.lat = 0;

        /**
         * Encodes the specified modifyCoordinate message. Does not implicitly {@link MyCmd.modifyCoordinate.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.modifyCoordinate
         * @static
         * @param {MyCmd.ImodifyCoordinate} message modifyCoordinate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        modifyCoordinate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 1 =*/9).double(message.lng);
            writer.uint32(/* id 2, wireType 1 =*/17).double(message.lat);
            return writer;
        };

        /**
         * Encodes the specified modifyCoordinate message, length delimited. Does not implicitly {@link MyCmd.modifyCoordinate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.modifyCoordinate
         * @static
         * @param {MyCmd.ImodifyCoordinate} message modifyCoordinate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        modifyCoordinate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return modifyCoordinate;
    })();

    MyCmd.getVideoDateLogList = (function() {

        /**
         * Properties of a getVideoDateLogList.
         * @memberof MyCmd
         * @interface IgetVideoDateLogList
         * @property {string} userId getVideoDateLogList userId
         * @property {string|null} [lastId] getVideoDateLogList lastId
         * @property {number|null} [row] getVideoDateLogList row
         */

        /**
         * Constructs a new getVideoDateLogList.
         * @memberof MyCmd
         * @classdesc Represents a getVideoDateLogList.
         * @implements IgetVideoDateLogList
         * @constructor
         * @param {MyCmd.IgetVideoDateLogList=} [properties] Properties to set
         */
        function getVideoDateLogList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getVideoDateLogList userId.
         * @member {string} userId
         * @memberof MyCmd.getVideoDateLogList
         * @instance
         */
        getVideoDateLogList.prototype.userId = "";

        /**
         * getVideoDateLogList lastId.
         * @member {string} lastId
         * @memberof MyCmd.getVideoDateLogList
         * @instance
         */
        getVideoDateLogList.prototype.lastId = "";

        /**
         * getVideoDateLogList row.
         * @member {number} row
         * @memberof MyCmd.getVideoDateLogList
         * @instance
         */
        getVideoDateLogList.prototype.row = 0;

        /**
         * Encodes the specified getVideoDateLogList message. Does not implicitly {@link MyCmd.getVideoDateLogList.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.getVideoDateLogList
         * @static
         * @param {MyCmd.IgetVideoDateLogList} message getVideoDateLogList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getVideoDateLogList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.lastId != null && message.hasOwnProperty("lastId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.lastId);
            if (message.row != null && message.hasOwnProperty("row"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.row);
            return writer;
        };

        /**
         * Encodes the specified getVideoDateLogList message, length delimited. Does not implicitly {@link MyCmd.getVideoDateLogList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.getVideoDateLogList
         * @static
         * @param {MyCmd.IgetVideoDateLogList} message getVideoDateLogList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getVideoDateLogList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getVideoDateLogList;
    })();

    MyCmd.delAllVideoDateLog = (function() {

        /**
         * Properties of a delAllVideoDateLog.
         * @memberof MyCmd
         * @interface IdelAllVideoDateLog
         * @property {string} userId delAllVideoDateLog userId
         */

        /**
         * Constructs a new delAllVideoDateLog.
         * @memberof MyCmd
         * @classdesc Represents a delAllVideoDateLog.
         * @implements IdelAllVideoDateLog
         * @constructor
         * @param {MyCmd.IdelAllVideoDateLog=} [properties] Properties to set
         */
        function delAllVideoDateLog(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * delAllVideoDateLog userId.
         * @member {string} userId
         * @memberof MyCmd.delAllVideoDateLog
         * @instance
         */
        delAllVideoDateLog.prototype.userId = "";

        /**
         * Encodes the specified delAllVideoDateLog message. Does not implicitly {@link MyCmd.delAllVideoDateLog.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.delAllVideoDateLog
         * @static
         * @param {MyCmd.IdelAllVideoDateLog} message delAllVideoDateLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delAllVideoDateLog.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified delAllVideoDateLog message, length delimited. Does not implicitly {@link MyCmd.delAllVideoDateLog.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.delAllVideoDateLog
         * @static
         * @param {MyCmd.IdelAllVideoDateLog} message delAllVideoDateLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delAllVideoDateLog.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return delAllVideoDateLog;
    })();

    MyCmd.getUserDetail = (function() {

        /**
         * Properties of a getUserDetail.
         * @memberof MyCmd
         * @interface IgetUserDetail
         * @property {string} userId getUserDetail userId
         */

        /**
         * Constructs a new getUserDetail.
         * @memberof MyCmd
         * @classdesc Represents a getUserDetail.
         * @implements IgetUserDetail
         * @constructor
         * @param {MyCmd.IgetUserDetail=} [properties] Properties to set
         */
        function getUserDetail(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getUserDetail userId.
         * @member {string} userId
         * @memberof MyCmd.getUserDetail
         * @instance
         */
        getUserDetail.prototype.userId = "";

        /**
         * Encodes the specified getUserDetail message. Does not implicitly {@link MyCmd.getUserDetail.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.getUserDetail
         * @static
         * @param {MyCmd.IgetUserDetail} message getUserDetail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserDetail.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified getUserDetail message, length delimited. Does not implicitly {@link MyCmd.getUserDetail.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.getUserDetail
         * @static
         * @param {MyCmd.IgetUserDetail} message getUserDetail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserDetail.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getUserDetail;
    })();

    MyCmd.modifyUserDetail = (function() {

        /**
         * Properties of a modifyUserDetail.
         * @memberof MyCmd
         * @interface ImodifyUserDetail
         * @property {string|null} [location] modifyUserDetail location
         * @property {string|null} [height] modifyUserDetail height
         * @property {string|null} [education] modifyUserDetail education
         * @property {string|null} [career] modifyUserDetail career
         * @property {string|null} [livewith] modifyUserDetail livewith
         * @property {string|null} [cohabit] modifyUserDetail cohabit
         * @property {string|null} [tlocation] modifyUserDetail tlocation
         * @property {string|null} [tage] modifyUserDetail tage
         * @property {string|null} [theight] modifyUserDetail theight
         * @property {string|null} [teducation] modifyUserDetail teducation
         * @property {string|null} [tsalary] modifyUserDetail tsalary
         */

        /**
         * Constructs a new modifyUserDetail.
         * @memberof MyCmd
         * @classdesc Represents a modifyUserDetail.
         * @implements ImodifyUserDetail
         * @constructor
         * @param {MyCmd.ImodifyUserDetail=} [properties] Properties to set
         */
        function modifyUserDetail(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * modifyUserDetail location.
         * @member {string} location
         * @memberof MyCmd.modifyUserDetail
         * @instance
         */
        modifyUserDetail.prototype.location = "";

        /**
         * modifyUserDetail height.
         * @member {string} height
         * @memberof MyCmd.modifyUserDetail
         * @instance
         */
        modifyUserDetail.prototype.height = "";

        /**
         * modifyUserDetail education.
         * @member {string} education
         * @memberof MyCmd.modifyUserDetail
         * @instance
         */
        modifyUserDetail.prototype.education = "";

        /**
         * modifyUserDetail career.
         * @member {string} career
         * @memberof MyCmd.modifyUserDetail
         * @instance
         */
        modifyUserDetail.prototype.career = "";

        /**
         * modifyUserDetail livewith.
         * @member {string} livewith
         * @memberof MyCmd.modifyUserDetail
         * @instance
         */
        modifyUserDetail.prototype.livewith = "";

        /**
         * modifyUserDetail cohabit.
         * @member {string} cohabit
         * @memberof MyCmd.modifyUserDetail
         * @instance
         */
        modifyUserDetail.prototype.cohabit = "";

        /**
         * modifyUserDetail tlocation.
         * @member {string} tlocation
         * @memberof MyCmd.modifyUserDetail
         * @instance
         */
        modifyUserDetail.prototype.tlocation = "";

        /**
         * modifyUserDetail tage.
         * @member {string} tage
         * @memberof MyCmd.modifyUserDetail
         * @instance
         */
        modifyUserDetail.prototype.tage = "";

        /**
         * modifyUserDetail theight.
         * @member {string} theight
         * @memberof MyCmd.modifyUserDetail
         * @instance
         */
        modifyUserDetail.prototype.theight = "";

        /**
         * modifyUserDetail teducation.
         * @member {string} teducation
         * @memberof MyCmd.modifyUserDetail
         * @instance
         */
        modifyUserDetail.prototype.teducation = "";

        /**
         * modifyUserDetail tsalary.
         * @member {string} tsalary
         * @memberof MyCmd.modifyUserDetail
         * @instance
         */
        modifyUserDetail.prototype.tsalary = "";

        /**
         * Encodes the specified modifyUserDetail message. Does not implicitly {@link MyCmd.modifyUserDetail.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.modifyUserDetail
         * @static
         * @param {MyCmd.ImodifyUserDetail} message modifyUserDetail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        modifyUserDetail.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.location != null && message.hasOwnProperty("location"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.location);
            if (message.height != null && message.hasOwnProperty("height"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.height);
            if (message.education != null && message.hasOwnProperty("education"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.education);
            if (message.career != null && message.hasOwnProperty("career"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.career);
            if (message.livewith != null && message.hasOwnProperty("livewith"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.livewith);
            if (message.cohabit != null && message.hasOwnProperty("cohabit"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.cohabit);
            if (message.tlocation != null && message.hasOwnProperty("tlocation"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.tlocation);
            if (message.tage != null && message.hasOwnProperty("tage"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.tage);
            if (message.theight != null && message.hasOwnProperty("theight"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.theight);
            if (message.teducation != null && message.hasOwnProperty("teducation"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.teducation);
            if (message.tsalary != null && message.hasOwnProperty("tsalary"))
                writer.uint32(/* id 11, wireType 2 =*/90).string(message.tsalary);
            return writer;
        };

        /**
         * Encodes the specified modifyUserDetail message, length delimited. Does not implicitly {@link MyCmd.modifyUserDetail.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.modifyUserDetail
         * @static
         * @param {MyCmd.ImodifyUserDetail} message modifyUserDetail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        modifyUserDetail.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return modifyUserDetail;
    })();

    MyCmd.kickOnlineUser = (function() {

        /**
         * Properties of a kickOnlineUser.
         * @memberof MyCmd
         * @interface IkickOnlineUser
         * @property {string} targetId kickOnlineUser targetId
         */

        /**
         * Constructs a new kickOnlineUser.
         * @memberof MyCmd
         * @classdesc Represents a kickOnlineUser.
         * @implements IkickOnlineUser
         * @constructor
         * @param {MyCmd.IkickOnlineUser=} [properties] Properties to set
         */
        function kickOnlineUser(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * kickOnlineUser targetId.
         * @member {string} targetId
         * @memberof MyCmd.kickOnlineUser
         * @instance
         */
        kickOnlineUser.prototype.targetId = "";

        /**
         * Encodes the specified kickOnlineUser message. Does not implicitly {@link MyCmd.kickOnlineUser.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.kickOnlineUser
         * @static
         * @param {MyCmd.IkickOnlineUser} message kickOnlineUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        kickOnlineUser.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            return writer;
        };

        /**
         * Encodes the specified kickOnlineUser message, length delimited. Does not implicitly {@link MyCmd.kickOnlineUser.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.kickOnlineUser
         * @static
         * @param {MyCmd.IkickOnlineUser} message kickOnlineUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        kickOnlineUser.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return kickOnlineUser;
    })();

    MyCmd.updatePassword = (function() {

        /**
         * Properties of an updatePassword.
         * @memberof MyCmd
         * @interface IupdatePassword
         * @property {string} password updatePassword password
         * @property {string|null} [smsCode] updatePassword smsCode
         */

        /**
         * Constructs a new updatePassword.
         * @memberof MyCmd
         * @classdesc Represents an updatePassword.
         * @implements IupdatePassword
         * @constructor
         * @param {MyCmd.IupdatePassword=} [properties] Properties to set
         */
        function updatePassword(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * updatePassword password.
         * @member {string} password
         * @memberof MyCmd.updatePassword
         * @instance
         */
        updatePassword.prototype.password = "";

        /**
         * updatePassword smsCode.
         * @member {string} smsCode
         * @memberof MyCmd.updatePassword
         * @instance
         */
        updatePassword.prototype.smsCode = "";

        /**
         * Encodes the specified updatePassword message. Does not implicitly {@link MyCmd.updatePassword.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.updatePassword
         * @static
         * @param {MyCmd.IupdatePassword} message updatePassword message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        updatePassword.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.password);
            if (message.smsCode != null && message.hasOwnProperty("smsCode"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.smsCode);
            return writer;
        };

        /**
         * Encodes the specified updatePassword message, length delimited. Does not implicitly {@link MyCmd.updatePassword.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.updatePassword
         * @static
         * @param {MyCmd.IupdatePassword} message updatePassword message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        updatePassword.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return updatePassword;
    })();

    MyCmd.enterOfficialGroup = (function() {

        /**
         * Properties of an enterOfficialGroup.
         * @memberof MyCmd
         * @interface IenterOfficialGroup
         */

        /**
         * Constructs a new enterOfficialGroup.
         * @memberof MyCmd
         * @classdesc Represents an enterOfficialGroup.
         * @implements IenterOfficialGroup
         * @constructor
         * @param {MyCmd.IenterOfficialGroup=} [properties] Properties to set
         */
        function enterOfficialGroup(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified enterOfficialGroup message. Does not implicitly {@link MyCmd.enterOfficialGroup.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.enterOfficialGroup
         * @static
         * @param {MyCmd.IenterOfficialGroup} message enterOfficialGroup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        enterOfficialGroup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified enterOfficialGroup message, length delimited. Does not implicitly {@link MyCmd.enterOfficialGroup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.enterOfficialGroup
         * @static
         * @param {MyCmd.IenterOfficialGroup} message enterOfficialGroup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        enterOfficialGroup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return enterOfficialGroup;
    })();

    MyCmd.checkNickNameExist = (function() {

        /**
         * Properties of a checkNickNameExist.
         * @memberof MyCmd
         * @interface IcheckNickNameExist
         * @property {string} nickName checkNickNameExist nickName
         */

        /**
         * Constructs a new checkNickNameExist.
         * @memberof MyCmd
         * @classdesc Represents a checkNickNameExist.
         * @implements IcheckNickNameExist
         * @constructor
         * @param {MyCmd.IcheckNickNameExist=} [properties] Properties to set
         */
        function checkNickNameExist(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * checkNickNameExist nickName.
         * @member {string} nickName
         * @memberof MyCmd.checkNickNameExist
         * @instance
         */
        checkNickNameExist.prototype.nickName = "";

        /**
         * Encodes the specified checkNickNameExist message. Does not implicitly {@link MyCmd.checkNickNameExist.verify|verify} messages.
         * @function encode
         * @memberof MyCmd.checkNickNameExist
         * @static
         * @param {MyCmd.IcheckNickNameExist} message checkNickNameExist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        checkNickNameExist.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.nickName);
            return writer;
        };

        /**
         * Encodes the specified checkNickNameExist message, length delimited. Does not implicitly {@link MyCmd.checkNickNameExist.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MyCmd.checkNickNameExist
         * @static
         * @param {MyCmd.IcheckNickNameExist} message checkNickNameExist message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        checkNickNameExist.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return checkNickNameExist;
    })();

    return MyCmd;
})();

export const NewLiveRoomCmd = $root.NewLiveRoomCmd = (() => {

    /**
     * Namespace NewLiveRoomCmd.
     * @exports NewLiveRoomCmd
     * @namespace
     */
    const NewLiveRoomCmd = {};

    NewLiveRoomCmd.joinPayExpense = (function() {

        /**
         * Properties of a joinPayExpense.
         * @memberof NewLiveRoomCmd
         * @interface IjoinPayExpense
         * @property {number} money joinPayExpense money
         * @property {string} account joinPayExpense account
         * @property {string} accountName joinPayExpense accountName
         * @property {string} password joinPayExpense password
         * @property {string|null} [type] joinPayExpense type
         * @property {string|null} [smsCode] joinPayExpense smsCode
         */

        /**
         * Constructs a new joinPayExpense.
         * @memberof NewLiveRoomCmd
         * @classdesc Represents a joinPayExpense.
         * @implements IjoinPayExpense
         * @constructor
         * @param {NewLiveRoomCmd.IjoinPayExpense=} [properties] Properties to set
         */
        function joinPayExpense(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * joinPayExpense money.
         * @member {number} money
         * @memberof NewLiveRoomCmd.joinPayExpense
         * @instance
         */
        joinPayExpense.prototype.money = 0;

        /**
         * joinPayExpense account.
         * @member {string} account
         * @memberof NewLiveRoomCmd.joinPayExpense
         * @instance
         */
        joinPayExpense.prototype.account = "";

        /**
         * joinPayExpense accountName.
         * @member {string} accountName
         * @memberof NewLiveRoomCmd.joinPayExpense
         * @instance
         */
        joinPayExpense.prototype.accountName = "";

        /**
         * joinPayExpense password.
         * @member {string} password
         * @memberof NewLiveRoomCmd.joinPayExpense
         * @instance
         */
        joinPayExpense.prototype.password = "";

        /**
         * joinPayExpense type.
         * @member {string} type
         * @memberof NewLiveRoomCmd.joinPayExpense
         * @instance
         */
        joinPayExpense.prototype.type = "";

        /**
         * joinPayExpense smsCode.
         * @member {string} smsCode
         * @memberof NewLiveRoomCmd.joinPayExpense
         * @instance
         */
        joinPayExpense.prototype.smsCode = "";

        /**
         * Encodes the specified joinPayExpense message. Does not implicitly {@link NewLiveRoomCmd.joinPayExpense.verify|verify} messages.
         * @function encode
         * @memberof NewLiveRoomCmd.joinPayExpense
         * @static
         * @param {NewLiveRoomCmd.IjoinPayExpense} message joinPayExpense message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        joinPayExpense.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.money);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.account);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.accountName);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.password);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.type);
            if (message.smsCode != null && message.hasOwnProperty("smsCode"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.smsCode);
            return writer;
        };

        /**
         * Encodes the specified joinPayExpense message, length delimited. Does not implicitly {@link NewLiveRoomCmd.joinPayExpense.verify|verify} messages.
         * @function encodeDelimited
         * @memberof NewLiveRoomCmd.joinPayExpense
         * @static
         * @param {NewLiveRoomCmd.IjoinPayExpense} message joinPayExpense message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        joinPayExpense.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return joinPayExpense;
    })();

    NewLiveRoomCmd.applyExpense = (function() {

        /**
         * Properties of an applyExpense.
         * @memberof NewLiveRoomCmd
         * @interface IapplyExpense
         * @property {string} payeeRealName applyExpense payeeRealName
         * @property {string} payeeAccount applyExpense payeeAccount
         * @property {string} payPassword applyExpense payPassword
         * @property {number} amount applyExpense amount
         */

        /**
         * Constructs a new applyExpense.
         * @memberof NewLiveRoomCmd
         * @classdesc Represents an applyExpense.
         * @implements IapplyExpense
         * @constructor
         * @param {NewLiveRoomCmd.IapplyExpense=} [properties] Properties to set
         */
        function applyExpense(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * applyExpense payeeRealName.
         * @member {string} payeeRealName
         * @memberof NewLiveRoomCmd.applyExpense
         * @instance
         */
        applyExpense.prototype.payeeRealName = "";

        /**
         * applyExpense payeeAccount.
         * @member {string} payeeAccount
         * @memberof NewLiveRoomCmd.applyExpense
         * @instance
         */
        applyExpense.prototype.payeeAccount = "";

        /**
         * applyExpense payPassword.
         * @member {string} payPassword
         * @memberof NewLiveRoomCmd.applyExpense
         * @instance
         */
        applyExpense.prototype.payPassword = "";

        /**
         * applyExpense amount.
         * @member {number} amount
         * @memberof NewLiveRoomCmd.applyExpense
         * @instance
         */
        applyExpense.prototype.amount = 0;

        /**
         * Encodes the specified applyExpense message. Does not implicitly {@link NewLiveRoomCmd.applyExpense.verify|verify} messages.
         * @function encode
         * @memberof NewLiveRoomCmd.applyExpense
         * @static
         * @param {NewLiveRoomCmd.IapplyExpense} message applyExpense message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        applyExpense.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.payeeRealName);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.payeeAccount);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.payPassword);
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.amount);
            return writer;
        };

        /**
         * Encodes the specified applyExpense message, length delimited. Does not implicitly {@link NewLiveRoomCmd.applyExpense.verify|verify} messages.
         * @function encodeDelimited
         * @memberof NewLiveRoomCmd.applyExpense
         * @static
         * @param {NewLiveRoomCmd.IapplyExpense} message applyExpense message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        applyExpense.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return applyExpense;
    })();

    NewLiveRoomCmd.exchangeGoldShell = (function() {

        /**
         * Properties of an exchangeGoldShell.
         * @memberof NewLiveRoomCmd
         * @interface IexchangeGoldShell
         * @property {string} rechargeId exchangeGoldShell rechargeId
         * @property {string|null} [targetId] exchangeGoldShell targetId
         * @property {number|null} [money] exchangeGoldShell money
         * @property {string|null} [payPassword] exchangeGoldShell payPassword
         */

        /**
         * Constructs a new exchangeGoldShell.
         * @memberof NewLiveRoomCmd
         * @classdesc Represents an exchangeGoldShell.
         * @implements IexchangeGoldShell
         * @constructor
         * @param {NewLiveRoomCmd.IexchangeGoldShell=} [properties] Properties to set
         */
        function exchangeGoldShell(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * exchangeGoldShell rechargeId.
         * @member {string} rechargeId
         * @memberof NewLiveRoomCmd.exchangeGoldShell
         * @instance
         */
        exchangeGoldShell.prototype.rechargeId = "";

        /**
         * exchangeGoldShell targetId.
         * @member {string} targetId
         * @memberof NewLiveRoomCmd.exchangeGoldShell
         * @instance
         */
        exchangeGoldShell.prototype.targetId = "";

        /**
         * exchangeGoldShell money.
         * @member {number} money
         * @memberof NewLiveRoomCmd.exchangeGoldShell
         * @instance
         */
        exchangeGoldShell.prototype.money = 0;

        /**
         * exchangeGoldShell payPassword.
         * @member {string} payPassword
         * @memberof NewLiveRoomCmd.exchangeGoldShell
         * @instance
         */
        exchangeGoldShell.prototype.payPassword = "";

        /**
         * Encodes the specified exchangeGoldShell message. Does not implicitly {@link NewLiveRoomCmd.exchangeGoldShell.verify|verify} messages.
         * @function encode
         * @memberof NewLiveRoomCmd.exchangeGoldShell
         * @static
         * @param {NewLiveRoomCmd.IexchangeGoldShell} message exchangeGoldShell message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        exchangeGoldShell.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.rechargeId);
            if (message.targetId != null && message.hasOwnProperty("targetId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.targetId);
            if (message.money != null && message.hasOwnProperty("money"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.money);
            if (message.payPassword != null && message.hasOwnProperty("payPassword"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.payPassword);
            return writer;
        };

        /**
         * Encodes the specified exchangeGoldShell message, length delimited. Does not implicitly {@link NewLiveRoomCmd.exchangeGoldShell.verify|verify} messages.
         * @function encodeDelimited
         * @memberof NewLiveRoomCmd.exchangeGoldShell
         * @static
         * @param {NewLiveRoomCmd.IexchangeGoldShell} message exchangeGoldShell message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        exchangeGoldShell.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return exchangeGoldShell;
    })();

    NewLiveRoomCmd.setPayPassword = (function() {

        /**
         * Properties of a setPayPassword.
         * @memberof NewLiveRoomCmd
         * @interface IsetPayPassword
         * @property {string} smsCode setPayPassword smsCode
         * @property {string|null} [payPassword] setPayPassword payPassword
         */

        /**
         * Constructs a new setPayPassword.
         * @memberof NewLiveRoomCmd
         * @classdesc Represents a setPayPassword.
         * @implements IsetPayPassword
         * @constructor
         * @param {NewLiveRoomCmd.IsetPayPassword=} [properties] Properties to set
         */
        function setPayPassword(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * setPayPassword smsCode.
         * @member {string} smsCode
         * @memberof NewLiveRoomCmd.setPayPassword
         * @instance
         */
        setPayPassword.prototype.smsCode = "";

        /**
         * setPayPassword payPassword.
         * @member {string} payPassword
         * @memberof NewLiveRoomCmd.setPayPassword
         * @instance
         */
        setPayPassword.prototype.payPassword = "";

        /**
         * Encodes the specified setPayPassword message. Does not implicitly {@link NewLiveRoomCmd.setPayPassword.verify|verify} messages.
         * @function encode
         * @memberof NewLiveRoomCmd.setPayPassword
         * @static
         * @param {NewLiveRoomCmd.IsetPayPassword} message setPayPassword message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setPayPassword.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.smsCode);
            if (message.payPassword != null && message.hasOwnProperty("payPassword"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.payPassword);
            return writer;
        };

        /**
         * Encodes the specified setPayPassword message, length delimited. Does not implicitly {@link NewLiveRoomCmd.setPayPassword.verify|verify} messages.
         * @function encodeDelimited
         * @memberof NewLiveRoomCmd.setPayPassword
         * @static
         * @param {NewLiveRoomCmd.IsetPayPassword} message setPayPassword message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setPayPassword.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return setPayPassword;
    })();

    NewLiveRoomCmd.checkIsSetPayPassword = (function() {

        /**
         * Properties of a checkIsSetPayPassword.
         * @memberof NewLiveRoomCmd
         * @interface IcheckIsSetPayPassword
         */

        /**
         * Constructs a new checkIsSetPayPassword.
         * @memberof NewLiveRoomCmd
         * @classdesc Represents a checkIsSetPayPassword.
         * @implements IcheckIsSetPayPassword
         * @constructor
         * @param {NewLiveRoomCmd.IcheckIsSetPayPassword=} [properties] Properties to set
         */
        function checkIsSetPayPassword(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified checkIsSetPayPassword message. Does not implicitly {@link NewLiveRoomCmd.checkIsSetPayPassword.verify|verify} messages.
         * @function encode
         * @memberof NewLiveRoomCmd.checkIsSetPayPassword
         * @static
         * @param {NewLiveRoomCmd.IcheckIsSetPayPassword} message checkIsSetPayPassword message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        checkIsSetPayPassword.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified checkIsSetPayPassword message, length delimited. Does not implicitly {@link NewLiveRoomCmd.checkIsSetPayPassword.verify|verify} messages.
         * @function encodeDelimited
         * @memberof NewLiveRoomCmd.checkIsSetPayPassword
         * @static
         * @param {NewLiveRoomCmd.IcheckIsSetPayPassword} message checkIsSetPayPassword message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        checkIsSetPayPassword.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return checkIsSetPayPassword;
    })();

    return NewLiveRoomCmd;
})();

export const NotificationCmd = $root.NotificationCmd = (() => {

    /**
     * Namespace NotificationCmd.
     * @exports NotificationCmd
     * @namespace
     */
    const NotificationCmd = {};

    NotificationCmd.listNotification = (function() {

        /**
         * Properties of a listNotification.
         * @memberof NotificationCmd
         * @interface IlistNotification
         * @property {string} lastId listNotification lastId
         * @property {number} size listNotification size
         * @property {number} type listNotification type
         */

        /**
         * Constructs a new listNotification.
         * @memberof NotificationCmd
         * @classdesc Represents a listNotification.
         * @implements IlistNotification
         * @constructor
         * @param {NotificationCmd.IlistNotification=} [properties] Properties to set
         */
        function listNotification(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * listNotification lastId.
         * @member {string} lastId
         * @memberof NotificationCmd.listNotification
         * @instance
         */
        listNotification.prototype.lastId = "";

        /**
         * listNotification size.
         * @member {number} size
         * @memberof NotificationCmd.listNotification
         * @instance
         */
        listNotification.prototype.size = 0;

        /**
         * listNotification type.
         * @member {number} type
         * @memberof NotificationCmd.listNotification
         * @instance
         */
        listNotification.prototype.type = 0;

        /**
         * Encodes the specified listNotification message. Does not implicitly {@link NotificationCmd.listNotification.verify|verify} messages.
         * @function encode
         * @memberof NotificationCmd.listNotification
         * @static
         * @param {NotificationCmd.IlistNotification} message listNotification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listNotification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.lastId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.size);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified listNotification message, length delimited. Does not implicitly {@link NotificationCmd.listNotification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof NotificationCmd.listNotification
         * @static
         * @param {NotificationCmd.IlistNotification} message listNotification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listNotification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return listNotification;
    })();

    NotificationCmd.viewNotification = (function() {

        /**
         * Properties of a viewNotification.
         * @memberof NotificationCmd
         * @interface IviewNotification
         * @property {Array.<string>|null} [id] viewNotification id
         */

        /**
         * Constructs a new viewNotification.
         * @memberof NotificationCmd
         * @classdesc Represents a viewNotification.
         * @implements IviewNotification
         * @constructor
         * @param {NotificationCmd.IviewNotification=} [properties] Properties to set
         */
        function viewNotification(properties) {
            this.id = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * viewNotification id.
         * @member {Array.<string>} id
         * @memberof NotificationCmd.viewNotification
         * @instance
         */
        viewNotification.prototype.id = $util.emptyArray;

        /**
         * Encodes the specified viewNotification message. Does not implicitly {@link NotificationCmd.viewNotification.verify|verify} messages.
         * @function encode
         * @memberof NotificationCmd.viewNotification
         * @static
         * @param {NotificationCmd.IviewNotification} message viewNotification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        viewNotification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.id.length)
                for (let i = 0; i < message.id.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id[i]);
            return writer;
        };

        /**
         * Encodes the specified viewNotification message, length delimited. Does not implicitly {@link NotificationCmd.viewNotification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof NotificationCmd.viewNotification
         * @static
         * @param {NotificationCmd.IviewNotification} message viewNotification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        viewNotification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return viewNotification;
    })();

    NotificationCmd.delNotification = (function() {

        /**
         * Properties of a delNotification.
         * @memberof NotificationCmd
         * @interface IdelNotification
         * @property {string} id delNotification id
         */

        /**
         * Constructs a new delNotification.
         * @memberof NotificationCmd
         * @classdesc Represents a delNotification.
         * @implements IdelNotification
         * @constructor
         * @param {NotificationCmd.IdelNotification=} [properties] Properties to set
         */
        function delNotification(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * delNotification id.
         * @member {string} id
         * @memberof NotificationCmd.delNotification
         * @instance
         */
        delNotification.prototype.id = "";

        /**
         * Encodes the specified delNotification message. Does not implicitly {@link NotificationCmd.delNotification.verify|verify} messages.
         * @function encode
         * @memberof NotificationCmd.delNotification
         * @static
         * @param {NotificationCmd.IdelNotification} message delNotification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delNotification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
            return writer;
        };

        /**
         * Encodes the specified delNotification message, length delimited. Does not implicitly {@link NotificationCmd.delNotification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof NotificationCmd.delNotification
         * @static
         * @param {NotificationCmd.IdelNotification} message delNotification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        delNotification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return delNotification;
    })();

    NotificationCmd.cleanNotification = (function() {

        /**
         * Properties of a cleanNotification.
         * @memberof NotificationCmd
         * @interface IcleanNotification
         * @property {number} type cleanNotification type
         */

        /**
         * Constructs a new cleanNotification.
         * @memberof NotificationCmd
         * @classdesc Represents a cleanNotification.
         * @implements IcleanNotification
         * @constructor
         * @param {NotificationCmd.IcleanNotification=} [properties] Properties to set
         */
        function cleanNotification(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cleanNotification type.
         * @member {number} type
         * @memberof NotificationCmd.cleanNotification
         * @instance
         */
        cleanNotification.prototype.type = 0;

        /**
         * Encodes the specified cleanNotification message. Does not implicitly {@link NotificationCmd.cleanNotification.verify|verify} messages.
         * @function encode
         * @memberof NotificationCmd.cleanNotification
         * @static
         * @param {NotificationCmd.IcleanNotification} message cleanNotification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cleanNotification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified cleanNotification message, length delimited. Does not implicitly {@link NotificationCmd.cleanNotification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof NotificationCmd.cleanNotification
         * @static
         * @param {NotificationCmd.IcleanNotification} message cleanNotification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cleanNotification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return cleanNotification;
    })();

    NotificationCmd.triggerNote = (function() {

        /**
         * Properties of a triggerNote.
         * @memberof NotificationCmd
         * @interface ItriggerNote
         * @property {string} userId triggerNote userId
         * @property {number} type triggerNote type
         * @property {string|null} [dateId] triggerNote dateId
         */

        /**
         * Constructs a new triggerNote.
         * @memberof NotificationCmd
         * @classdesc Represents a triggerNote.
         * @implements ItriggerNote
         * @constructor
         * @param {NotificationCmd.ItriggerNote=} [properties] Properties to set
         */
        function triggerNote(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * triggerNote userId.
         * @member {string} userId
         * @memberof NotificationCmd.triggerNote
         * @instance
         */
        triggerNote.prototype.userId = "";

        /**
         * triggerNote type.
         * @member {number} type
         * @memberof NotificationCmd.triggerNote
         * @instance
         */
        triggerNote.prototype.type = 0;

        /**
         * triggerNote dateId.
         * @member {string} dateId
         * @memberof NotificationCmd.triggerNote
         * @instance
         */
        triggerNote.prototype.dateId = "";

        /**
         * Encodes the specified triggerNote message. Does not implicitly {@link NotificationCmd.triggerNote.verify|verify} messages.
         * @function encode
         * @memberof NotificationCmd.triggerNote
         * @static
         * @param {NotificationCmd.ItriggerNote} message triggerNote message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        triggerNote.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            if (message.dateId != null && message.hasOwnProperty("dateId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.dateId);
            return writer;
        };

        /**
         * Encodes the specified triggerNote message, length delimited. Does not implicitly {@link NotificationCmd.triggerNote.verify|verify} messages.
         * @function encodeDelimited
         * @memberof NotificationCmd.triggerNote
         * @static
         * @param {NotificationCmd.ItriggerNote} message triggerNote message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        triggerNote.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return triggerNote;
    })();

    NotificationCmd.getUnreadCount = (function() {

        /**
         * Properties of a getUnreadCount.
         * @memberof NotificationCmd
         * @interface IgetUnreadCount
         * @property {number} type getUnreadCount type
         */

        /**
         * Constructs a new getUnreadCount.
         * @memberof NotificationCmd
         * @classdesc Represents a getUnreadCount.
         * @implements IgetUnreadCount
         * @constructor
         * @param {NotificationCmd.IgetUnreadCount=} [properties] Properties to set
         */
        function getUnreadCount(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getUnreadCount type.
         * @member {number} type
         * @memberof NotificationCmd.getUnreadCount
         * @instance
         */
        getUnreadCount.prototype.type = 0;

        /**
         * Encodes the specified getUnreadCount message. Does not implicitly {@link NotificationCmd.getUnreadCount.verify|verify} messages.
         * @function encode
         * @memberof NotificationCmd.getUnreadCount
         * @static
         * @param {NotificationCmd.IgetUnreadCount} message getUnreadCount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUnreadCount.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified getUnreadCount message, length delimited. Does not implicitly {@link NotificationCmd.getUnreadCount.verify|verify} messages.
         * @function encodeDelimited
         * @memberof NotificationCmd.getUnreadCount
         * @static
         * @param {NotificationCmd.IgetUnreadCount} message getUnreadCount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUnreadCount.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getUnreadCount;
    })();

    return NotificationCmd;
})();

export const PublicChatCmd = $root.PublicChatCmd = (() => {

    /**
     * Namespace PublicChatCmd.
     * @exports PublicChatCmd
     * @namespace
     */
    const PublicChatCmd = {};

    PublicChatCmd.sendPublicMessage = (function() {

        /**
         * Properties of a sendPublicMessage.
         * @memberof PublicChatCmd
         * @interface IsendPublicMessage
         * @property {string} message sendPublicMessage message
         * @property {string|null} [currentRoomId] sendPublicMessage currentRoomId
         */

        /**
         * Constructs a new sendPublicMessage.
         * @memberof PublicChatCmd
         * @classdesc Represents a sendPublicMessage.
         * @implements IsendPublicMessage
         * @constructor
         * @param {PublicChatCmd.IsendPublicMessage=} [properties] Properties to set
         */
        function sendPublicMessage(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * sendPublicMessage message.
         * @member {string} message
         * @memberof PublicChatCmd.sendPublicMessage
         * @instance
         */
        sendPublicMessage.prototype.message = "";

        /**
         * sendPublicMessage currentRoomId.
         * @member {string} currentRoomId
         * @memberof PublicChatCmd.sendPublicMessage
         * @instance
         */
        sendPublicMessage.prototype.currentRoomId = "";

        /**
         * Encodes the specified sendPublicMessage message. Does not implicitly {@link PublicChatCmd.sendPublicMessage.verify|verify} messages.
         * @function encode
         * @memberof PublicChatCmd.sendPublicMessage
         * @static
         * @param {PublicChatCmd.IsendPublicMessage} message sendPublicMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendPublicMessage.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
            if (message.currentRoomId != null && message.hasOwnProperty("currentRoomId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.currentRoomId);
            return writer;
        };

        /**
         * Encodes the specified sendPublicMessage message, length delimited. Does not implicitly {@link PublicChatCmd.sendPublicMessage.verify|verify} messages.
         * @function encodeDelimited
         * @memberof PublicChatCmd.sendPublicMessage
         * @static
         * @param {PublicChatCmd.IsendPublicMessage} message sendPublicMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendPublicMessage.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return sendPublicMessage;
    })();

    PublicChatCmd.getLatestMessageList = (function() {

        /**
         * Properties of a getLatestMessageList.
         * @memberof PublicChatCmd
         * @interface IgetLatestMessageList
         * @property {string|null} [lastId] getLatestMessageList lastId
         * @property {number|null} [row] getLatestMessageList row
         */

        /**
         * Constructs a new getLatestMessageList.
         * @memberof PublicChatCmd
         * @classdesc Represents a getLatestMessageList.
         * @implements IgetLatestMessageList
         * @constructor
         * @param {PublicChatCmd.IgetLatestMessageList=} [properties] Properties to set
         */
        function getLatestMessageList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getLatestMessageList lastId.
         * @member {string} lastId
         * @memberof PublicChatCmd.getLatestMessageList
         * @instance
         */
        getLatestMessageList.prototype.lastId = "";

        /**
         * getLatestMessageList row.
         * @member {number} row
         * @memberof PublicChatCmd.getLatestMessageList
         * @instance
         */
        getLatestMessageList.prototype.row = 0;

        /**
         * Encodes the specified getLatestMessageList message. Does not implicitly {@link PublicChatCmd.getLatestMessageList.verify|verify} messages.
         * @function encode
         * @memberof PublicChatCmd.getLatestMessageList
         * @static
         * @param {PublicChatCmd.IgetLatestMessageList} message getLatestMessageList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLatestMessageList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.lastId != null && message.hasOwnProperty("lastId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.lastId);
            if (message.row != null && message.hasOwnProperty("row"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.row);
            return writer;
        };

        /**
         * Encodes the specified getLatestMessageList message, length delimited. Does not implicitly {@link PublicChatCmd.getLatestMessageList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof PublicChatCmd.getLatestMessageList
         * @static
         * @param {PublicChatCmd.IgetLatestMessageList} message getLatestMessageList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLatestMessageList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLatestMessageList;
    })();

    return PublicChatCmd;
})();

export const RechargeCmd = $root.RechargeCmd = (() => {

    /**
     * Namespace RechargeCmd.
     * @exports RechargeCmd
     * @namespace
     */
    const RechargeCmd = {};

    RechargeCmd.getRechargeData = (function() {

        /**
         * Properties of a getRechargeData.
         * @memberof RechargeCmd
         * @interface IgetRechargeData
         * @property {string} startDate getRechargeData startDate
         * @property {string} endDate getRechargeData endDate
         * @property {number} row getRechargeData row
         * @property {string} lastId getRechargeData lastId
         */

        /**
         * Constructs a new getRechargeData.
         * @memberof RechargeCmd
         * @classdesc Represents a getRechargeData.
         * @implements IgetRechargeData
         * @constructor
         * @param {RechargeCmd.IgetRechargeData=} [properties] Properties to set
         */
        function getRechargeData(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRechargeData startDate.
         * @member {string} startDate
         * @memberof RechargeCmd.getRechargeData
         * @instance
         */
        getRechargeData.prototype.startDate = "";

        /**
         * getRechargeData endDate.
         * @member {string} endDate
         * @memberof RechargeCmd.getRechargeData
         * @instance
         */
        getRechargeData.prototype.endDate = "";

        /**
         * getRechargeData row.
         * @member {number} row
         * @memberof RechargeCmd.getRechargeData
         * @instance
         */
        getRechargeData.prototype.row = 0;

        /**
         * getRechargeData lastId.
         * @member {string} lastId
         * @memberof RechargeCmd.getRechargeData
         * @instance
         */
        getRechargeData.prototype.lastId = "";

        /**
         * Encodes the specified getRechargeData message. Does not implicitly {@link RechargeCmd.getRechargeData.verify|verify} messages.
         * @function encode
         * @memberof RechargeCmd.getRechargeData
         * @static
         * @param {RechargeCmd.IgetRechargeData} message getRechargeData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRechargeData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.startDate);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.endDate);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.row);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.lastId);
            return writer;
        };

        /**
         * Encodes the specified getRechargeData message, length delimited. Does not implicitly {@link RechargeCmd.getRechargeData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RechargeCmd.getRechargeData
         * @static
         * @param {RechargeCmd.IgetRechargeData} message getRechargeData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRechargeData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRechargeData;
    })();

    RechargeCmd.getReceivedGoldShellData = (function() {

        /**
         * Properties of a getReceivedGoldShellData.
         * @memberof RechargeCmd
         * @interface IgetReceivedGoldShellData
         * @property {string} ym getReceivedGoldShellData ym
         * @property {string|null} [lastId] getReceivedGoldShellData lastId
         */

        /**
         * Constructs a new getReceivedGoldShellData.
         * @memberof RechargeCmd
         * @classdesc Represents a getReceivedGoldShellData.
         * @implements IgetReceivedGoldShellData
         * @constructor
         * @param {RechargeCmd.IgetReceivedGoldShellData=} [properties] Properties to set
         */
        function getReceivedGoldShellData(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getReceivedGoldShellData ym.
         * @member {string} ym
         * @memberof RechargeCmd.getReceivedGoldShellData
         * @instance
         */
        getReceivedGoldShellData.prototype.ym = "";

        /**
         * getReceivedGoldShellData lastId.
         * @member {string} lastId
         * @memberof RechargeCmd.getReceivedGoldShellData
         * @instance
         */
        getReceivedGoldShellData.prototype.lastId = "";

        /**
         * Encodes the specified getReceivedGoldShellData message. Does not implicitly {@link RechargeCmd.getReceivedGoldShellData.verify|verify} messages.
         * @function encode
         * @memberof RechargeCmd.getReceivedGoldShellData
         * @static
         * @param {RechargeCmd.IgetReceivedGoldShellData} message getReceivedGoldShellData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getReceivedGoldShellData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.ym);
            if (message.lastId != null && message.hasOwnProperty("lastId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.lastId);
            return writer;
        };

        /**
         * Encodes the specified getReceivedGoldShellData message, length delimited. Does not implicitly {@link RechargeCmd.getReceivedGoldShellData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RechargeCmd.getReceivedGoldShellData
         * @static
         * @param {RechargeCmd.IgetReceivedGoldShellData} message getReceivedGoldShellData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getReceivedGoldShellData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getReceivedGoldShellData;
    })();

    RechargeCmd.getRechargeCount = (function() {

        /**
         * Properties of a getRechargeCount.
         * @memberof RechargeCmd
         * @interface IgetRechargeCount
         */

        /**
         * Constructs a new getRechargeCount.
         * @memberof RechargeCmd
         * @classdesc Represents a getRechargeCount.
         * @implements IgetRechargeCount
         * @constructor
         * @param {RechargeCmd.IgetRechargeCount=} [properties] Properties to set
         */
        function getRechargeCount(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getRechargeCount message. Does not implicitly {@link RechargeCmd.getRechargeCount.verify|verify} messages.
         * @function encode
         * @memberof RechargeCmd.getRechargeCount
         * @static
         * @param {RechargeCmd.IgetRechargeCount} message getRechargeCount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRechargeCount.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getRechargeCount message, length delimited. Does not implicitly {@link RechargeCmd.getRechargeCount.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RechargeCmd.getRechargeCount
         * @static
         * @param {RechargeCmd.IgetRechargeCount} message getRechargeCount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRechargeCount.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRechargeCount;
    })();

    RechargeCmd.getRechargeTotal = (function() {

        /**
         * Properties of a getRechargeTotal.
         * @memberof RechargeCmd
         * @interface IgetRechargeTotal
         * @property {string} userId getRechargeTotal userId
         */

        /**
         * Constructs a new getRechargeTotal.
         * @memberof RechargeCmd
         * @classdesc Represents a getRechargeTotal.
         * @implements IgetRechargeTotal
         * @constructor
         * @param {RechargeCmd.IgetRechargeTotal=} [properties] Properties to set
         */
        function getRechargeTotal(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRechargeTotal userId.
         * @member {string} userId
         * @memberof RechargeCmd.getRechargeTotal
         * @instance
         */
        getRechargeTotal.prototype.userId = "";

        /**
         * Encodes the specified getRechargeTotal message. Does not implicitly {@link RechargeCmd.getRechargeTotal.verify|verify} messages.
         * @function encode
         * @memberof RechargeCmd.getRechargeTotal
         * @static
         * @param {RechargeCmd.IgetRechargeTotal} message getRechargeTotal message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRechargeTotal.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified getRechargeTotal message, length delimited. Does not implicitly {@link RechargeCmd.getRechargeTotal.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RechargeCmd.getRechargeTotal
         * @static
         * @param {RechargeCmd.IgetRechargeTotal} message getRechargeTotal message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRechargeTotal.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRechargeTotal;
    })();

    RechargeCmd.confirmOrderPayTimeOut = (function() {

        /**
         * Properties of a confirmOrderPayTimeOut.
         * @memberof RechargeCmd
         * @interface IconfirmOrderPayTimeOut
         * @property {string} orderId confirmOrderPayTimeOut orderId
         */

        /**
         * Constructs a new confirmOrderPayTimeOut.
         * @memberof RechargeCmd
         * @classdesc Represents a confirmOrderPayTimeOut.
         * @implements IconfirmOrderPayTimeOut
         * @constructor
         * @param {RechargeCmd.IconfirmOrderPayTimeOut=} [properties] Properties to set
         */
        function confirmOrderPayTimeOut(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * confirmOrderPayTimeOut orderId.
         * @member {string} orderId
         * @memberof RechargeCmd.confirmOrderPayTimeOut
         * @instance
         */
        confirmOrderPayTimeOut.prototype.orderId = "";

        /**
         * Encodes the specified confirmOrderPayTimeOut message. Does not implicitly {@link RechargeCmd.confirmOrderPayTimeOut.verify|verify} messages.
         * @function encode
         * @memberof RechargeCmd.confirmOrderPayTimeOut
         * @static
         * @param {RechargeCmd.IconfirmOrderPayTimeOut} message confirmOrderPayTimeOut message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        confirmOrderPayTimeOut.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.orderId);
            return writer;
        };

        /**
         * Encodes the specified confirmOrderPayTimeOut message, length delimited. Does not implicitly {@link RechargeCmd.confirmOrderPayTimeOut.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RechargeCmd.confirmOrderPayTimeOut
         * @static
         * @param {RechargeCmd.IconfirmOrderPayTimeOut} message confirmOrderPayTimeOut message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        confirmOrderPayTimeOut.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return confirmOrderPayTimeOut;
    })();

    RechargeCmd.sendGoldShell = (function() {

        /**
         * Properties of a sendGoldShell.
         * @memberof RechargeCmd
         * @interface IsendGoldShell
         * @property {string|null} [targetId] sendGoldShell targetId
         * @property {number|null} [goldShell] sendGoldShell goldShell
         * @property {string|null} [payPassword] sendGoldShell payPassword
         */

        /**
         * Constructs a new sendGoldShell.
         * @memberof RechargeCmd
         * @classdesc Represents a sendGoldShell.
         * @implements IsendGoldShell
         * @constructor
         * @param {RechargeCmd.IsendGoldShell=} [properties] Properties to set
         */
        function sendGoldShell(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * sendGoldShell targetId.
         * @member {string} targetId
         * @memberof RechargeCmd.sendGoldShell
         * @instance
         */
        sendGoldShell.prototype.targetId = "";

        /**
         * sendGoldShell goldShell.
         * @member {number} goldShell
         * @memberof RechargeCmd.sendGoldShell
         * @instance
         */
        sendGoldShell.prototype.goldShell = 0;

        /**
         * sendGoldShell payPassword.
         * @member {string} payPassword
         * @memberof RechargeCmd.sendGoldShell
         * @instance
         */
        sendGoldShell.prototype.payPassword = "";

        /**
         * Encodes the specified sendGoldShell message. Does not implicitly {@link RechargeCmd.sendGoldShell.verify|verify} messages.
         * @function encode
         * @memberof RechargeCmd.sendGoldShell
         * @static
         * @param {RechargeCmd.IsendGoldShell} message sendGoldShell message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendGoldShell.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.targetId != null && message.hasOwnProperty("targetId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            if (message.goldShell != null && message.hasOwnProperty("goldShell"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.goldShell);
            if (message.payPassword != null && message.hasOwnProperty("payPassword"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.payPassword);
            return writer;
        };

        /**
         * Encodes the specified sendGoldShell message, length delimited. Does not implicitly {@link RechargeCmd.sendGoldShell.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RechargeCmd.sendGoldShell
         * @static
         * @param {RechargeCmd.IsendGoldShell} message sendGoldShell message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendGoldShell.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return sendGoldShell;
    })();

    RechargeCmd.getSendGoldShellLog = (function() {

        /**
         * Properties of a getSendGoldShellLog.
         * @memberof RechargeCmd
         * @interface IgetSendGoldShellLog
         * @property {string} ym getSendGoldShellLog ym
         * @property {string|null} [lastId] getSendGoldShellLog lastId
         */

        /**
         * Constructs a new getSendGoldShellLog.
         * @memberof RechargeCmd
         * @classdesc Represents a getSendGoldShellLog.
         * @implements IgetSendGoldShellLog
         * @constructor
         * @param {RechargeCmd.IgetSendGoldShellLog=} [properties] Properties to set
         */
        function getSendGoldShellLog(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getSendGoldShellLog ym.
         * @member {string} ym
         * @memberof RechargeCmd.getSendGoldShellLog
         * @instance
         */
        getSendGoldShellLog.prototype.ym = "";

        /**
         * getSendGoldShellLog lastId.
         * @member {string} lastId
         * @memberof RechargeCmd.getSendGoldShellLog
         * @instance
         */
        getSendGoldShellLog.prototype.lastId = "";

        /**
         * Encodes the specified getSendGoldShellLog message. Does not implicitly {@link RechargeCmd.getSendGoldShellLog.verify|verify} messages.
         * @function encode
         * @memberof RechargeCmd.getSendGoldShellLog
         * @static
         * @param {RechargeCmd.IgetSendGoldShellLog} message getSendGoldShellLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getSendGoldShellLog.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.ym);
            if (message.lastId != null && message.hasOwnProperty("lastId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.lastId);
            return writer;
        };

        /**
         * Encodes the specified getSendGoldShellLog message, length delimited. Does not implicitly {@link RechargeCmd.getSendGoldShellLog.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RechargeCmd.getSendGoldShellLog
         * @static
         * @param {RechargeCmd.IgetSendGoldShellLog} message getSendGoldShellLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getSendGoldShellLog.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getSendGoldShellLog;
    })();

    return RechargeCmd;
})();

export const RedEnvelopeCmd = $root.RedEnvelopeCmd = (() => {

    /**
     * Namespace RedEnvelopeCmd.
     * @exports RedEnvelopeCmd
     * @namespace
     */
    const RedEnvelopeCmd = {};

    RedEnvelopeCmd.getSetting = (function() {

        /**
         * Properties of a getSetting.
         * @memberof RedEnvelopeCmd
         * @interface IgetSetting
         */

        /**
         * Constructs a new getSetting.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents a getSetting.
         * @implements IgetSetting
         * @constructor
         * @param {RedEnvelopeCmd.IgetSetting=} [properties] Properties to set
         */
        function getSetting(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getSetting message. Does not implicitly {@link RedEnvelopeCmd.getSetting.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.getSetting
         * @static
         * @param {RedEnvelopeCmd.IgetSetting} message getSetting message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getSetting.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getSetting message, length delimited. Does not implicitly {@link RedEnvelopeCmd.getSetting.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.getSetting
         * @static
         * @param {RedEnvelopeCmd.IgetSetting} message getSetting message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getSetting.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getSetting;
    })();

    RedEnvelopeCmd.listRedEnvelope = (function() {

        /**
         * Properties of a listRedEnvelope.
         * @memberof RedEnvelopeCmd
         * @interface IlistRedEnvelope
         * @property {string} startDate listRedEnvelope startDate
         * @property {string} endDate listRedEnvelope endDate
         * @property {number} row listRedEnvelope row
         * @property {string} lastId listRedEnvelope lastId
         */

        /**
         * Constructs a new listRedEnvelope.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents a listRedEnvelope.
         * @implements IlistRedEnvelope
         * @constructor
         * @param {RedEnvelopeCmd.IlistRedEnvelope=} [properties] Properties to set
         */
        function listRedEnvelope(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * listRedEnvelope startDate.
         * @member {string} startDate
         * @memberof RedEnvelopeCmd.listRedEnvelope
         * @instance
         */
        listRedEnvelope.prototype.startDate = "";

        /**
         * listRedEnvelope endDate.
         * @member {string} endDate
         * @memberof RedEnvelopeCmd.listRedEnvelope
         * @instance
         */
        listRedEnvelope.prototype.endDate = "";

        /**
         * listRedEnvelope row.
         * @member {number} row
         * @memberof RedEnvelopeCmd.listRedEnvelope
         * @instance
         */
        listRedEnvelope.prototype.row = 0;

        /**
         * listRedEnvelope lastId.
         * @member {string} lastId
         * @memberof RedEnvelopeCmd.listRedEnvelope
         * @instance
         */
        listRedEnvelope.prototype.lastId = "";

        /**
         * Encodes the specified listRedEnvelope message. Does not implicitly {@link RedEnvelopeCmd.listRedEnvelope.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.listRedEnvelope
         * @static
         * @param {RedEnvelopeCmd.IlistRedEnvelope} message listRedEnvelope message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listRedEnvelope.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.startDate);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.endDate);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.row);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.lastId);
            return writer;
        };

        /**
         * Encodes the specified listRedEnvelope message, length delimited. Does not implicitly {@link RedEnvelopeCmd.listRedEnvelope.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.listRedEnvelope
         * @static
         * @param {RedEnvelopeCmd.IlistRedEnvelope} message listRedEnvelope message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listRedEnvelope.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return listRedEnvelope;
    })();

    RedEnvelopeCmd.getRedEnvelopeAmount = (function() {

        /**
         * Properties of a getRedEnvelopeAmount.
         * @memberof RedEnvelopeCmd
         * @interface IgetRedEnvelopeAmount
         * @property {string} startDate getRedEnvelopeAmount startDate
         * @property {string} endDate getRedEnvelopeAmount endDate
         */

        /**
         * Constructs a new getRedEnvelopeAmount.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents a getRedEnvelopeAmount.
         * @implements IgetRedEnvelopeAmount
         * @constructor
         * @param {RedEnvelopeCmd.IgetRedEnvelopeAmount=} [properties] Properties to set
         */
        function getRedEnvelopeAmount(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRedEnvelopeAmount startDate.
         * @member {string} startDate
         * @memberof RedEnvelopeCmd.getRedEnvelopeAmount
         * @instance
         */
        getRedEnvelopeAmount.prototype.startDate = "";

        /**
         * getRedEnvelopeAmount endDate.
         * @member {string} endDate
         * @memberof RedEnvelopeCmd.getRedEnvelopeAmount
         * @instance
         */
        getRedEnvelopeAmount.prototype.endDate = "";

        /**
         * Encodes the specified getRedEnvelopeAmount message. Does not implicitly {@link RedEnvelopeCmd.getRedEnvelopeAmount.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.getRedEnvelopeAmount
         * @static
         * @param {RedEnvelopeCmd.IgetRedEnvelopeAmount} message getRedEnvelopeAmount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRedEnvelopeAmount.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.startDate);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.endDate);
            return writer;
        };

        /**
         * Encodes the specified getRedEnvelopeAmount message, length delimited. Does not implicitly {@link RedEnvelopeCmd.getRedEnvelopeAmount.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.getRedEnvelopeAmount
         * @static
         * @param {RedEnvelopeCmd.IgetRedEnvelopeAmount} message getRedEnvelopeAmount message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRedEnvelopeAmount.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRedEnvelopeAmount;
    })();

    RedEnvelopeCmd.getBalance = (function() {

        /**
         * Properties of a getBalance.
         * @memberof RedEnvelopeCmd
         * @interface IgetBalance
         */

        /**
         * Constructs a new getBalance.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents a getBalance.
         * @implements IgetBalance
         * @constructor
         * @param {RedEnvelopeCmd.IgetBalance=} [properties] Properties to set
         */
        function getBalance(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getBalance message. Does not implicitly {@link RedEnvelopeCmd.getBalance.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.getBalance
         * @static
         * @param {RedEnvelopeCmd.IgetBalance} message getBalance message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getBalance.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getBalance message, length delimited. Does not implicitly {@link RedEnvelopeCmd.getBalance.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.getBalance
         * @static
         * @param {RedEnvelopeCmd.IgetBalance} message getBalance message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getBalance.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getBalance;
    })();

    RedEnvelopeCmd.canGetLoginRedEnvelope = (function() {

        /**
         * Properties of a canGetLoginRedEnvelope.
         * @memberof RedEnvelopeCmd
         * @interface IcanGetLoginRedEnvelope
         */

        /**
         * Constructs a new canGetLoginRedEnvelope.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents a canGetLoginRedEnvelope.
         * @implements IcanGetLoginRedEnvelope
         * @constructor
         * @param {RedEnvelopeCmd.IcanGetLoginRedEnvelope=} [properties] Properties to set
         */
        function canGetLoginRedEnvelope(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified canGetLoginRedEnvelope message. Does not implicitly {@link RedEnvelopeCmd.canGetLoginRedEnvelope.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.canGetLoginRedEnvelope
         * @static
         * @param {RedEnvelopeCmd.IcanGetLoginRedEnvelope} message canGetLoginRedEnvelope message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        canGetLoginRedEnvelope.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified canGetLoginRedEnvelope message, length delimited. Does not implicitly {@link RedEnvelopeCmd.canGetLoginRedEnvelope.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.canGetLoginRedEnvelope
         * @static
         * @param {RedEnvelopeCmd.IcanGetLoginRedEnvelope} message canGetLoginRedEnvelope message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        canGetLoginRedEnvelope.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return canGetLoginRedEnvelope;
    })();

    RedEnvelopeCmd.getLoginRedEnvelope = (function() {

        /**
         * Properties of a getLoginRedEnvelope.
         * @memberof RedEnvelopeCmd
         * @interface IgetLoginRedEnvelope
         */

        /**
         * Constructs a new getLoginRedEnvelope.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents a getLoginRedEnvelope.
         * @implements IgetLoginRedEnvelope
         * @constructor
         * @param {RedEnvelopeCmd.IgetLoginRedEnvelope=} [properties] Properties to set
         */
        function getLoginRedEnvelope(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getLoginRedEnvelope message. Does not implicitly {@link RedEnvelopeCmd.getLoginRedEnvelope.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.getLoginRedEnvelope
         * @static
         * @param {RedEnvelopeCmd.IgetLoginRedEnvelope} message getLoginRedEnvelope message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLoginRedEnvelope.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getLoginRedEnvelope message, length delimited. Does not implicitly {@link RedEnvelopeCmd.getLoginRedEnvelope.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.getLoginRedEnvelope
         * @static
         * @param {RedEnvelopeCmd.IgetLoginRedEnvelope} message getLoginRedEnvelope message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLoginRedEnvelope.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLoginRedEnvelope;
    })();

    RedEnvelopeCmd.addInvitationCode = (function() {

        /**
         * Properties of an addInvitationCode.
         * @memberof RedEnvelopeCmd
         * @interface IaddInvitationCode
         * @property {string|null} [inviterUserId] addInvitationCode inviterUserId
         */

        /**
         * Constructs a new addInvitationCode.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents an addInvitationCode.
         * @implements IaddInvitationCode
         * @constructor
         * @param {RedEnvelopeCmd.IaddInvitationCode=} [properties] Properties to set
         */
        function addInvitationCode(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * addInvitationCode inviterUserId.
         * @member {string} inviterUserId
         * @memberof RedEnvelopeCmd.addInvitationCode
         * @instance
         */
        addInvitationCode.prototype.inviterUserId = "";

        /**
         * Encodes the specified addInvitationCode message. Does not implicitly {@link RedEnvelopeCmd.addInvitationCode.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.addInvitationCode
         * @static
         * @param {RedEnvelopeCmd.IaddInvitationCode} message addInvitationCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        addInvitationCode.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.inviterUserId != null && message.hasOwnProperty("inviterUserId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.inviterUserId);
            return writer;
        };

        /**
         * Encodes the specified addInvitationCode message, length delimited. Does not implicitly {@link RedEnvelopeCmd.addInvitationCode.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.addInvitationCode
         * @static
         * @param {RedEnvelopeCmd.IaddInvitationCode} message addInvitationCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        addInvitationCode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return addInvitationCode;
    })();

    RedEnvelopeCmd.getLiveRemainTime = (function() {

        /**
         * Properties of a getLiveRemainTime.
         * @memberof RedEnvelopeCmd
         * @interface IgetLiveRemainTime
         */

        /**
         * Constructs a new getLiveRemainTime.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents a getLiveRemainTime.
         * @implements IgetLiveRemainTime
         * @constructor
         * @param {RedEnvelopeCmd.IgetLiveRemainTime=} [properties] Properties to set
         */
        function getLiveRemainTime(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getLiveRemainTime message. Does not implicitly {@link RedEnvelopeCmd.getLiveRemainTime.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.getLiveRemainTime
         * @static
         * @param {RedEnvelopeCmd.IgetLiveRemainTime} message getLiveRemainTime message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveRemainTime.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getLiveRemainTime message, length delimited. Does not implicitly {@link RedEnvelopeCmd.getLiveRemainTime.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.getLiveRemainTime
         * @static
         * @param {RedEnvelopeCmd.IgetLiveRemainTime} message getLiveRemainTime message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveRemainTime.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLiveRemainTime;
    })();

    RedEnvelopeCmd.getLiveRedEnvelope = (function() {

        /**
         * Properties of a getLiveRedEnvelope.
         * @memberof RedEnvelopeCmd
         * @interface IgetLiveRedEnvelope
         */

        /**
         * Constructs a new getLiveRedEnvelope.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents a getLiveRedEnvelope.
         * @implements IgetLiveRedEnvelope
         * @constructor
         * @param {RedEnvelopeCmd.IgetLiveRedEnvelope=} [properties] Properties to set
         */
        function getLiveRedEnvelope(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getLiveRedEnvelope message. Does not implicitly {@link RedEnvelopeCmd.getLiveRedEnvelope.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.getLiveRedEnvelope
         * @static
         * @param {RedEnvelopeCmd.IgetLiveRedEnvelope} message getLiveRedEnvelope message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveRedEnvelope.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getLiveRedEnvelope message, length delimited. Does not implicitly {@link RedEnvelopeCmd.getLiveRedEnvelope.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.getLiveRedEnvelope
         * @static
         * @param {RedEnvelopeCmd.IgetLiveRedEnvelope} message getLiveRedEnvelope message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveRedEnvelope.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLiveRedEnvelope;
    })();

    RedEnvelopeCmd.exchangeGoldShell = (function() {

        /**
         * Properties of an exchangeGoldShell.
         * @memberof RedEnvelopeCmd
         * @interface IexchangeGoldShell
         * @property {string} rechargeId exchangeGoldShell rechargeId
         * @property {string} smsCode exchangeGoldShell smsCode
         */

        /**
         * Constructs a new exchangeGoldShell.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents an exchangeGoldShell.
         * @implements IexchangeGoldShell
         * @constructor
         * @param {RedEnvelopeCmd.IexchangeGoldShell=} [properties] Properties to set
         */
        function exchangeGoldShell(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * exchangeGoldShell rechargeId.
         * @member {string} rechargeId
         * @memberof RedEnvelopeCmd.exchangeGoldShell
         * @instance
         */
        exchangeGoldShell.prototype.rechargeId = "";

        /**
         * exchangeGoldShell smsCode.
         * @member {string} smsCode
         * @memberof RedEnvelopeCmd.exchangeGoldShell
         * @instance
         */
        exchangeGoldShell.prototype.smsCode = "";

        /**
         * Encodes the specified exchangeGoldShell message. Does not implicitly {@link RedEnvelopeCmd.exchangeGoldShell.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.exchangeGoldShell
         * @static
         * @param {RedEnvelopeCmd.IexchangeGoldShell} message exchangeGoldShell message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        exchangeGoldShell.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.rechargeId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.smsCode);
            return writer;
        };

        /**
         * Encodes the specified exchangeGoldShell message, length delimited. Does not implicitly {@link RedEnvelopeCmd.exchangeGoldShell.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.exchangeGoldShell
         * @static
         * @param {RedEnvelopeCmd.IexchangeGoldShell} message exchangeGoldShell message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        exchangeGoldShell.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return exchangeGoldShell;
    })();

    RedEnvelopeCmd.drawings = (function() {

        /**
         * Properties of a drawings.
         * @memberof RedEnvelopeCmd
         * @interface Idrawings
         * @property {string} payeeRealName drawings payeeRealName
         * @property {string} payeeAccount drawings payeeAccount
         * @property {string} smsCode drawings smsCode
         * @property {number} amount drawings amount
         */

        /**
         * Constructs a new drawings.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents a drawings.
         * @implements Idrawings
         * @constructor
         * @param {RedEnvelopeCmd.Idrawings=} [properties] Properties to set
         */
        function drawings(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * drawings payeeRealName.
         * @member {string} payeeRealName
         * @memberof RedEnvelopeCmd.drawings
         * @instance
         */
        drawings.prototype.payeeRealName = "";

        /**
         * drawings payeeAccount.
         * @member {string} payeeAccount
         * @memberof RedEnvelopeCmd.drawings
         * @instance
         */
        drawings.prototype.payeeAccount = "";

        /**
         * drawings smsCode.
         * @member {string} smsCode
         * @memberof RedEnvelopeCmd.drawings
         * @instance
         */
        drawings.prototype.smsCode = "";

        /**
         * drawings amount.
         * @member {number} amount
         * @memberof RedEnvelopeCmd.drawings
         * @instance
         */
        drawings.prototype.amount = 0;

        /**
         * Encodes the specified drawings message. Does not implicitly {@link RedEnvelopeCmd.drawings.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.drawings
         * @static
         * @param {RedEnvelopeCmd.Idrawings} message drawings message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawings.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.payeeRealName);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.payeeAccount);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.smsCode);
            writer.uint32(/* id 4, wireType 5 =*/37).float(message.amount);
            return writer;
        };

        /**
         * Encodes the specified drawings message, length delimited. Does not implicitly {@link RedEnvelopeCmd.drawings.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.drawings
         * @static
         * @param {RedEnvelopeCmd.Idrawings} message drawings message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawings.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return drawings;
    })();

    RedEnvelopeCmd.drawingsResult = (function() {

        /**
         * Properties of a drawingsResult.
         * @memberof RedEnvelopeCmd
         * @interface IdrawingsResult
         * @property {string} orderId drawingsResult orderId
         */

        /**
         * Constructs a new drawingsResult.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents a drawingsResult.
         * @implements IdrawingsResult
         * @constructor
         * @param {RedEnvelopeCmd.IdrawingsResult=} [properties] Properties to set
         */
        function drawingsResult(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * drawingsResult orderId.
         * @member {string} orderId
         * @memberof RedEnvelopeCmd.drawingsResult
         * @instance
         */
        drawingsResult.prototype.orderId = "";

        /**
         * Encodes the specified drawingsResult message. Does not implicitly {@link RedEnvelopeCmd.drawingsResult.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.drawingsResult
         * @static
         * @param {RedEnvelopeCmd.IdrawingsResult} message drawingsResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawingsResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.orderId);
            return writer;
        };

        /**
         * Encodes the specified drawingsResult message, length delimited. Does not implicitly {@link RedEnvelopeCmd.drawingsResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.drawingsResult
         * @static
         * @param {RedEnvelopeCmd.IdrawingsResult} message drawingsResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawingsResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return drawingsResult;
    })();

    RedEnvelopeCmd.drawingsStatus = (function() {

        /**
         * Properties of a drawingsStatus.
         * @memberof RedEnvelopeCmd
         * @interface IdrawingsStatus
         * @property {string} orderId drawingsStatus orderId
         */

        /**
         * Constructs a new drawingsStatus.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents a drawingsStatus.
         * @implements IdrawingsStatus
         * @constructor
         * @param {RedEnvelopeCmd.IdrawingsStatus=} [properties] Properties to set
         */
        function drawingsStatus(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * drawingsStatus orderId.
         * @member {string} orderId
         * @memberof RedEnvelopeCmd.drawingsStatus
         * @instance
         */
        drawingsStatus.prototype.orderId = "";

        /**
         * Encodes the specified drawingsStatus message. Does not implicitly {@link RedEnvelopeCmd.drawingsStatus.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.drawingsStatus
         * @static
         * @param {RedEnvelopeCmd.IdrawingsStatus} message drawingsStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawingsStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.orderId);
            return writer;
        };

        /**
         * Encodes the specified drawingsStatus message, length delimited. Does not implicitly {@link RedEnvelopeCmd.drawingsStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.drawingsStatus
         * @static
         * @param {RedEnvelopeCmd.IdrawingsStatus} message drawingsStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        drawingsStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return drawingsStatus;
    })();

    RedEnvelopeCmd.applyExpense = (function() {

        /**
         * Properties of an applyExpense.
         * @memberof RedEnvelopeCmd
         * @interface IapplyExpense
         * @property {string} payeeRealName applyExpense payeeRealName
         * @property {string} payeeAccount applyExpense payeeAccount
         * @property {string} smsCode applyExpense smsCode
         * @property {number} amount applyExpense amount
         */

        /**
         * Constructs a new applyExpense.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents an applyExpense.
         * @implements IapplyExpense
         * @constructor
         * @param {RedEnvelopeCmd.IapplyExpense=} [properties] Properties to set
         */
        function applyExpense(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * applyExpense payeeRealName.
         * @member {string} payeeRealName
         * @memberof RedEnvelopeCmd.applyExpense
         * @instance
         */
        applyExpense.prototype.payeeRealName = "";

        /**
         * applyExpense payeeAccount.
         * @member {string} payeeAccount
         * @memberof RedEnvelopeCmd.applyExpense
         * @instance
         */
        applyExpense.prototype.payeeAccount = "";

        /**
         * applyExpense smsCode.
         * @member {string} smsCode
         * @memberof RedEnvelopeCmd.applyExpense
         * @instance
         */
        applyExpense.prototype.smsCode = "";

        /**
         * applyExpense amount.
         * @member {number} amount
         * @memberof RedEnvelopeCmd.applyExpense
         * @instance
         */
        applyExpense.prototype.amount = 0;

        /**
         * Encodes the specified applyExpense message. Does not implicitly {@link RedEnvelopeCmd.applyExpense.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.applyExpense
         * @static
         * @param {RedEnvelopeCmd.IapplyExpense} message applyExpense message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        applyExpense.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.payeeRealName);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.payeeAccount);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.smsCode);
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.amount);
            return writer;
        };

        /**
         * Encodes the specified applyExpense message, length delimited. Does not implicitly {@link RedEnvelopeCmd.applyExpense.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.applyExpense
         * @static
         * @param {RedEnvelopeCmd.IapplyExpense} message applyExpense message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        applyExpense.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return applyExpense;
    })();

    RedEnvelopeCmd.getExpenseMoney = (function() {

        /**
         * Properties of a getExpenseMoney.
         * @memberof RedEnvelopeCmd
         * @interface IgetExpenseMoney
         * @property {string} startDate getExpenseMoney startDate
         * @property {string} endDate getExpenseMoney endDate
         */

        /**
         * Constructs a new getExpenseMoney.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents a getExpenseMoney.
         * @implements IgetExpenseMoney
         * @constructor
         * @param {RedEnvelopeCmd.IgetExpenseMoney=} [properties] Properties to set
         */
        function getExpenseMoney(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getExpenseMoney startDate.
         * @member {string} startDate
         * @memberof RedEnvelopeCmd.getExpenseMoney
         * @instance
         */
        getExpenseMoney.prototype.startDate = "";

        /**
         * getExpenseMoney endDate.
         * @member {string} endDate
         * @memberof RedEnvelopeCmd.getExpenseMoney
         * @instance
         */
        getExpenseMoney.prototype.endDate = "";

        /**
         * Encodes the specified getExpenseMoney message. Does not implicitly {@link RedEnvelopeCmd.getExpenseMoney.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.getExpenseMoney
         * @static
         * @param {RedEnvelopeCmd.IgetExpenseMoney} message getExpenseMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getExpenseMoney.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.startDate);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.endDate);
            return writer;
        };

        /**
         * Encodes the specified getExpenseMoney message, length delimited. Does not implicitly {@link RedEnvelopeCmd.getExpenseMoney.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.getExpenseMoney
         * @static
         * @param {RedEnvelopeCmd.IgetExpenseMoney} message getExpenseMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getExpenseMoney.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getExpenseMoney;
    })();

    RedEnvelopeCmd.getExpenseList = (function() {

        /**
         * Properties of a getExpenseList.
         * @memberof RedEnvelopeCmd
         * @interface IgetExpenseList
         * @property {string} startDate getExpenseList startDate
         * @property {string} endDate getExpenseList endDate
         * @property {number} row getExpenseList row
         * @property {string} lastId getExpenseList lastId
         */

        /**
         * Constructs a new getExpenseList.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents a getExpenseList.
         * @implements IgetExpenseList
         * @constructor
         * @param {RedEnvelopeCmd.IgetExpenseList=} [properties] Properties to set
         */
        function getExpenseList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getExpenseList startDate.
         * @member {string} startDate
         * @memberof RedEnvelopeCmd.getExpenseList
         * @instance
         */
        getExpenseList.prototype.startDate = "";

        /**
         * getExpenseList endDate.
         * @member {string} endDate
         * @memberof RedEnvelopeCmd.getExpenseList
         * @instance
         */
        getExpenseList.prototype.endDate = "";

        /**
         * getExpenseList row.
         * @member {number} row
         * @memberof RedEnvelopeCmd.getExpenseList
         * @instance
         */
        getExpenseList.prototype.row = 0;

        /**
         * getExpenseList lastId.
         * @member {string} lastId
         * @memberof RedEnvelopeCmd.getExpenseList
         * @instance
         */
        getExpenseList.prototype.lastId = "";

        /**
         * Encodes the specified getExpenseList message. Does not implicitly {@link RedEnvelopeCmd.getExpenseList.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.getExpenseList
         * @static
         * @param {RedEnvelopeCmd.IgetExpenseList} message getExpenseList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getExpenseList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.startDate);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.endDate);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.row);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.lastId);
            return writer;
        };

        /**
         * Encodes the specified getExpenseList message, length delimited. Does not implicitly {@link RedEnvelopeCmd.getExpenseList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.getExpenseList
         * @static
         * @param {RedEnvelopeCmd.IgetExpenseList} message getExpenseList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getExpenseList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getExpenseList;
    })();

    RedEnvelopeCmd.getExchangeMoney = (function() {

        /**
         * Properties of a getExchangeMoney.
         * @memberof RedEnvelopeCmd
         * @interface IgetExchangeMoney
         * @property {string} startDate getExchangeMoney startDate
         * @property {string} endDate getExchangeMoney endDate
         */

        /**
         * Constructs a new getExchangeMoney.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents a getExchangeMoney.
         * @implements IgetExchangeMoney
         * @constructor
         * @param {RedEnvelopeCmd.IgetExchangeMoney=} [properties] Properties to set
         */
        function getExchangeMoney(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getExchangeMoney startDate.
         * @member {string} startDate
         * @memberof RedEnvelopeCmd.getExchangeMoney
         * @instance
         */
        getExchangeMoney.prototype.startDate = "";

        /**
         * getExchangeMoney endDate.
         * @member {string} endDate
         * @memberof RedEnvelopeCmd.getExchangeMoney
         * @instance
         */
        getExchangeMoney.prototype.endDate = "";

        /**
         * Encodes the specified getExchangeMoney message. Does not implicitly {@link RedEnvelopeCmd.getExchangeMoney.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.getExchangeMoney
         * @static
         * @param {RedEnvelopeCmd.IgetExchangeMoney} message getExchangeMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getExchangeMoney.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.startDate);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.endDate);
            return writer;
        };

        /**
         * Encodes the specified getExchangeMoney message, length delimited. Does not implicitly {@link RedEnvelopeCmd.getExchangeMoney.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.getExchangeMoney
         * @static
         * @param {RedEnvelopeCmd.IgetExchangeMoney} message getExchangeMoney message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getExchangeMoney.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getExchangeMoney;
    })();

    RedEnvelopeCmd.getExchangeList = (function() {

        /**
         * Properties of a getExchangeList.
         * @memberof RedEnvelopeCmd
         * @interface IgetExchangeList
         * @property {string} startDate getExchangeList startDate
         * @property {string} endDate getExchangeList endDate
         * @property {number} row getExchangeList row
         * @property {string} lastId getExchangeList lastId
         */

        /**
         * Constructs a new getExchangeList.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents a getExchangeList.
         * @implements IgetExchangeList
         * @constructor
         * @param {RedEnvelopeCmd.IgetExchangeList=} [properties] Properties to set
         */
        function getExchangeList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getExchangeList startDate.
         * @member {string} startDate
         * @memberof RedEnvelopeCmd.getExchangeList
         * @instance
         */
        getExchangeList.prototype.startDate = "";

        /**
         * getExchangeList endDate.
         * @member {string} endDate
         * @memberof RedEnvelopeCmd.getExchangeList
         * @instance
         */
        getExchangeList.prototype.endDate = "";

        /**
         * getExchangeList row.
         * @member {number} row
         * @memberof RedEnvelopeCmd.getExchangeList
         * @instance
         */
        getExchangeList.prototype.row = 0;

        /**
         * getExchangeList lastId.
         * @member {string} lastId
         * @memberof RedEnvelopeCmd.getExchangeList
         * @instance
         */
        getExchangeList.prototype.lastId = "";

        /**
         * Encodes the specified getExchangeList message. Does not implicitly {@link RedEnvelopeCmd.getExchangeList.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.getExchangeList
         * @static
         * @param {RedEnvelopeCmd.IgetExchangeList} message getExchangeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getExchangeList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.startDate);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.endDate);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.row);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.lastId);
            return writer;
        };

        /**
         * Encodes the specified getExchangeList message, length delimited. Does not implicitly {@link RedEnvelopeCmd.getExchangeList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.getExchangeList
         * @static
         * @param {RedEnvelopeCmd.IgetExchangeList} message getExchangeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getExchangeList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getExchangeList;
    })();

    RedEnvelopeCmd.logShareInvitationCode = (function() {

        /**
         * Properties of a logShareInvitationCode.
         * @memberof RedEnvelopeCmd
         * @interface IlogShareInvitationCode
         */

        /**
         * Constructs a new logShareInvitationCode.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents a logShareInvitationCode.
         * @implements IlogShareInvitationCode
         * @constructor
         * @param {RedEnvelopeCmd.IlogShareInvitationCode=} [properties] Properties to set
         */
        function logShareInvitationCode(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified logShareInvitationCode message. Does not implicitly {@link RedEnvelopeCmd.logShareInvitationCode.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.logShareInvitationCode
         * @static
         * @param {RedEnvelopeCmd.IlogShareInvitationCode} message logShareInvitationCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        logShareInvitationCode.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified logShareInvitationCode message, length delimited. Does not implicitly {@link RedEnvelopeCmd.logShareInvitationCode.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.logShareInvitationCode
         * @static
         * @param {RedEnvelopeCmd.IlogShareInvitationCode} message logShareInvitationCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        logShareInvitationCode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return logShareInvitationCode;
    })();

    RedEnvelopeCmd.inviteRedEnvelopeList = (function() {

        /**
         * Properties of an inviteRedEnvelopeList.
         * @memberof RedEnvelopeCmd
         * @interface IinviteRedEnvelopeList
         */

        /**
         * Constructs a new inviteRedEnvelopeList.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents an inviteRedEnvelopeList.
         * @implements IinviteRedEnvelopeList
         * @constructor
         * @param {RedEnvelopeCmd.IinviteRedEnvelopeList=} [properties] Properties to set
         */
        function inviteRedEnvelopeList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified inviteRedEnvelopeList message. Does not implicitly {@link RedEnvelopeCmd.inviteRedEnvelopeList.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.inviteRedEnvelopeList
         * @static
         * @param {RedEnvelopeCmd.IinviteRedEnvelopeList} message inviteRedEnvelopeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        inviteRedEnvelopeList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified inviteRedEnvelopeList message, length delimited. Does not implicitly {@link RedEnvelopeCmd.inviteRedEnvelopeList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.inviteRedEnvelopeList
         * @static
         * @param {RedEnvelopeCmd.IinviteRedEnvelopeList} message inviteRedEnvelopeList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        inviteRedEnvelopeList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return inviteRedEnvelopeList;
    })();

    RedEnvelopeCmd.checkAccountStatus = (function() {

        /**
         * Properties of a checkAccountStatus.
         * @memberof RedEnvelopeCmd
         * @interface IcheckAccountStatus
         * @property {string|null} [payeeRealName] checkAccountStatus payeeRealName
         * @property {string|null} [payeeAccount] checkAccountStatus payeeAccount
         * @property {string} smsCode checkAccountStatus smsCode
         * @property {boolean} isExpense checkAccountStatus isExpense
         */

        /**
         * Constructs a new checkAccountStatus.
         * @memberof RedEnvelopeCmd
         * @classdesc Represents a checkAccountStatus.
         * @implements IcheckAccountStatus
         * @constructor
         * @param {RedEnvelopeCmd.IcheckAccountStatus=} [properties] Properties to set
         */
        function checkAccountStatus(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * checkAccountStatus payeeRealName.
         * @member {string} payeeRealName
         * @memberof RedEnvelopeCmd.checkAccountStatus
         * @instance
         */
        checkAccountStatus.prototype.payeeRealName = "";

        /**
         * checkAccountStatus payeeAccount.
         * @member {string} payeeAccount
         * @memberof RedEnvelopeCmd.checkAccountStatus
         * @instance
         */
        checkAccountStatus.prototype.payeeAccount = "";

        /**
         * checkAccountStatus smsCode.
         * @member {string} smsCode
         * @memberof RedEnvelopeCmd.checkAccountStatus
         * @instance
         */
        checkAccountStatus.prototype.smsCode = "";

        /**
         * checkAccountStatus isExpense.
         * @member {boolean} isExpense
         * @memberof RedEnvelopeCmd.checkAccountStatus
         * @instance
         */
        checkAccountStatus.prototype.isExpense = false;

        /**
         * Encodes the specified checkAccountStatus message. Does not implicitly {@link RedEnvelopeCmd.checkAccountStatus.verify|verify} messages.
         * @function encode
         * @memberof RedEnvelopeCmd.checkAccountStatus
         * @static
         * @param {RedEnvelopeCmd.IcheckAccountStatus} message checkAccountStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        checkAccountStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.payeeRealName != null && message.hasOwnProperty("payeeRealName"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.payeeRealName);
            if (message.payeeAccount != null && message.hasOwnProperty("payeeAccount"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.payeeAccount);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.smsCode);
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isExpense);
            return writer;
        };

        /**
         * Encodes the specified checkAccountStatus message, length delimited. Does not implicitly {@link RedEnvelopeCmd.checkAccountStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RedEnvelopeCmd.checkAccountStatus
         * @static
         * @param {RedEnvelopeCmd.IcheckAccountStatus} message checkAccountStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        checkAccountStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return checkAccountStatus;
    })();

    return RedEnvelopeCmd;
})();

export const RoomCmd = $root.RoomCmd = (() => {

    /**
     * Namespace RoomCmd.
     * @exports RoomCmd
     * @namespace
     */
    const RoomCmd = {};

    RoomCmd.start = (function() {

        /**
         * Properties of a start.
         * @memberof RoomCmd
         * @interface Istart
         * @property {number} type start type
         * @property {string} roomName start roomName
         * @property {string|null} [bg] start bg
         * @property {boolean|null} [logo] start logo
         * @property {string|null} [roomId] start roomId
         * @property {string|null} [notic] start notic
         */

        /**
         * Constructs a new start.
         * @memberof RoomCmd
         * @classdesc Represents a start.
         * @implements Istart
         * @constructor
         * @param {RoomCmd.Istart=} [properties] Properties to set
         */
        function start(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * start type.
         * @member {number} type
         * @memberof RoomCmd.start
         * @instance
         */
        start.prototype.type = 0;

        /**
         * start roomName.
         * @member {string} roomName
         * @memberof RoomCmd.start
         * @instance
         */
        start.prototype.roomName = "";

        /**
         * start bg.
         * @member {string} bg
         * @memberof RoomCmd.start
         * @instance
         */
        start.prototype.bg = "";

        /**
         * start logo.
         * @member {boolean} logo
         * @memberof RoomCmd.start
         * @instance
         */
        start.prototype.logo = false;

        /**
         * start roomId.
         * @member {string} roomId
         * @memberof RoomCmd.start
         * @instance
         */
        start.prototype.roomId = "";

        /**
         * start notic.
         * @member {string} notic
         * @memberof RoomCmd.start
         * @instance
         */
        start.prototype.notic = "";

        /**
         * Encodes the specified start message. Does not implicitly {@link RoomCmd.start.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.start
         * @static
         * @param {RoomCmd.Istart} message start message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        start.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.roomName);
            if (message.bg != null && message.hasOwnProperty("bg"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.bg);
            if (message.logo != null && message.hasOwnProperty("logo"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.logo);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.roomId);
            if (message.notic != null && message.hasOwnProperty("notic"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.notic);
            return writer;
        };

        /**
         * Encodes the specified start message, length delimited. Does not implicitly {@link RoomCmd.start.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.start
         * @static
         * @param {RoomCmd.Istart} message start message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        start.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return start;
    })();

    RoomCmd.stop = (function() {

        /**
         * Properties of a stop.
         * @memberof RoomCmd
         * @interface Istop
         */

        /**
         * Constructs a new stop.
         * @memberof RoomCmd
         * @classdesc Represents a stop.
         * @implements Istop
         * @constructor
         * @param {RoomCmd.Istop=} [properties] Properties to set
         */
        function stop(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified stop message. Does not implicitly {@link RoomCmd.stop.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.stop
         * @static
         * @param {RoomCmd.Istop} message stop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        stop.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified stop message, length delimited. Does not implicitly {@link RoomCmd.stop.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.stop
         * @static
         * @param {RoomCmd.Istop} message stop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        stop.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return stop;
    })();

    RoomCmd.action = (function() {

        /**
         * Properties of an action.
         * @memberof RoomCmd
         * @interface Iaction
         * @property {string} roomId action roomId
         * @property {number} actType action actType
         * @property {string} targetId action targetId
         * @property {number} position action position
         * @property {string|null} [param] action param
         */

        /**
         * Constructs a new action.
         * @memberof RoomCmd
         * @classdesc Represents an action.
         * @implements Iaction
         * @constructor
         * @param {RoomCmd.Iaction=} [properties] Properties to set
         */
        function action(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * action roomId.
         * @member {string} roomId
         * @memberof RoomCmd.action
         * @instance
         */
        action.prototype.roomId = "";

        /**
         * action actType.
         * @member {number} actType
         * @memberof RoomCmd.action
         * @instance
         */
        action.prototype.actType = 0;

        /**
         * action targetId.
         * @member {string} targetId
         * @memberof RoomCmd.action
         * @instance
         */
        action.prototype.targetId = "";

        /**
         * action position.
         * @member {number} position
         * @memberof RoomCmd.action
         * @instance
         */
        action.prototype.position = 0;

        /**
         * action param.
         * @member {string} param
         * @memberof RoomCmd.action
         * @instance
         */
        action.prototype.param = "";

        /**
         * Encodes the specified action message. Does not implicitly {@link RoomCmd.action.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.action
         * @static
         * @param {RoomCmd.Iaction} message action message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        action.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.actType);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.targetId);
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.position);
            if (message.param != null && message.hasOwnProperty("param"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.param);
            return writer;
        };

        /**
         * Encodes the specified action message, length delimited. Does not implicitly {@link RoomCmd.action.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.action
         * @static
         * @param {RoomCmd.Iaction} message action message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        action.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return action;
    })();

    RoomCmd.checkPwd = (function() {

        /**
         * Properties of a checkPwd.
         * @memberof RoomCmd
         * @interface IcheckPwd
         * @property {string} roomId checkPwd roomId
         * @property {string} password checkPwd password
         */

        /**
         * Constructs a new checkPwd.
         * @memberof RoomCmd
         * @classdesc Represents a checkPwd.
         * @implements IcheckPwd
         * @constructor
         * @param {RoomCmd.IcheckPwd=} [properties] Properties to set
         */
        function checkPwd(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * checkPwd roomId.
         * @member {string} roomId
         * @memberof RoomCmd.checkPwd
         * @instance
         */
        checkPwd.prototype.roomId = "";

        /**
         * checkPwd password.
         * @member {string} password
         * @memberof RoomCmd.checkPwd
         * @instance
         */
        checkPwd.prototype.password = "";

        /**
         * Encodes the specified checkPwd message. Does not implicitly {@link RoomCmd.checkPwd.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.checkPwd
         * @static
         * @param {RoomCmd.IcheckPwd} message checkPwd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        checkPwd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            return writer;
        };

        /**
         * Encodes the specified checkPwd message, length delimited. Does not implicitly {@link RoomCmd.checkPwd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.checkPwd
         * @static
         * @param {RoomCmd.IcheckPwd} message checkPwd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        checkPwd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return checkPwd;
    })();

    RoomCmd.checkCanEnter = (function() {

        /**
         * Properties of a checkCanEnter.
         * @memberof RoomCmd
         * @interface IcheckCanEnter
         * @property {string} roomId checkCanEnter roomId
         * @property {number|null} [source] checkCanEnter source
         */

        /**
         * Constructs a new checkCanEnter.
         * @memberof RoomCmd
         * @classdesc Represents a checkCanEnter.
         * @implements IcheckCanEnter
         * @constructor
         * @param {RoomCmd.IcheckCanEnter=} [properties] Properties to set
         */
        function checkCanEnter(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * checkCanEnter roomId.
         * @member {string} roomId
         * @memberof RoomCmd.checkCanEnter
         * @instance
         */
        checkCanEnter.prototype.roomId = "";

        /**
         * checkCanEnter source.
         * @member {number} source
         * @memberof RoomCmd.checkCanEnter
         * @instance
         */
        checkCanEnter.prototype.source = 0;

        /**
         * Encodes the specified checkCanEnter message. Does not implicitly {@link RoomCmd.checkCanEnter.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.checkCanEnter
         * @static
         * @param {RoomCmd.IcheckCanEnter} message checkCanEnter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        checkCanEnter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            if (message.source != null && message.hasOwnProperty("source"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.source);
            return writer;
        };

        /**
         * Encodes the specified checkCanEnter message, length delimited. Does not implicitly {@link RoomCmd.checkCanEnter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.checkCanEnter
         * @static
         * @param {RoomCmd.IcheckCanEnter} message checkCanEnter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        checkCanEnter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return checkCanEnter;
    })();

    RoomCmd.enter = (function() {

        /**
         * Properties of an enter.
         * @memberof RoomCmd
         * @interface Ienter
         * @property {string} roomId enter roomId
         * @property {string} password enter password
         * @property {number|null} [source] enter source
         */

        /**
         * Constructs a new enter.
         * @memberof RoomCmd
         * @classdesc Represents an enter.
         * @implements Ienter
         * @constructor
         * @param {RoomCmd.Ienter=} [properties] Properties to set
         */
        function enter(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * enter roomId.
         * @member {string} roomId
         * @memberof RoomCmd.enter
         * @instance
         */
        enter.prototype.roomId = "";

        /**
         * enter password.
         * @member {string} password
         * @memberof RoomCmd.enter
         * @instance
         */
        enter.prototype.password = "";

        /**
         * enter source.
         * @member {number} source
         * @memberof RoomCmd.enter
         * @instance
         */
        enter.prototype.source = 0;

        /**
         * Encodes the specified enter message. Does not implicitly {@link RoomCmd.enter.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.enter
         * @static
         * @param {RoomCmd.Ienter} message enter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        enter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            if (message.source != null && message.hasOwnProperty("source"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.source);
            return writer;
        };

        /**
         * Encodes the specified enter message, length delimited. Does not implicitly {@link RoomCmd.enter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.enter
         * @static
         * @param {RoomCmd.Ienter} message enter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        enter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return enter;
    })();

    RoomCmd.leave = (function() {

        /**
         * Properties of a leave.
         * @memberof RoomCmd
         * @interface Ileave
         * @property {string} roomId leave roomId
         */

        /**
         * Constructs a new leave.
         * @memberof RoomCmd
         * @classdesc Represents a leave.
         * @implements Ileave
         * @constructor
         * @param {RoomCmd.Ileave=} [properties] Properties to set
         */
        function leave(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * leave roomId.
         * @member {string} roomId
         * @memberof RoomCmd.leave
         * @instance
         */
        leave.prototype.roomId = "";

        /**
         * Encodes the specified leave message. Does not implicitly {@link RoomCmd.leave.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.leave
         * @static
         * @param {RoomCmd.Ileave} message leave message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        leave.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified leave message, length delimited. Does not implicitly {@link RoomCmd.leave.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.leave
         * @static
         * @param {RoomCmd.Ileave} message leave message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        leave.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return leave;
    })();

    RoomCmd.modifyRoom = (function() {

        /**
         * Properties of a modifyRoom.
         * @memberof RoomCmd
         * @interface ImodifyRoom
         * @property {string} roomId modifyRoom roomId
         * @property {Array.<string>|null} [keys] modifyRoom keys
         * @property {Array.<string>|null} [values] modifyRoom values
         */

        /**
         * Constructs a new modifyRoom.
         * @memberof RoomCmd
         * @classdesc Represents a modifyRoom.
         * @implements ImodifyRoom
         * @constructor
         * @param {RoomCmd.ImodifyRoom=} [properties] Properties to set
         */
        function modifyRoom(properties) {
            this.keys = [];
            this.values = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * modifyRoom roomId.
         * @member {string} roomId
         * @memberof RoomCmd.modifyRoom
         * @instance
         */
        modifyRoom.prototype.roomId = "";

        /**
         * modifyRoom keys.
         * @member {Array.<string>} keys
         * @memberof RoomCmd.modifyRoom
         * @instance
         */
        modifyRoom.prototype.keys = $util.emptyArray;

        /**
         * modifyRoom values.
         * @member {Array.<string>} values
         * @memberof RoomCmd.modifyRoom
         * @instance
         */
        modifyRoom.prototype.values = $util.emptyArray;

        /**
         * Encodes the specified modifyRoom message. Does not implicitly {@link RoomCmd.modifyRoom.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.modifyRoom
         * @static
         * @param {RoomCmd.ImodifyRoom} message modifyRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        modifyRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            if (message.keys != null && message.keys.length)
                for (let i = 0; i < message.keys.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.keys[i]);
            if (message.values != null && message.values.length)
                for (let i = 0; i < message.values.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.values[i]);
            return writer;
        };

        /**
         * Encodes the specified modifyRoom message, length delimited. Does not implicitly {@link RoomCmd.modifyRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.modifyRoom
         * @static
         * @param {RoomCmd.ImodifyRoom} message modifyRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        modifyRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return modifyRoom;
    })();

    RoomCmd.getLatelyBg = (function() {

        /**
         * Properties of a getLatelyBg.
         * @memberof RoomCmd
         * @interface IgetLatelyBg
         * @property {string|null} [roomId] getLatelyBg roomId
         */

        /**
         * Constructs a new getLatelyBg.
         * @memberof RoomCmd
         * @classdesc Represents a getLatelyBg.
         * @implements IgetLatelyBg
         * @constructor
         * @param {RoomCmd.IgetLatelyBg=} [properties] Properties to set
         */
        function getLatelyBg(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getLatelyBg roomId.
         * @member {string} roomId
         * @memberof RoomCmd.getLatelyBg
         * @instance
         */
        getLatelyBg.prototype.roomId = "";

        /**
         * Encodes the specified getLatelyBg message. Does not implicitly {@link RoomCmd.getLatelyBg.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getLatelyBg
         * @static
         * @param {RoomCmd.IgetLatelyBg} message getLatelyBg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLatelyBg.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified getLatelyBg message, length delimited. Does not implicitly {@link RoomCmd.getLatelyBg.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getLatelyBg
         * @static
         * @param {RoomCmd.IgetLatelyBg} message getLatelyBg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLatelyBg.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLatelyBg;
    })();

    RoomCmd.getRoomConfigData = (function() {

        /**
         * Properties of a getRoomConfigData.
         * @memberof RoomCmd
         * @interface IgetRoomConfigData
         * @property {string} roomId getRoomConfigData roomId
         */

        /**
         * Constructs a new getRoomConfigData.
         * @memberof RoomCmd
         * @classdesc Represents a getRoomConfigData.
         * @implements IgetRoomConfigData
         * @constructor
         * @param {RoomCmd.IgetRoomConfigData=} [properties] Properties to set
         */
        function getRoomConfigData(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRoomConfigData roomId.
         * @member {string} roomId
         * @memberof RoomCmd.getRoomConfigData
         * @instance
         */
        getRoomConfigData.prototype.roomId = "";

        /**
         * Encodes the specified getRoomConfigData message. Does not implicitly {@link RoomCmd.getRoomConfigData.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getRoomConfigData
         * @static
         * @param {RoomCmd.IgetRoomConfigData} message getRoomConfigData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomConfigData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified getRoomConfigData message, length delimited. Does not implicitly {@link RoomCmd.getRoomConfigData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getRoomConfigData
         * @static
         * @param {RoomCmd.IgetRoomConfigData} message getRoomConfigData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomConfigData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRoomConfigData;
    })();

    RoomCmd.getRoomData = (function() {

        /**
         * Properties of a getRoomData.
         * @memberof RoomCmd
         * @interface IgetRoomData
         * @property {string} roomId getRoomData roomId
         */

        /**
         * Constructs a new getRoomData.
         * @memberof RoomCmd
         * @classdesc Represents a getRoomData.
         * @implements IgetRoomData
         * @constructor
         * @param {RoomCmd.IgetRoomData=} [properties] Properties to set
         */
        function getRoomData(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRoomData roomId.
         * @member {string} roomId
         * @memberof RoomCmd.getRoomData
         * @instance
         */
        getRoomData.prototype.roomId = "";

        /**
         * Encodes the specified getRoomData message. Does not implicitly {@link RoomCmd.getRoomData.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getRoomData
         * @static
         * @param {RoomCmd.IgetRoomData} message getRoomData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified getRoomData message, length delimited. Does not implicitly {@link RoomCmd.getRoomData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getRoomData
         * @static
         * @param {RoomCmd.IgetRoomData} message getRoomData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRoomData;
    })();

    RoomCmd.getRoomMicData = (function() {

        /**
         * Properties of a getRoomMicData.
         * @memberof RoomCmd
         * @interface IgetRoomMicData
         * @property {string} roomId getRoomMicData roomId
         * @property {number} position getRoomMicData position
         */

        /**
         * Constructs a new getRoomMicData.
         * @memberof RoomCmd
         * @classdesc Represents a getRoomMicData.
         * @implements IgetRoomMicData
         * @constructor
         * @param {RoomCmd.IgetRoomMicData=} [properties] Properties to set
         */
        function getRoomMicData(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRoomMicData roomId.
         * @member {string} roomId
         * @memberof RoomCmd.getRoomMicData
         * @instance
         */
        getRoomMicData.prototype.roomId = "";

        /**
         * getRoomMicData position.
         * @member {number} position
         * @memberof RoomCmd.getRoomMicData
         * @instance
         */
        getRoomMicData.prototype.position = 0;

        /**
         * Encodes the specified getRoomMicData message. Does not implicitly {@link RoomCmd.getRoomMicData.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getRoomMicData
         * @static
         * @param {RoomCmd.IgetRoomMicData} message getRoomMicData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomMicData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.position);
            return writer;
        };

        /**
         * Encodes the specified getRoomMicData message, length delimited. Does not implicitly {@link RoomCmd.getRoomMicData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getRoomMicData
         * @static
         * @param {RoomCmd.IgetRoomMicData} message getRoomMicData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomMicData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRoomMicData;
    })();

    RoomCmd.getOnlineMembers = (function() {

        /**
         * Properties of a getOnlineMembers.
         * @memberof RoomCmd
         * @interface IgetOnlineMembers
         * @property {string} roomId getOnlineMembers roomId
         * @property {number} start getOnlineMembers start
         * @property {number} end getOnlineMembers end
         */

        /**
         * Constructs a new getOnlineMembers.
         * @memberof RoomCmd
         * @classdesc Represents a getOnlineMembers.
         * @implements IgetOnlineMembers
         * @constructor
         * @param {RoomCmd.IgetOnlineMembers=} [properties] Properties to set
         */
        function getOnlineMembers(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getOnlineMembers roomId.
         * @member {string} roomId
         * @memberof RoomCmd.getOnlineMembers
         * @instance
         */
        getOnlineMembers.prototype.roomId = "";

        /**
         * getOnlineMembers start.
         * @member {number} start
         * @memberof RoomCmd.getOnlineMembers
         * @instance
         */
        getOnlineMembers.prototype.start = 0;

        /**
         * getOnlineMembers end.
         * @member {number} end
         * @memberof RoomCmd.getOnlineMembers
         * @instance
         */
        getOnlineMembers.prototype.end = 0;

        /**
         * Encodes the specified getOnlineMembers message. Does not implicitly {@link RoomCmd.getOnlineMembers.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getOnlineMembers
         * @static
         * @param {RoomCmd.IgetOnlineMembers} message getOnlineMembers message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getOnlineMembers.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.start);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.end);
            return writer;
        };

        /**
         * Encodes the specified getOnlineMembers message, length delimited. Does not implicitly {@link RoomCmd.getOnlineMembers.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getOnlineMembers
         * @static
         * @param {RoomCmd.IgetOnlineMembers} message getOnlineMembers message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getOnlineMembers.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getOnlineMembers;
    })();

    RoomCmd.getFunRoomDividedRateInfos = (function() {

        /**
         * Properties of a getFunRoomDividedRateInfos.
         * @memberof RoomCmd
         * @interface IgetFunRoomDividedRateInfos
         * @property {string} roomId getFunRoomDividedRateInfos roomId
         */

        /**
         * Constructs a new getFunRoomDividedRateInfos.
         * @memberof RoomCmd
         * @classdesc Represents a getFunRoomDividedRateInfos.
         * @implements IgetFunRoomDividedRateInfos
         * @constructor
         * @param {RoomCmd.IgetFunRoomDividedRateInfos=} [properties] Properties to set
         */
        function getFunRoomDividedRateInfos(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getFunRoomDividedRateInfos roomId.
         * @member {string} roomId
         * @memberof RoomCmd.getFunRoomDividedRateInfos
         * @instance
         */
        getFunRoomDividedRateInfos.prototype.roomId = "";

        /**
         * Encodes the specified getFunRoomDividedRateInfos message. Does not implicitly {@link RoomCmd.getFunRoomDividedRateInfos.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getFunRoomDividedRateInfos
         * @static
         * @param {RoomCmd.IgetFunRoomDividedRateInfos} message getFunRoomDividedRateInfos message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getFunRoomDividedRateInfos.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified getFunRoomDividedRateInfos message, length delimited. Does not implicitly {@link RoomCmd.getFunRoomDividedRateInfos.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getFunRoomDividedRateInfos
         * @static
         * @param {RoomCmd.IgetFunRoomDividedRateInfos} message getFunRoomDividedRateInfos message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getFunRoomDividedRateInfos.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getFunRoomDividedRateInfos;
    })();

    RoomCmd.getRoomState = (function() {

        /**
         * Properties of a getRoomState.
         * @memberof RoomCmd
         * @interface IgetRoomState
         * @property {Array.<string>|null} [roomIds] getRoomState roomIds
         */

        /**
         * Constructs a new getRoomState.
         * @memberof RoomCmd
         * @classdesc Represents a getRoomState.
         * @implements IgetRoomState
         * @constructor
         * @param {RoomCmd.IgetRoomState=} [properties] Properties to set
         */
        function getRoomState(properties) {
            this.roomIds = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRoomState roomIds.
         * @member {Array.<string>} roomIds
         * @memberof RoomCmd.getRoomState
         * @instance
         */
        getRoomState.prototype.roomIds = $util.emptyArray;

        /**
         * Encodes the specified getRoomState message. Does not implicitly {@link RoomCmd.getRoomState.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getRoomState
         * @static
         * @param {RoomCmd.IgetRoomState} message getRoomState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomState.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomIds != null && message.roomIds.length)
                for (let i = 0; i < message.roomIds.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomIds[i]);
            return writer;
        };

        /**
         * Encodes the specified getRoomState message, length delimited. Does not implicitly {@link RoomCmd.getRoomState.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getRoomState
         * @static
         * @param {RoomCmd.IgetRoomState} message getRoomState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomState.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRoomState;
    })();

    RoomCmd.getRoomName = (function() {

        /**
         * Properties of a getRoomName.
         * @memberof RoomCmd
         * @interface IgetRoomName
         * @property {string} roomId getRoomName roomId
         */

        /**
         * Constructs a new getRoomName.
         * @memberof RoomCmd
         * @classdesc Represents a getRoomName.
         * @implements IgetRoomName
         * @constructor
         * @param {RoomCmd.IgetRoomName=} [properties] Properties to set
         */
        function getRoomName(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRoomName roomId.
         * @member {string} roomId
         * @memberof RoomCmd.getRoomName
         * @instance
         */
        getRoomName.prototype.roomId = "";

        /**
         * Encodes the specified getRoomName message. Does not implicitly {@link RoomCmd.getRoomName.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getRoomName
         * @static
         * @param {RoomCmd.IgetRoomName} message getRoomName message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomName.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified getRoomName message, length delimited. Does not implicitly {@link RoomCmd.getRoomName.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getRoomName
         * @static
         * @param {RoomCmd.IgetRoomName} message getRoomName message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomName.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRoomName;
    })();

    RoomCmd.getRoomInfo = (function() {

        /**
         * Properties of a getRoomInfo.
         * @memberof RoomCmd
         * @interface IgetRoomInfo
         * @property {string} roomId getRoomInfo roomId
         */

        /**
         * Constructs a new getRoomInfo.
         * @memberof RoomCmd
         * @classdesc Represents a getRoomInfo.
         * @implements IgetRoomInfo
         * @constructor
         * @param {RoomCmd.IgetRoomInfo=} [properties] Properties to set
         */
        function getRoomInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRoomInfo roomId.
         * @member {string} roomId
         * @memberof RoomCmd.getRoomInfo
         * @instance
         */
        getRoomInfo.prototype.roomId = "";

        /**
         * Encodes the specified getRoomInfo message. Does not implicitly {@link RoomCmd.getRoomInfo.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getRoomInfo
         * @static
         * @param {RoomCmd.IgetRoomInfo} message getRoomInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified getRoomInfo message, length delimited. Does not implicitly {@link RoomCmd.getRoomInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getRoomInfo
         * @static
         * @param {RoomCmd.IgetRoomInfo} message getRoomInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRoomInfo;
    })();

    RoomCmd.getOnlines = (function() {

        /**
         * Properties of a getOnlines.
         * @memberof RoomCmd
         * @interface IgetOnlines
         * @property {Array.<string>|null} [roomIds] getOnlines roomIds
         */

        /**
         * Constructs a new getOnlines.
         * @memberof RoomCmd
         * @classdesc Represents a getOnlines.
         * @implements IgetOnlines
         * @constructor
         * @param {RoomCmd.IgetOnlines=} [properties] Properties to set
         */
        function getOnlines(properties) {
            this.roomIds = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getOnlines roomIds.
         * @member {Array.<string>} roomIds
         * @memberof RoomCmd.getOnlines
         * @instance
         */
        getOnlines.prototype.roomIds = $util.emptyArray;

        /**
         * Encodes the specified getOnlines message. Does not implicitly {@link RoomCmd.getOnlines.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getOnlines
         * @static
         * @param {RoomCmd.IgetOnlines} message getOnlines message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getOnlines.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomIds != null && message.roomIds.length)
                for (let i = 0; i < message.roomIds.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomIds[i]);
            return writer;
        };

        /**
         * Encodes the specified getOnlines message, length delimited. Does not implicitly {@link RoomCmd.getOnlines.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getOnlines
         * @static
         * @param {RoomCmd.IgetOnlines} message getOnlines message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getOnlines.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getOnlines;
    })();

    RoomCmd.getOnlineRoomId = (function() {

        /**
         * Properties of a getOnlineRoomId.
         * @memberof RoomCmd
         * @interface IgetOnlineRoomId
         */

        /**
         * Constructs a new getOnlineRoomId.
         * @memberof RoomCmd
         * @classdesc Represents a getOnlineRoomId.
         * @implements IgetOnlineRoomId
         * @constructor
         * @param {RoomCmd.IgetOnlineRoomId=} [properties] Properties to set
         */
        function getOnlineRoomId(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getOnlineRoomId message. Does not implicitly {@link RoomCmd.getOnlineRoomId.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getOnlineRoomId
         * @static
         * @param {RoomCmd.IgetOnlineRoomId} message getOnlineRoomId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getOnlineRoomId.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getOnlineRoomId message, length delimited. Does not implicitly {@link RoomCmd.getOnlineRoomId.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getOnlineRoomId
         * @static
         * @param {RoomCmd.IgetOnlineRoomId} message getOnlineRoomId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getOnlineRoomId.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getOnlineRoomId;
    })();

    RoomCmd.getForbidTime = (function() {

        /**
         * Properties of a getForbidTime.
         * @memberof RoomCmd
         * @interface IgetForbidTime
         * @property {string} roomId getForbidTime roomId
         * @property {string} targetId getForbidTime targetId
         */

        /**
         * Constructs a new getForbidTime.
         * @memberof RoomCmd
         * @classdesc Represents a getForbidTime.
         * @implements IgetForbidTime
         * @constructor
         * @param {RoomCmd.IgetForbidTime=} [properties] Properties to set
         */
        function getForbidTime(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getForbidTime roomId.
         * @member {string} roomId
         * @memberof RoomCmd.getForbidTime
         * @instance
         */
        getForbidTime.prototype.roomId = "";

        /**
         * getForbidTime targetId.
         * @member {string} targetId
         * @memberof RoomCmd.getForbidTime
         * @instance
         */
        getForbidTime.prototype.targetId = "";

        /**
         * Encodes the specified getForbidTime message. Does not implicitly {@link RoomCmd.getForbidTime.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getForbidTime
         * @static
         * @param {RoomCmd.IgetForbidTime} message getForbidTime message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getForbidTime.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.targetId);
            return writer;
        };

        /**
         * Encodes the specified getForbidTime message, length delimited. Does not implicitly {@link RoomCmd.getForbidTime.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getForbidTime
         * @static
         * @param {RoomCmd.IgetForbidTime} message getForbidTime message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getForbidTime.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getForbidTime;
    })();

    RoomCmd.atRoomUser = (function() {

        /**
         * Properties of an atRoomUser.
         * @memberof RoomCmd
         * @interface IatRoomUser
         * @property {string} roomId atRoomUser roomId
         * @property {Array.<string>|null} [atTargetIds] atRoomUser atTargetIds
         */

        /**
         * Constructs a new atRoomUser.
         * @memberof RoomCmd
         * @classdesc Represents an atRoomUser.
         * @implements IatRoomUser
         * @constructor
         * @param {RoomCmd.IatRoomUser=} [properties] Properties to set
         */
        function atRoomUser(properties) {
            this.atTargetIds = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * atRoomUser roomId.
         * @member {string} roomId
         * @memberof RoomCmd.atRoomUser
         * @instance
         */
        atRoomUser.prototype.roomId = "";

        /**
         * atRoomUser atTargetIds.
         * @member {Array.<string>} atTargetIds
         * @memberof RoomCmd.atRoomUser
         * @instance
         */
        atRoomUser.prototype.atTargetIds = $util.emptyArray;

        /**
         * Encodes the specified atRoomUser message. Does not implicitly {@link RoomCmd.atRoomUser.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.atRoomUser
         * @static
         * @param {RoomCmd.IatRoomUser} message atRoomUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        atRoomUser.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            if (message.atTargetIds != null && message.atTargetIds.length)
                for (let i = 0; i < message.atTargetIds.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.atTargetIds[i]);
            return writer;
        };

        /**
         * Encodes the specified atRoomUser message, length delimited. Does not implicitly {@link RoomCmd.atRoomUser.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.atRoomUser
         * @static
         * @param {RoomCmd.IatRoomUser} message atRoomUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        atRoomUser.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return atRoomUser;
    })();

    RoomCmd.reportRoom = (function() {

        /**
         * Properties of a reportRoom.
         * @memberof RoomCmd
         * @interface IreportRoom
         * @property {string} roomId reportRoom roomId
         * @property {number} reason reportRoom reason
         */

        /**
         * Constructs a new reportRoom.
         * @memberof RoomCmd
         * @classdesc Represents a reportRoom.
         * @implements IreportRoom
         * @constructor
         * @param {RoomCmd.IreportRoom=} [properties] Properties to set
         */
        function reportRoom(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * reportRoom roomId.
         * @member {string} roomId
         * @memberof RoomCmd.reportRoom
         * @instance
         */
        reportRoom.prototype.roomId = "";

        /**
         * reportRoom reason.
         * @member {number} reason
         * @memberof RoomCmd.reportRoom
         * @instance
         */
        reportRoom.prototype.reason = 0;

        /**
         * Encodes the specified reportRoom message. Does not implicitly {@link RoomCmd.reportRoom.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.reportRoom
         * @static
         * @param {RoomCmd.IreportRoom} message reportRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        reportRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.reason);
            return writer;
        };

        /**
         * Encodes the specified reportRoom message, length delimited. Does not implicitly {@link RoomCmd.reportRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.reportRoom
         * @static
         * @param {RoomCmd.IreportRoom} message reportRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        reportRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return reportRoom;
    })();

    RoomCmd.isInMic = (function() {

        /**
         * Properties of an isInMic.
         * @memberof RoomCmd
         * @interface IisInMic
         * @property {string} roomId isInMic roomId
         */

        /**
         * Constructs a new isInMic.
         * @memberof RoomCmd
         * @classdesc Represents an isInMic.
         * @implements IisInMic
         * @constructor
         * @param {RoomCmd.IisInMic=} [properties] Properties to set
         */
        function isInMic(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * isInMic roomId.
         * @member {string} roomId
         * @memberof RoomCmd.isInMic
         * @instance
         */
        isInMic.prototype.roomId = "";

        /**
         * Encodes the specified isInMic message. Does not implicitly {@link RoomCmd.isInMic.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.isInMic
         * @static
         * @param {RoomCmd.IisInMic} message isInMic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        isInMic.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified isInMic message, length delimited. Does not implicitly {@link RoomCmd.isInMic.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.isInMic
         * @static
         * @param {RoomCmd.IisInMic} message isInMic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        isInMic.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return isInMic;
    })();

    RoomCmd.getLivePushInfo = (function() {

        /**
         * Properties of a getLivePushInfo.
         * @memberof RoomCmd
         * @interface IgetLivePushInfo
         */

        /**
         * Constructs a new getLivePushInfo.
         * @memberof RoomCmd
         * @classdesc Represents a getLivePushInfo.
         * @implements IgetLivePushInfo
         * @constructor
         * @param {RoomCmd.IgetLivePushInfo=} [properties] Properties to set
         */
        function getLivePushInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getLivePushInfo message. Does not implicitly {@link RoomCmd.getLivePushInfo.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getLivePushInfo
         * @static
         * @param {RoomCmd.IgetLivePushInfo} message getLivePushInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLivePushInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getLivePushInfo message, length delimited. Does not implicitly {@link RoomCmd.getLivePushInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getLivePushInfo
         * @static
         * @param {RoomCmd.IgetLivePushInfo} message getLivePushInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLivePushInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLivePushInfo;
    })();

    RoomCmd.getRecreations = (function() {

        /**
         * Properties of a getRecreations.
         * @memberof RoomCmd
         * @interface IgetRecreations
         * @property {string} id getRecreations id
         * @property {string} roomId getRecreations roomId
         */

        /**
         * Constructs a new getRecreations.
         * @memberof RoomCmd
         * @classdesc Represents a getRecreations.
         * @implements IgetRecreations
         * @constructor
         * @param {RoomCmd.IgetRecreations=} [properties] Properties to set
         */
        function getRecreations(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRecreations id.
         * @member {string} id
         * @memberof RoomCmd.getRecreations
         * @instance
         */
        getRecreations.prototype.id = "";

        /**
         * getRecreations roomId.
         * @member {string} roomId
         * @memberof RoomCmd.getRecreations
         * @instance
         */
        getRecreations.prototype.roomId = "";

        /**
         * Encodes the specified getRecreations message. Does not implicitly {@link RoomCmd.getRecreations.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getRecreations
         * @static
         * @param {RoomCmd.IgetRecreations} message getRecreations message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRecreations.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified getRecreations message, length delimited. Does not implicitly {@link RoomCmd.getRecreations.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getRecreations
         * @static
         * @param {RoomCmd.IgetRecreations} message getRecreations message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRecreations.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRecreations;
    })();

    RoomCmd.getEnterRoomList = (function() {

        /**
         * Properties of a getEnterRoomList.
         * @memberof RoomCmd
         * @interface IgetEnterRoomList
         */

        /**
         * Constructs a new getEnterRoomList.
         * @memberof RoomCmd
         * @classdesc Represents a getEnterRoomList.
         * @implements IgetEnterRoomList
         * @constructor
         * @param {RoomCmd.IgetEnterRoomList=} [properties] Properties to set
         */
        function getEnterRoomList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getEnterRoomList message. Does not implicitly {@link RoomCmd.getEnterRoomList.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getEnterRoomList
         * @static
         * @param {RoomCmd.IgetEnterRoomList} message getEnterRoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getEnterRoomList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getEnterRoomList message, length delimited. Does not implicitly {@link RoomCmd.getEnterRoomList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getEnterRoomList
         * @static
         * @param {RoomCmd.IgetEnterRoomList} message getEnterRoomList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getEnterRoomList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getEnterRoomList;
    })();

    RoomCmd.setIsAcptMicInvt = (function() {

        /**
         * Properties of a setIsAcptMicInvt.
         * @memberof RoomCmd
         * @interface IsetIsAcptMicInvt
         * @property {boolean} flag setIsAcptMicInvt flag
         */

        /**
         * Constructs a new setIsAcptMicInvt.
         * @memberof RoomCmd
         * @classdesc Represents a setIsAcptMicInvt.
         * @implements IsetIsAcptMicInvt
         * @constructor
         * @param {RoomCmd.IsetIsAcptMicInvt=} [properties] Properties to set
         */
        function setIsAcptMicInvt(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * setIsAcptMicInvt flag.
         * @member {boolean} flag
         * @memberof RoomCmd.setIsAcptMicInvt
         * @instance
         */
        setIsAcptMicInvt.prototype.flag = false;

        /**
         * Encodes the specified setIsAcptMicInvt message. Does not implicitly {@link RoomCmd.setIsAcptMicInvt.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.setIsAcptMicInvt
         * @static
         * @param {RoomCmd.IsetIsAcptMicInvt} message setIsAcptMicInvt message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setIsAcptMicInvt.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.flag);
            return writer;
        };

        /**
         * Encodes the specified setIsAcptMicInvt message, length delimited. Does not implicitly {@link RoomCmd.setIsAcptMicInvt.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.setIsAcptMicInvt
         * @static
         * @param {RoomCmd.IsetIsAcptMicInvt} message setIsAcptMicInvt message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setIsAcptMicInvt.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return setIsAcptMicInvt;
    })();

    RoomCmd.inviteAllEnter = (function() {

        /**
         * Properties of an inviteAllEnter.
         * @memberof RoomCmd
         * @interface IinviteAllEnter
         */

        /**
         * Constructs a new inviteAllEnter.
         * @memberof RoomCmd
         * @classdesc Represents an inviteAllEnter.
         * @implements IinviteAllEnter
         * @constructor
         * @param {RoomCmd.IinviteAllEnter=} [properties] Properties to set
         */
        function inviteAllEnter(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified inviteAllEnter message. Does not implicitly {@link RoomCmd.inviteAllEnter.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.inviteAllEnter
         * @static
         * @param {RoomCmd.IinviteAllEnter} message inviteAllEnter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        inviteAllEnter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified inviteAllEnter message, length delimited. Does not implicitly {@link RoomCmd.inviteAllEnter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.inviteAllEnter
         * @static
         * @param {RoomCmd.IinviteAllEnter} message inviteAllEnter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        inviteAllEnter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return inviteAllEnter;
    })();

    RoomCmd.inviteEnterRoom = (function() {

        /**
         * Properties of an inviteEnterRoom.
         * @memberof RoomCmd
         * @interface IinviteEnterRoom
         * @property {string} targetId inviteEnterRoom targetId
         * @property {number|null} [source] inviteEnterRoom source
         */

        /**
         * Constructs a new inviteEnterRoom.
         * @memberof RoomCmd
         * @classdesc Represents an inviteEnterRoom.
         * @implements IinviteEnterRoom
         * @constructor
         * @param {RoomCmd.IinviteEnterRoom=} [properties] Properties to set
         */
        function inviteEnterRoom(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * inviteEnterRoom targetId.
         * @member {string} targetId
         * @memberof RoomCmd.inviteEnterRoom
         * @instance
         */
        inviteEnterRoom.prototype.targetId = "";

        /**
         * inviteEnterRoom source.
         * @member {number} source
         * @memberof RoomCmd.inviteEnterRoom
         * @instance
         */
        inviteEnterRoom.prototype.source = 0;

        /**
         * Encodes the specified inviteEnterRoom message. Does not implicitly {@link RoomCmd.inviteEnterRoom.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.inviteEnterRoom
         * @static
         * @param {RoomCmd.IinviteEnterRoom} message inviteEnterRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        inviteEnterRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            if (message.source != null && message.hasOwnProperty("source"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.source);
            return writer;
        };

        /**
         * Encodes the specified inviteEnterRoom message, length delimited. Does not implicitly {@link RoomCmd.inviteEnterRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.inviteEnterRoom
         * @static
         * @param {RoomCmd.IinviteEnterRoom} message inviteEnterRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        inviteEnterRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return inviteEnterRoom;
    })();

    RoomCmd.breakInvite = (function() {

        /**
         * Properties of a breakInvite.
         * @memberof RoomCmd
         * @interface IbreakInvite
         * @property {string} targetId breakInvite targetId
         */

        /**
         * Constructs a new breakInvite.
         * @memberof RoomCmd
         * @classdesc Represents a breakInvite.
         * @implements IbreakInvite
         * @constructor
         * @param {RoomCmd.IbreakInvite=} [properties] Properties to set
         */
        function breakInvite(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * breakInvite targetId.
         * @member {string} targetId
         * @memberof RoomCmd.breakInvite
         * @instance
         */
        breakInvite.prototype.targetId = "";

        /**
         * Encodes the specified breakInvite message. Does not implicitly {@link RoomCmd.breakInvite.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.breakInvite
         * @static
         * @param {RoomCmd.IbreakInvite} message breakInvite message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        breakInvite.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);
            return writer;
        };

        /**
         * Encodes the specified breakInvite message, length delimited. Does not implicitly {@link RoomCmd.breakInvite.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.breakInvite
         * @static
         * @param {RoomCmd.IbreakInvite} message breakInvite message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        breakInvite.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return breakInvite;
    })();

    RoomCmd.responseInvite = (function() {

        /**
         * Properties of a responseInvite.
         * @memberof RoomCmd
         * @interface IresponseInvite
         * @property {string} inviter responseInvite inviter
         * @property {boolean} flag responseInvite flag
         * @property {string|null} [roomId] responseInvite roomId
         */

        /**
         * Constructs a new responseInvite.
         * @memberof RoomCmd
         * @classdesc Represents a responseInvite.
         * @implements IresponseInvite
         * @constructor
         * @param {RoomCmd.IresponseInvite=} [properties] Properties to set
         */
        function responseInvite(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * responseInvite inviter.
         * @member {string} inviter
         * @memberof RoomCmd.responseInvite
         * @instance
         */
        responseInvite.prototype.inviter = "";

        /**
         * responseInvite flag.
         * @member {boolean} flag
         * @memberof RoomCmd.responseInvite
         * @instance
         */
        responseInvite.prototype.flag = false;

        /**
         * responseInvite roomId.
         * @member {string} roomId
         * @memberof RoomCmd.responseInvite
         * @instance
         */
        responseInvite.prototype.roomId = "";

        /**
         * Encodes the specified responseInvite message. Does not implicitly {@link RoomCmd.responseInvite.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.responseInvite
         * @static
         * @param {RoomCmd.IresponseInvite} message responseInvite message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        responseInvite.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.inviter);
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.flag);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified responseInvite message, length delimited. Does not implicitly {@link RoomCmd.responseInvite.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.responseInvite
         * @static
         * @param {RoomCmd.IresponseInvite} message responseInvite message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        responseInvite.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return responseInvite;
    })();

    RoomCmd.setManager = (function() {

        /**
         * Properties of a setManager.
         * @memberof RoomCmd
         * @interface IsetManager
         * @property {string} roomId setManager roomId
         * @property {string} targetId setManager targetId
         * @property {number} jobId setManager jobId
         */

        /**
         * Constructs a new setManager.
         * @memberof RoomCmd
         * @classdesc Represents a setManager.
         * @implements IsetManager
         * @constructor
         * @param {RoomCmd.IsetManager=} [properties] Properties to set
         */
        function setManager(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * setManager roomId.
         * @member {string} roomId
         * @memberof RoomCmd.setManager
         * @instance
         */
        setManager.prototype.roomId = "";

        /**
         * setManager targetId.
         * @member {string} targetId
         * @memberof RoomCmd.setManager
         * @instance
         */
        setManager.prototype.targetId = "";

        /**
         * setManager jobId.
         * @member {number} jobId
         * @memberof RoomCmd.setManager
         * @instance
         */
        setManager.prototype.jobId = 0;

        /**
         * Encodes the specified setManager message. Does not implicitly {@link RoomCmd.setManager.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.setManager
         * @static
         * @param {RoomCmd.IsetManager} message setManager message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setManager.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.targetId);
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.jobId);
            return writer;
        };

        /**
         * Encodes the specified setManager message, length delimited. Does not implicitly {@link RoomCmd.setManager.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.setManager
         * @static
         * @param {RoomCmd.IsetManager} message setManager message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        setManager.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return setManager;
    })();

    RoomCmd.managers = (function() {

        /**
         * Properties of a managers.
         * @memberof RoomCmd
         * @interface Imanagers
         * @property {string} roomId managers roomId
         */

        /**
         * Constructs a new managers.
         * @memberof RoomCmd
         * @classdesc Represents a managers.
         * @implements Imanagers
         * @constructor
         * @param {RoomCmd.Imanagers=} [properties] Properties to set
         */
        function managers(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * managers roomId.
         * @member {string} roomId
         * @memberof RoomCmd.managers
         * @instance
         */
        managers.prototype.roomId = "";

        /**
         * Encodes the specified managers message. Does not implicitly {@link RoomCmd.managers.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.managers
         * @static
         * @param {RoomCmd.Imanagers} message managers message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        managers.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified managers message, length delimited. Does not implicitly {@link RoomCmd.managers.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.managers
         * @static
         * @param {RoomCmd.Imanagers} message managers message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        managers.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return managers;
    })();

    RoomCmd.getJobId = (function() {

        /**
         * Properties of a getJobId.
         * @memberof RoomCmd
         * @interface IgetJobId
         * @property {string} roomId getJobId roomId
         * @property {string} targetId getJobId targetId
         */

        /**
         * Constructs a new getJobId.
         * @memberof RoomCmd
         * @classdesc Represents a getJobId.
         * @implements IgetJobId
         * @constructor
         * @param {RoomCmd.IgetJobId=} [properties] Properties to set
         */
        function getJobId(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getJobId roomId.
         * @member {string} roomId
         * @memberof RoomCmd.getJobId
         * @instance
         */
        getJobId.prototype.roomId = "";

        /**
         * getJobId targetId.
         * @member {string} targetId
         * @memberof RoomCmd.getJobId
         * @instance
         */
        getJobId.prototype.targetId = "";

        /**
         * Encodes the specified getJobId message. Does not implicitly {@link RoomCmd.getJobId.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getJobId
         * @static
         * @param {RoomCmd.IgetJobId} message getJobId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getJobId.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.targetId);
            return writer;
        };

        /**
         * Encodes the specified getJobId message, length delimited. Does not implicitly {@link RoomCmd.getJobId.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getJobId
         * @static
         * @param {RoomCmd.IgetJobId} message getJobId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getJobId.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getJobId;
    })();

    RoomCmd.getStartRoomInfo = (function() {

        /**
         * Properties of a getStartRoomInfo.
         * @memberof RoomCmd
         * @interface IgetStartRoomInfo
         */

        /**
         * Constructs a new getStartRoomInfo.
         * @memberof RoomCmd
         * @classdesc Represents a getStartRoomInfo.
         * @implements IgetStartRoomInfo
         * @constructor
         * @param {RoomCmd.IgetStartRoomInfo=} [properties] Properties to set
         */
        function getStartRoomInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getStartRoomInfo message. Does not implicitly {@link RoomCmd.getStartRoomInfo.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getStartRoomInfo
         * @static
         * @param {RoomCmd.IgetStartRoomInfo} message getStartRoomInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getStartRoomInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getStartRoomInfo message, length delimited. Does not implicitly {@link RoomCmd.getStartRoomInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getStartRoomInfo
         * @static
         * @param {RoomCmd.IgetStartRoomInfo} message getStartRoomInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getStartRoomInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getStartRoomInfo;
    })();

    RoomCmd.dragonBall = (function() {

        /**
         * Properties of a dragonBall.
         * @memberof RoomCmd
         * @interface IdragonBall
         * @property {string} roomId dragonBall roomId
         * @property {number} action dragonBall action
         */

        /**
         * Constructs a new dragonBall.
         * @memberof RoomCmd
         * @classdesc Represents a dragonBall.
         * @implements IdragonBall
         * @constructor
         * @param {RoomCmd.IdragonBall=} [properties] Properties to set
         */
        function dragonBall(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * dragonBall roomId.
         * @member {string} roomId
         * @memberof RoomCmd.dragonBall
         * @instance
         */
        dragonBall.prototype.roomId = "";

        /**
         * dragonBall action.
         * @member {number} action
         * @memberof RoomCmd.dragonBall
         * @instance
         */
        dragonBall.prototype.action = 0;

        /**
         * Encodes the specified dragonBall message. Does not implicitly {@link RoomCmd.dragonBall.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.dragonBall
         * @static
         * @param {RoomCmd.IdragonBall} message dragonBall message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        dragonBall.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.action);
            return writer;
        };

        /**
         * Encodes the specified dragonBall message, length delimited. Does not implicitly {@link RoomCmd.dragonBall.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.dragonBall
         * @static
         * @param {RoomCmd.IdragonBall} message dragonBall message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        dragonBall.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return dragonBall;
    })();

    RoomCmd.getSquareOnlines = (function() {

        /**
         * Properties of a getSquareOnlines.
         * @memberof RoomCmd
         * @interface IgetSquareOnlines
         * @property {number} start getSquareOnlines start
         * @property {number} end getSquareOnlines end
         */

        /**
         * Constructs a new getSquareOnlines.
         * @memberof RoomCmd
         * @classdesc Represents a getSquareOnlines.
         * @implements IgetSquareOnlines
         * @constructor
         * @param {RoomCmd.IgetSquareOnlines=} [properties] Properties to set
         */
        function getSquareOnlines(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getSquareOnlines start.
         * @member {number} start
         * @memberof RoomCmd.getSquareOnlines
         * @instance
         */
        getSquareOnlines.prototype.start = 0;

        /**
         * getSquareOnlines end.
         * @member {number} end
         * @memberof RoomCmd.getSquareOnlines
         * @instance
         */
        getSquareOnlines.prototype.end = 0;

        /**
         * Encodes the specified getSquareOnlines message. Does not implicitly {@link RoomCmd.getSquareOnlines.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getSquareOnlines
         * @static
         * @param {RoomCmd.IgetSquareOnlines} message getSquareOnlines message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getSquareOnlines.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
            return writer;
        };

        /**
         * Encodes the specified getSquareOnlines message, length delimited. Does not implicitly {@link RoomCmd.getSquareOnlines.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getSquareOnlines
         * @static
         * @param {RoomCmd.IgetSquareOnlines} message getSquareOnlines message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getSquareOnlines.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getSquareOnlines;
    })();

    RoomCmd.getUserHeartRank = (function() {

        /**
         * Properties of a getUserHeartRank.
         * @memberof RoomCmd
         * @interface IgetUserHeartRank
         * @property {string} roomId getUserHeartRank roomId
         * @property {string} userId getUserHeartRank userId
         * @property {number|null} [row] getUserHeartRank row
         */

        /**
         * Constructs a new getUserHeartRank.
         * @memberof RoomCmd
         * @classdesc Represents a getUserHeartRank.
         * @implements IgetUserHeartRank
         * @constructor
         * @param {RoomCmd.IgetUserHeartRank=} [properties] Properties to set
         */
        function getUserHeartRank(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getUserHeartRank roomId.
         * @member {string} roomId
         * @memberof RoomCmd.getUserHeartRank
         * @instance
         */
        getUserHeartRank.prototype.roomId = "";

        /**
         * getUserHeartRank userId.
         * @member {string} userId
         * @memberof RoomCmd.getUserHeartRank
         * @instance
         */
        getUserHeartRank.prototype.userId = "";

        /**
         * getUserHeartRank row.
         * @member {number} row
         * @memberof RoomCmd.getUserHeartRank
         * @instance
         */
        getUserHeartRank.prototype.row = 0;

        /**
         * Encodes the specified getUserHeartRank message. Does not implicitly {@link RoomCmd.getUserHeartRank.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getUserHeartRank
         * @static
         * @param {RoomCmd.IgetUserHeartRank} message getUserHeartRank message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserHeartRank.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.userId);
            if (message.row != null && message.hasOwnProperty("row"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.row);
            return writer;
        };

        /**
         * Encodes the specified getUserHeartRank message, length delimited. Does not implicitly {@link RoomCmd.getUserHeartRank.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getUserHeartRank
         * @static
         * @param {RoomCmd.IgetUserHeartRank} message getUserHeartRank message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserHeartRank.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getUserHeartRank;
    })();

    RoomCmd.anchorCheck = (function() {

        /**
         * Properties of an anchorCheck.
         * @memberof RoomCmd
         * @interface IanchorCheck
         * @property {string} roomId anchorCheck roomId
         * @property {number} status anchorCheck status
         */

        /**
         * Constructs a new anchorCheck.
         * @memberof RoomCmd
         * @classdesc Represents an anchorCheck.
         * @implements IanchorCheck
         * @constructor
         * @param {RoomCmd.IanchorCheck=} [properties] Properties to set
         */
        function anchorCheck(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * anchorCheck roomId.
         * @member {string} roomId
         * @memberof RoomCmd.anchorCheck
         * @instance
         */
        anchorCheck.prototype.roomId = "";

        /**
         * anchorCheck status.
         * @member {number} status
         * @memberof RoomCmd.anchorCheck
         * @instance
         */
        anchorCheck.prototype.status = 0;

        /**
         * Encodes the specified anchorCheck message. Does not implicitly {@link RoomCmd.anchorCheck.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.anchorCheck
         * @static
         * @param {RoomCmd.IanchorCheck} message anchorCheck message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        anchorCheck.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.status);
            return writer;
        };

        /**
         * Encodes the specified anchorCheck message, length delimited. Does not implicitly {@link RoomCmd.anchorCheck.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.anchorCheck
         * @static
         * @param {RoomCmd.IanchorCheck} message anchorCheck message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        anchorCheck.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return anchorCheck;
    })();

    RoomCmd.getRoomMicQues = (function() {

        /**
         * Properties of a getRoomMicQues.
         * @memberof RoomCmd
         * @interface IgetRoomMicQues
         * @property {string} roomId getRoomMicQues roomId
         */

        /**
         * Constructs a new getRoomMicQues.
         * @memberof RoomCmd
         * @classdesc Represents a getRoomMicQues.
         * @implements IgetRoomMicQues
         * @constructor
         * @param {RoomCmd.IgetRoomMicQues=} [properties] Properties to set
         */
        function getRoomMicQues(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRoomMicQues roomId.
         * @member {string} roomId
         * @memberof RoomCmd.getRoomMicQues
         * @instance
         */
        getRoomMicQues.prototype.roomId = "";

        /**
         * Encodes the specified getRoomMicQues message. Does not implicitly {@link RoomCmd.getRoomMicQues.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getRoomMicQues
         * @static
         * @param {RoomCmd.IgetRoomMicQues} message getRoomMicQues message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomMicQues.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified getRoomMicQues message, length delimited. Does not implicitly {@link RoomCmd.getRoomMicQues.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getRoomMicQues
         * @static
         * @param {RoomCmd.IgetRoomMicQues} message getRoomMicQues message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomMicQues.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRoomMicQues;
    })();

    RoomCmd.getRoomInfoList = (function() {

        /**
         * Properties of a getRoomInfoList.
         * @memberof RoomCmd
         * @interface IgetRoomInfoList
         * @property {Array.<string>|null} [roomIds] getRoomInfoList roomIds
         */

        /**
         * Constructs a new getRoomInfoList.
         * @memberof RoomCmd
         * @classdesc Represents a getRoomInfoList.
         * @implements IgetRoomInfoList
         * @constructor
         * @param {RoomCmd.IgetRoomInfoList=} [properties] Properties to set
         */
        function getRoomInfoList(properties) {
            this.roomIds = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRoomInfoList roomIds.
         * @member {Array.<string>} roomIds
         * @memberof RoomCmd.getRoomInfoList
         * @instance
         */
        getRoomInfoList.prototype.roomIds = $util.emptyArray;

        /**
         * Encodes the specified getRoomInfoList message. Does not implicitly {@link RoomCmd.getRoomInfoList.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getRoomInfoList
         * @static
         * @param {RoomCmd.IgetRoomInfoList} message getRoomInfoList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomInfoList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomIds != null && message.roomIds.length)
                for (let i = 0; i < message.roomIds.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomIds[i]);
            return writer;
        };

        /**
         * Encodes the specified getRoomInfoList message, length delimited. Does not implicitly {@link RoomCmd.getRoomInfoList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getRoomInfoList
         * @static
         * @param {RoomCmd.IgetRoomInfoList} message getRoomInfoList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomInfoList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRoomInfoList;
    })();

    RoomCmd.getUserHallIds = (function() {

        /**
         * Properties of a getUserHallIds.
         * @memberof RoomCmd
         * @interface IgetUserHallIds
         */

        /**
         * Constructs a new getUserHallIds.
         * @memberof RoomCmd
         * @classdesc Represents a getUserHallIds.
         * @implements IgetUserHallIds
         * @constructor
         * @param {RoomCmd.IgetUserHallIds=} [properties] Properties to set
         */
        function getUserHallIds(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getUserHallIds message. Does not implicitly {@link RoomCmd.getUserHallIds.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getUserHallIds
         * @static
         * @param {RoomCmd.IgetUserHallIds} message getUserHallIds message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserHallIds.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getUserHallIds message, length delimited. Does not implicitly {@link RoomCmd.getUserHallIds.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getUserHallIds
         * @static
         * @param {RoomCmd.IgetUserHallIds} message getUserHallIds message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserHallIds.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getUserHallIds;
    })();

    RoomCmd.getCrossRoomBase = (function() {

        /**
         * Properties of a getCrossRoomBase.
         * @memberof RoomCmd
         * @interface IgetCrossRoomBase
         * @property {string} roomId getCrossRoomBase roomId
         */

        /**
         * Constructs a new getCrossRoomBase.
         * @memberof RoomCmd
         * @classdesc Represents a getCrossRoomBase.
         * @implements IgetCrossRoomBase
         * @constructor
         * @param {RoomCmd.IgetCrossRoomBase=} [properties] Properties to set
         */
        function getCrossRoomBase(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getCrossRoomBase roomId.
         * @member {string} roomId
         * @memberof RoomCmd.getCrossRoomBase
         * @instance
         */
        getCrossRoomBase.prototype.roomId = "";

        /**
         * Encodes the specified getCrossRoomBase message. Does not implicitly {@link RoomCmd.getCrossRoomBase.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getCrossRoomBase
         * @static
         * @param {RoomCmd.IgetCrossRoomBase} message getCrossRoomBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getCrossRoomBase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified getCrossRoomBase message, length delimited. Does not implicitly {@link RoomCmd.getCrossRoomBase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getCrossRoomBase
         * @static
         * @param {RoomCmd.IgetCrossRoomBase} message getCrossRoomBase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getCrossRoomBase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getCrossRoomBase;
    })();

    RoomCmd.getCrossRoomPkLog = (function() {

        /**
         * Properties of a getCrossRoomPkLog.
         * @memberof RoomCmd
         * @interface IgetCrossRoomPkLog
         * @property {string} roomId getCrossRoomPkLog roomId
         * @property {string|null} [lastId] getCrossRoomPkLog lastId
         * @property {number|null} [size] getCrossRoomPkLog size
         */

        /**
         * Constructs a new getCrossRoomPkLog.
         * @memberof RoomCmd
         * @classdesc Represents a getCrossRoomPkLog.
         * @implements IgetCrossRoomPkLog
         * @constructor
         * @param {RoomCmd.IgetCrossRoomPkLog=} [properties] Properties to set
         */
        function getCrossRoomPkLog(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getCrossRoomPkLog roomId.
         * @member {string} roomId
         * @memberof RoomCmd.getCrossRoomPkLog
         * @instance
         */
        getCrossRoomPkLog.prototype.roomId = "";

        /**
         * getCrossRoomPkLog lastId.
         * @member {string} lastId
         * @memberof RoomCmd.getCrossRoomPkLog
         * @instance
         */
        getCrossRoomPkLog.prototype.lastId = "";

        /**
         * getCrossRoomPkLog size.
         * @member {number} size
         * @memberof RoomCmd.getCrossRoomPkLog
         * @instance
         */
        getCrossRoomPkLog.prototype.size = 0;

        /**
         * Encodes the specified getCrossRoomPkLog message. Does not implicitly {@link RoomCmd.getCrossRoomPkLog.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getCrossRoomPkLog
         * @static
         * @param {RoomCmd.IgetCrossRoomPkLog} message getCrossRoomPkLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getCrossRoomPkLog.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            if (message.lastId != null && message.hasOwnProperty("lastId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.lastId);
            if (message.size != null && message.hasOwnProperty("size"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.size);
            return writer;
        };

        /**
         * Encodes the specified getCrossRoomPkLog message, length delimited. Does not implicitly {@link RoomCmd.getCrossRoomPkLog.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getCrossRoomPkLog
         * @static
         * @param {RoomCmd.IgetCrossRoomPkLog} message getCrossRoomPkLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getCrossRoomPkLog.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getCrossRoomPkLog;
    })();

    RoomCmd.getRoomStatus = (function() {

        /**
         * Properties of a getRoomStatus.
         * @memberof RoomCmd
         * @interface IgetRoomStatus
         * @property {Array.<string>|null} [roomIds] getRoomStatus roomIds
         */

        /**
         * Constructs a new getRoomStatus.
         * @memberof RoomCmd
         * @classdesc Represents a getRoomStatus.
         * @implements IgetRoomStatus
         * @constructor
         * @param {RoomCmd.IgetRoomStatus=} [properties] Properties to set
         */
        function getRoomStatus(properties) {
            this.roomIds = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getRoomStatus roomIds.
         * @member {Array.<string>} roomIds
         * @memberof RoomCmd.getRoomStatus
         * @instance
         */
        getRoomStatus.prototype.roomIds = $util.emptyArray;

        /**
         * Encodes the specified getRoomStatus message. Does not implicitly {@link RoomCmd.getRoomStatus.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getRoomStatus
         * @static
         * @param {RoomCmd.IgetRoomStatus} message getRoomStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomIds != null && message.roomIds.length)
                for (let i = 0; i < message.roomIds.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomIds[i]);
            return writer;
        };

        /**
         * Encodes the specified getRoomStatus message, length delimited. Does not implicitly {@link RoomCmd.getRoomStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getRoomStatus
         * @static
         * @param {RoomCmd.IgetRoomStatus} message getRoomStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRoomStatus;
    })();

    RoomCmd.getRoomUserInfo = (function() {

        /**
         * Properties of a getRoomUserInfo.
         * @memberof RoomCmd
         * @interface IgetRoomUserInfo
         */

        /**
         * Constructs a new getRoomUserInfo.
         * @memberof RoomCmd
         * @classdesc Represents a getRoomUserInfo.
         * @implements IgetRoomUserInfo
         * @constructor
         * @param {RoomCmd.IgetRoomUserInfo=} [properties] Properties to set
         */
        function getRoomUserInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getRoomUserInfo message. Does not implicitly {@link RoomCmd.getRoomUserInfo.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getRoomUserInfo
         * @static
         * @param {RoomCmd.IgetRoomUserInfo} message getRoomUserInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomUserInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getRoomUserInfo message, length delimited. Does not implicitly {@link RoomCmd.getRoomUserInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getRoomUserInfo
         * @static
         * @param {RoomCmd.IgetRoomUserInfo} message getRoomUserInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getRoomUserInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getRoomUserInfo;
    })();

    RoomCmd.getDarkRoomMemberList = (function() {

        /**
         * Properties of a getDarkRoomMemberList.
         * @memberof RoomCmd
         * @interface IgetDarkRoomMemberList
         * @property {string} roomId getDarkRoomMemberList roomId
         * @property {number|null} [index] getDarkRoomMemberList index
         */

        /**
         * Constructs a new getDarkRoomMemberList.
         * @memberof RoomCmd
         * @classdesc Represents a getDarkRoomMemberList.
         * @implements IgetDarkRoomMemberList
         * @constructor
         * @param {RoomCmd.IgetDarkRoomMemberList=} [properties] Properties to set
         */
        function getDarkRoomMemberList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getDarkRoomMemberList roomId.
         * @member {string} roomId
         * @memberof RoomCmd.getDarkRoomMemberList
         * @instance
         */
        getDarkRoomMemberList.prototype.roomId = "";

        /**
         * getDarkRoomMemberList index.
         * @member {number} index
         * @memberof RoomCmd.getDarkRoomMemberList
         * @instance
         */
        getDarkRoomMemberList.prototype.index = 0;

        /**
         * Encodes the specified getDarkRoomMemberList message. Does not implicitly {@link RoomCmd.getDarkRoomMemberList.verify|verify} messages.
         * @function encode
         * @memberof RoomCmd.getDarkRoomMemberList
         * @static
         * @param {RoomCmd.IgetDarkRoomMemberList} message getDarkRoomMemberList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getDarkRoomMemberList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.index);
            return writer;
        };

        /**
         * Encodes the specified getDarkRoomMemberList message, length delimited. Does not implicitly {@link RoomCmd.getDarkRoomMemberList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomCmd.getDarkRoomMemberList
         * @static
         * @param {RoomCmd.IgetDarkRoomMemberList} message getDarkRoomMemberList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getDarkRoomMemberList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getDarkRoomMemberList;
    })();

    return RoomCmd;
})();

export const ServiceCmd = $root.ServiceCmd = (() => {

    /**
     * Namespace ServiceCmd.
     * @exports ServiceCmd
     * @namespace
     */
    const ServiceCmd = {};

    ServiceCmd.sendGetMsgCode = (function() {

        /**
         * Properties of a sendGetMsgCode.
         * @memberof ServiceCmd
         * @interface IsendGetMsgCode
         * @property {string} phoneNumber sendGetMsgCode phoneNumber
         * @property {number|null} [msgType] sendGetMsgCode msgType
         * @property {boolean} nocheck sendGetMsgCode nocheck
         * @property {string|null} [appId] sendGetMsgCode appId
         */

        /**
         * Constructs a new sendGetMsgCode.
         * @memberof ServiceCmd
         * @classdesc Represents a sendGetMsgCode.
         * @implements IsendGetMsgCode
         * @constructor
         * @param {ServiceCmd.IsendGetMsgCode=} [properties] Properties to set
         */
        function sendGetMsgCode(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * sendGetMsgCode phoneNumber.
         * @member {string} phoneNumber
         * @memberof ServiceCmd.sendGetMsgCode
         * @instance
         */
        sendGetMsgCode.prototype.phoneNumber = "";

        /**
         * sendGetMsgCode msgType.
         * @member {number} msgType
         * @memberof ServiceCmd.sendGetMsgCode
         * @instance
         */
        sendGetMsgCode.prototype.msgType = 0;

        /**
         * sendGetMsgCode nocheck.
         * @member {boolean} nocheck
         * @memberof ServiceCmd.sendGetMsgCode
         * @instance
         */
        sendGetMsgCode.prototype.nocheck = false;

        /**
         * sendGetMsgCode appId.
         * @member {string} appId
         * @memberof ServiceCmd.sendGetMsgCode
         * @instance
         */
        sendGetMsgCode.prototype.appId = "";

        /**
         * Encodes the specified sendGetMsgCode message. Does not implicitly {@link ServiceCmd.sendGetMsgCode.verify|verify} messages.
         * @function encode
         * @memberof ServiceCmd.sendGetMsgCode
         * @static
         * @param {ServiceCmd.IsendGetMsgCode} message sendGetMsgCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendGetMsgCode.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.phoneNumber);
            if (message.msgType != null && message.hasOwnProperty("msgType"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.msgType);
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.nocheck);
            if (message.appId != null && message.hasOwnProperty("appId"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.appId);
            return writer;
        };

        /**
         * Encodes the specified sendGetMsgCode message, length delimited. Does not implicitly {@link ServiceCmd.sendGetMsgCode.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ServiceCmd.sendGetMsgCode
         * @static
         * @param {ServiceCmd.IsendGetMsgCode} message sendGetMsgCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendGetMsgCode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return sendGetMsgCode;
    })();

    ServiceCmd.clientLog = (function() {

        /**
         * Properties of a clientLog.
         * @memberof ServiceCmd
         * @interface IclientLog
         * @property {Array.<string>|null} [logs] clientLog logs
         */

        /**
         * Constructs a new clientLog.
         * @memberof ServiceCmd
         * @classdesc Represents a clientLog.
         * @implements IclientLog
         * @constructor
         * @param {ServiceCmd.IclientLog=} [properties] Properties to set
         */
        function clientLog(properties) {
            this.logs = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * clientLog logs.
         * @member {Array.<string>} logs
         * @memberof ServiceCmd.clientLog
         * @instance
         */
        clientLog.prototype.logs = $util.emptyArray;

        /**
         * Encodes the specified clientLog message. Does not implicitly {@link ServiceCmd.clientLog.verify|verify} messages.
         * @function encode
         * @memberof ServiceCmd.clientLog
         * @static
         * @param {ServiceCmd.IclientLog} message clientLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        clientLog.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logs != null && message.logs.length)
                for (let i = 0; i < message.logs.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.logs[i]);
            return writer;
        };

        /**
         * Encodes the specified clientLog message, length delimited. Does not implicitly {@link ServiceCmd.clientLog.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ServiceCmd.clientLog
         * @static
         * @param {ServiceCmd.IclientLog} message clientLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        clientLog.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return clientLog;
    })();

    ServiceCmd.checkMatchSms = (function() {

        /**
         * Properties of a checkMatchSms.
         * @memberof ServiceCmd
         * @interface IcheckMatchSms
         * @property {string} phoneNumber checkMatchSms phoneNumber
         * @property {string} code checkMatchSms code
         */

        /**
         * Constructs a new checkMatchSms.
         * @memberof ServiceCmd
         * @classdesc Represents a checkMatchSms.
         * @implements IcheckMatchSms
         * @constructor
         * @param {ServiceCmd.IcheckMatchSms=} [properties] Properties to set
         */
        function checkMatchSms(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * checkMatchSms phoneNumber.
         * @member {string} phoneNumber
         * @memberof ServiceCmd.checkMatchSms
         * @instance
         */
        checkMatchSms.prototype.phoneNumber = "";

        /**
         * checkMatchSms code.
         * @member {string} code
         * @memberof ServiceCmd.checkMatchSms
         * @instance
         */
        checkMatchSms.prototype.code = "";

        /**
         * Encodes the specified checkMatchSms message. Does not implicitly {@link ServiceCmd.checkMatchSms.verify|verify} messages.
         * @function encode
         * @memberof ServiceCmd.checkMatchSms
         * @static
         * @param {ServiceCmd.IcheckMatchSms} message checkMatchSms message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        checkMatchSms.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.phoneNumber);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.code);
            return writer;
        };

        /**
         * Encodes the specified checkMatchSms message, length delimited. Does not implicitly {@link ServiceCmd.checkMatchSms.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ServiceCmd.checkMatchSms
         * @static
         * @param {ServiceCmd.IcheckMatchSms} message checkMatchSms message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        checkMatchSms.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return checkMatchSms;
    })();

    return ServiceCmd;
})();

export const ShortcutMessageCmd = $root.ShortcutMessageCmd = (() => {

    /**
     * Namespace ShortcutMessageCmd.
     * @exports ShortcutMessageCmd
     * @namespace
     */
    const ShortcutMessageCmd = {};

    ShortcutMessageCmd.addShortcutMessage = (function() {

        /**
         * Properties of an addShortcutMessage.
         * @memberof ShortcutMessageCmd
         * @interface IaddShortcutMessage
         * @property {string} userId addShortcutMessage userId
         * @property {string} message addShortcutMessage message
         */

        /**
         * Constructs a new addShortcutMessage.
         * @memberof ShortcutMessageCmd
         * @classdesc Represents an addShortcutMessage.
         * @implements IaddShortcutMessage
         * @constructor
         * @param {ShortcutMessageCmd.IaddShortcutMessage=} [properties] Properties to set
         */
        function addShortcutMessage(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * addShortcutMessage userId.
         * @member {string} userId
         * @memberof ShortcutMessageCmd.addShortcutMessage
         * @instance
         */
        addShortcutMessage.prototype.userId = "";

        /**
         * addShortcutMessage message.
         * @member {string} message
         * @memberof ShortcutMessageCmd.addShortcutMessage
         * @instance
         */
        addShortcutMessage.prototype.message = "";

        /**
         * Encodes the specified addShortcutMessage message. Does not implicitly {@link ShortcutMessageCmd.addShortcutMessage.verify|verify} messages.
         * @function encode
         * @memberof ShortcutMessageCmd.addShortcutMessage
         * @static
         * @param {ShortcutMessageCmd.IaddShortcutMessage} message addShortcutMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        addShortcutMessage.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
            return writer;
        };

        /**
         * Encodes the specified addShortcutMessage message, length delimited. Does not implicitly {@link ShortcutMessageCmd.addShortcutMessage.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ShortcutMessageCmd.addShortcutMessage
         * @static
         * @param {ShortcutMessageCmd.IaddShortcutMessage} message addShortcutMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        addShortcutMessage.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return addShortcutMessage;
    })();

    ShortcutMessageCmd.getShortcutMessageList = (function() {

        /**
         * Properties of a getShortcutMessageList.
         * @memberof ShortcutMessageCmd
         * @interface IgetShortcutMessageList
         * @property {string} userId getShortcutMessageList userId
         */

        /**
         * Constructs a new getShortcutMessageList.
         * @memberof ShortcutMessageCmd
         * @classdesc Represents a getShortcutMessageList.
         * @implements IgetShortcutMessageList
         * @constructor
         * @param {ShortcutMessageCmd.IgetShortcutMessageList=} [properties] Properties to set
         */
        function getShortcutMessageList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getShortcutMessageList userId.
         * @member {string} userId
         * @memberof ShortcutMessageCmd.getShortcutMessageList
         * @instance
         */
        getShortcutMessageList.prototype.userId = "";

        /**
         * Encodes the specified getShortcutMessageList message. Does not implicitly {@link ShortcutMessageCmd.getShortcutMessageList.verify|verify} messages.
         * @function encode
         * @memberof ShortcutMessageCmd.getShortcutMessageList
         * @static
         * @param {ShortcutMessageCmd.IgetShortcutMessageList} message getShortcutMessageList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getShortcutMessageList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified getShortcutMessageList message, length delimited. Does not implicitly {@link ShortcutMessageCmd.getShortcutMessageList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ShortcutMessageCmd.getShortcutMessageList
         * @static
         * @param {ShortcutMessageCmd.IgetShortcutMessageList} message getShortcutMessageList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getShortcutMessageList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getShortcutMessageList;
    })();

    ShortcutMessageCmd.deleteShortcutMessage = (function() {

        /**
         * Properties of a deleteShortcutMessage.
         * @memberof ShortcutMessageCmd
         * @interface IdeleteShortcutMessage
         * @property {string} userId deleteShortcutMessage userId
         * @property {string} id deleteShortcutMessage id
         */

        /**
         * Constructs a new deleteShortcutMessage.
         * @memberof ShortcutMessageCmd
         * @classdesc Represents a deleteShortcutMessage.
         * @implements IdeleteShortcutMessage
         * @constructor
         * @param {ShortcutMessageCmd.IdeleteShortcutMessage=} [properties] Properties to set
         */
        function deleteShortcutMessage(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * deleteShortcutMessage userId.
         * @member {string} userId
         * @memberof ShortcutMessageCmd.deleteShortcutMessage
         * @instance
         */
        deleteShortcutMessage.prototype.userId = "";

        /**
         * deleteShortcutMessage id.
         * @member {string} id
         * @memberof ShortcutMessageCmd.deleteShortcutMessage
         * @instance
         */
        deleteShortcutMessage.prototype.id = "";

        /**
         * Encodes the specified deleteShortcutMessage message. Does not implicitly {@link ShortcutMessageCmd.deleteShortcutMessage.verify|verify} messages.
         * @function encode
         * @memberof ShortcutMessageCmd.deleteShortcutMessage
         * @static
         * @param {ShortcutMessageCmd.IdeleteShortcutMessage} message deleteShortcutMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        deleteShortcutMessage.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.id);
            return writer;
        };

        /**
         * Encodes the specified deleteShortcutMessage message, length delimited. Does not implicitly {@link ShortcutMessageCmd.deleteShortcutMessage.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ShortcutMessageCmd.deleteShortcutMessage
         * @static
         * @param {ShortcutMessageCmd.IdeleteShortcutMessage} message deleteShortcutMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        deleteShortcutMessage.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return deleteShortcutMessage;
    })();

    ShortcutMessageCmd.modifyShortcutMessage = (function() {

        /**
         * Properties of a modifyShortcutMessage.
         * @memberof ShortcutMessageCmd
         * @interface ImodifyShortcutMessage
         * @property {string} userId modifyShortcutMessage userId
         * @property {string} id modifyShortcutMessage id
         * @property {string} newMessage modifyShortcutMessage newMessage
         */

        /**
         * Constructs a new modifyShortcutMessage.
         * @memberof ShortcutMessageCmd
         * @classdesc Represents a modifyShortcutMessage.
         * @implements ImodifyShortcutMessage
         * @constructor
         * @param {ShortcutMessageCmd.ImodifyShortcutMessage=} [properties] Properties to set
         */
        function modifyShortcutMessage(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * modifyShortcutMessage userId.
         * @member {string} userId
         * @memberof ShortcutMessageCmd.modifyShortcutMessage
         * @instance
         */
        modifyShortcutMessage.prototype.userId = "";

        /**
         * modifyShortcutMessage id.
         * @member {string} id
         * @memberof ShortcutMessageCmd.modifyShortcutMessage
         * @instance
         */
        modifyShortcutMessage.prototype.id = "";

        /**
         * modifyShortcutMessage newMessage.
         * @member {string} newMessage
         * @memberof ShortcutMessageCmd.modifyShortcutMessage
         * @instance
         */
        modifyShortcutMessage.prototype.newMessage = "";

        /**
         * Encodes the specified modifyShortcutMessage message. Does not implicitly {@link ShortcutMessageCmd.modifyShortcutMessage.verify|verify} messages.
         * @function encode
         * @memberof ShortcutMessageCmd.modifyShortcutMessage
         * @static
         * @param {ShortcutMessageCmd.ImodifyShortcutMessage} message modifyShortcutMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        modifyShortcutMessage.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.id);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.newMessage);
            return writer;
        };

        /**
         * Encodes the specified modifyShortcutMessage message, length delimited. Does not implicitly {@link ShortcutMessageCmd.modifyShortcutMessage.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ShortcutMessageCmd.modifyShortcutMessage
         * @static
         * @param {ShortcutMessageCmd.ImodifyShortcutMessage} message modifyShortcutMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        modifyShortcutMessage.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return modifyShortcutMessage;
    })();

    ShortcutMessageCmd.sortShortcutMessage = (function() {

        /**
         * Properties of a sortShortcutMessage.
         * @memberof ShortcutMessageCmd
         * @interface IsortShortcutMessage
         * @property {string} userId sortShortcutMessage userId
         * @property {Array.<string>|null} [id] sortShortcutMessage id
         */

        /**
         * Constructs a new sortShortcutMessage.
         * @memberof ShortcutMessageCmd
         * @classdesc Represents a sortShortcutMessage.
         * @implements IsortShortcutMessage
         * @constructor
         * @param {ShortcutMessageCmd.IsortShortcutMessage=} [properties] Properties to set
         */
        function sortShortcutMessage(properties) {
            this.id = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * sortShortcutMessage userId.
         * @member {string} userId
         * @memberof ShortcutMessageCmd.sortShortcutMessage
         * @instance
         */
        sortShortcutMessage.prototype.userId = "";

        /**
         * sortShortcutMessage id.
         * @member {Array.<string>} id
         * @memberof ShortcutMessageCmd.sortShortcutMessage
         * @instance
         */
        sortShortcutMessage.prototype.id = $util.emptyArray;

        /**
         * Encodes the specified sortShortcutMessage message. Does not implicitly {@link ShortcutMessageCmd.sortShortcutMessage.verify|verify} messages.
         * @function encode
         * @memberof ShortcutMessageCmd.sortShortcutMessage
         * @static
         * @param {ShortcutMessageCmd.IsortShortcutMessage} message sortShortcutMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sortShortcutMessage.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.id != null && message.id.length)
                for (let i = 0; i < message.id.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.id[i]);
            return writer;
        };

        /**
         * Encodes the specified sortShortcutMessage message, length delimited. Does not implicitly {@link ShortcutMessageCmd.sortShortcutMessage.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ShortcutMessageCmd.sortShortcutMessage
         * @static
         * @param {ShortcutMessageCmd.IsortShortcutMessage} message sortShortcutMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sortShortcutMessage.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return sortShortcutMessage;
    })();

    return ShortcutMessageCmd;
})();

export const SkillChatCmd = $root.SkillChatCmd = (() => {

    /**
     * Namespace SkillChatCmd.
     * @exports SkillChatCmd
     * @namespace
     */
    const SkillChatCmd = {};

    SkillChatCmd.callAnchor = (function() {

        /**
         * Properties of a callAnchor.
         * @memberof SkillChatCmd
         * @interface IcallAnchor
         * @property {string} anchorId callAnchor anchorId
         * @property {number|null} [waitSec] callAnchor waitSec
         */

        /**
         * Constructs a new callAnchor.
         * @memberof SkillChatCmd
         * @classdesc Represents a callAnchor.
         * @implements IcallAnchor
         * @constructor
         * @param {SkillChatCmd.IcallAnchor=} [properties] Properties to set
         */
        function callAnchor(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * callAnchor anchorId.
         * @member {string} anchorId
         * @memberof SkillChatCmd.callAnchor
         * @instance
         */
        callAnchor.prototype.anchorId = "";

        /**
         * callAnchor waitSec.
         * @member {number} waitSec
         * @memberof SkillChatCmd.callAnchor
         * @instance
         */
        callAnchor.prototype.waitSec = 0;

        /**
         * Encodes the specified callAnchor message. Does not implicitly {@link SkillChatCmd.callAnchor.verify|verify} messages.
         * @function encode
         * @memberof SkillChatCmd.callAnchor
         * @static
         * @param {SkillChatCmd.IcallAnchor} message callAnchor message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        callAnchor.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.anchorId);
            if (message.waitSec != null && message.hasOwnProperty("waitSec"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.waitSec);
            return writer;
        };

        /**
         * Encodes the specified callAnchor message, length delimited. Does not implicitly {@link SkillChatCmd.callAnchor.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SkillChatCmd.callAnchor
         * @static
         * @param {SkillChatCmd.IcallAnchor} message callAnchor message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        callAnchor.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return callAnchor;
    })();

    SkillChatCmd.cancelCall = (function() {

        /**
         * Properties of a cancelCall.
         * @memberof SkillChatCmd
         * @interface IcancelCall
         * @property {string} anchorId cancelCall anchorId
         */

        /**
         * Constructs a new cancelCall.
         * @memberof SkillChatCmd
         * @classdesc Represents a cancelCall.
         * @implements IcancelCall
         * @constructor
         * @param {SkillChatCmd.IcancelCall=} [properties] Properties to set
         */
        function cancelCall(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * cancelCall anchorId.
         * @member {string} anchorId
         * @memberof SkillChatCmd.cancelCall
         * @instance
         */
        cancelCall.prototype.anchorId = "";

        /**
         * Encodes the specified cancelCall message. Does not implicitly {@link SkillChatCmd.cancelCall.verify|verify} messages.
         * @function encode
         * @memberof SkillChatCmd.cancelCall
         * @static
         * @param {SkillChatCmd.IcancelCall} message cancelCall message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cancelCall.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.anchorId);
            return writer;
        };

        /**
         * Encodes the specified cancelCall message, length delimited. Does not implicitly {@link SkillChatCmd.cancelCall.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SkillChatCmd.cancelCall
         * @static
         * @param {SkillChatCmd.IcancelCall} message cancelCall message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        cancelCall.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return cancelCall;
    })();

    SkillChatCmd.pickUpCall = (function() {

        /**
         * Properties of a pickUpCall.
         * @memberof SkillChatCmd
         * @interface IpickUpCall
         */

        /**
         * Constructs a new pickUpCall.
         * @memberof SkillChatCmd
         * @classdesc Represents a pickUpCall.
         * @implements IpickUpCall
         * @constructor
         * @param {SkillChatCmd.IpickUpCall=} [properties] Properties to set
         */
        function pickUpCall(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified pickUpCall message. Does not implicitly {@link SkillChatCmd.pickUpCall.verify|verify} messages.
         * @function encode
         * @memberof SkillChatCmd.pickUpCall
         * @static
         * @param {SkillChatCmd.IpickUpCall} message pickUpCall message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        pickUpCall.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified pickUpCall message, length delimited. Does not implicitly {@link SkillChatCmd.pickUpCall.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SkillChatCmd.pickUpCall
         * @static
         * @param {SkillChatCmd.IpickUpCall} message pickUpCall message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        pickUpCall.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return pickUpCall;
    })();

    SkillChatCmd.getLiveChatList = (function() {

        /**
         * Properties of a getLiveChatList.
         * @memberof SkillChatCmd
         * @interface IgetLiveChatList
         * @property {string} userId getLiveChatList userId
         * @property {string|null} [lastId] getLiveChatList lastId
         * @property {number|null} [row] getLiveChatList row
         * @property {boolean|null} [isAnchor] getLiveChatList isAnchor
         */

        /**
         * Constructs a new getLiveChatList.
         * @memberof SkillChatCmd
         * @classdesc Represents a getLiveChatList.
         * @implements IgetLiveChatList
         * @constructor
         * @param {SkillChatCmd.IgetLiveChatList=} [properties] Properties to set
         */
        function getLiveChatList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getLiveChatList userId.
         * @member {string} userId
         * @memberof SkillChatCmd.getLiveChatList
         * @instance
         */
        getLiveChatList.prototype.userId = "";

        /**
         * getLiveChatList lastId.
         * @member {string} lastId
         * @memberof SkillChatCmd.getLiveChatList
         * @instance
         */
        getLiveChatList.prototype.lastId = "";

        /**
         * getLiveChatList row.
         * @member {number} row
         * @memberof SkillChatCmd.getLiveChatList
         * @instance
         */
        getLiveChatList.prototype.row = 0;

        /**
         * getLiveChatList isAnchor.
         * @member {boolean} isAnchor
         * @memberof SkillChatCmd.getLiveChatList
         * @instance
         */
        getLiveChatList.prototype.isAnchor = false;

        /**
         * Encodes the specified getLiveChatList message. Does not implicitly {@link SkillChatCmd.getLiveChatList.verify|verify} messages.
         * @function encode
         * @memberof SkillChatCmd.getLiveChatList
         * @static
         * @param {SkillChatCmd.IgetLiveChatList} message getLiveChatList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveChatList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.lastId != null && message.hasOwnProperty("lastId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.lastId);
            if (message.row != null && message.hasOwnProperty("row"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.row);
            if (message.isAnchor != null && message.hasOwnProperty("isAnchor"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isAnchor);
            return writer;
        };

        /**
         * Encodes the specified getLiveChatList message, length delimited. Does not implicitly {@link SkillChatCmd.getLiveChatList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SkillChatCmd.getLiveChatList
         * @static
         * @param {SkillChatCmd.IgetLiveChatList} message getLiveChatList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLiveChatList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLiveChatList;
    })();

    SkillChatCmd.getChatEarningList = (function() {

        /**
         * Properties of a getChatEarningList.
         * @memberof SkillChatCmd
         * @interface IgetChatEarningList
         * @property {string} anchorId getChatEarningList anchorId
         * @property {string|null} [lastId] getChatEarningList lastId
         * @property {number|null} [row] getChatEarningList row
         * @property {string|null} [startDate] getChatEarningList startDate
         * @property {string|null} [endDate] getChatEarningList endDate
         */

        /**
         * Constructs a new getChatEarningList.
         * @memberof SkillChatCmd
         * @classdesc Represents a getChatEarningList.
         * @implements IgetChatEarningList
         * @constructor
         * @param {SkillChatCmd.IgetChatEarningList=} [properties] Properties to set
         */
        function getChatEarningList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getChatEarningList anchorId.
         * @member {string} anchorId
         * @memberof SkillChatCmd.getChatEarningList
         * @instance
         */
        getChatEarningList.prototype.anchorId = "";

        /**
         * getChatEarningList lastId.
         * @member {string} lastId
         * @memberof SkillChatCmd.getChatEarningList
         * @instance
         */
        getChatEarningList.prototype.lastId = "";

        /**
         * getChatEarningList row.
         * @member {number} row
         * @memberof SkillChatCmd.getChatEarningList
         * @instance
         */
        getChatEarningList.prototype.row = 0;

        /**
         * getChatEarningList startDate.
         * @member {string} startDate
         * @memberof SkillChatCmd.getChatEarningList
         * @instance
         */
        getChatEarningList.prototype.startDate = "";

        /**
         * getChatEarningList endDate.
         * @member {string} endDate
         * @memberof SkillChatCmd.getChatEarningList
         * @instance
         */
        getChatEarningList.prototype.endDate = "";

        /**
         * Encodes the specified getChatEarningList message. Does not implicitly {@link SkillChatCmd.getChatEarningList.verify|verify} messages.
         * @function encode
         * @memberof SkillChatCmd.getChatEarningList
         * @static
         * @param {SkillChatCmd.IgetChatEarningList} message getChatEarningList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getChatEarningList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.anchorId);
            if (message.lastId != null && message.hasOwnProperty("lastId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.lastId);
            if (message.row != null && message.hasOwnProperty("row"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.row);
            if (message.startDate != null && message.hasOwnProperty("startDate"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.startDate);
            if (message.endDate != null && message.hasOwnProperty("endDate"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.endDate);
            return writer;
        };

        /**
         * Encodes the specified getChatEarningList message, length delimited. Does not implicitly {@link SkillChatCmd.getChatEarningList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SkillChatCmd.getChatEarningList
         * @static
         * @param {SkillChatCmd.IgetChatEarningList} message getChatEarningList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getChatEarningList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getChatEarningList;
    })();

    SkillChatCmd.evalChat = (function() {

        /**
         * Properties of an evalChat.
         * @memberof SkillChatCmd
         * @interface IevalChat
         * @property {string} anchorId evalChat anchorId
         * @property {number|null} [score] evalChat score
         * @property {string|null} ["eval"] evalChat eval
         */

        /**
         * Constructs a new evalChat.
         * @memberof SkillChatCmd
         * @classdesc Represents an evalChat.
         * @implements IevalChat
         * @constructor
         * @param {SkillChatCmd.IevalChat=} [properties] Properties to set
         */
        function evalChat(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * evalChat anchorId.
         * @member {string} anchorId
         * @memberof SkillChatCmd.evalChat
         * @instance
         */
        evalChat.prototype.anchorId = "";

        /**
         * evalChat score.
         * @member {number} score
         * @memberof SkillChatCmd.evalChat
         * @instance
         */
        evalChat.prototype.score = 0;

        /**
         * evalChat eval.
         * @member {string} eval
         * @memberof SkillChatCmd.evalChat
         * @instance
         */
        evalChat.prototype["eval"] = "";

        /**
         * Encodes the specified evalChat message. Does not implicitly {@link SkillChatCmd.evalChat.verify|verify} messages.
         * @function encode
         * @memberof SkillChatCmd.evalChat
         * @static
         * @param {SkillChatCmd.IevalChat} message evalChat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        evalChat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.anchorId);
            if (message.score != null && message.hasOwnProperty("score"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.score);
            if (message["eval"] != null && message.hasOwnProperty("eval"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message["eval"]);
            return writer;
        };

        /**
         * Encodes the specified evalChat message, length delimited. Does not implicitly {@link SkillChatCmd.evalChat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SkillChatCmd.evalChat
         * @static
         * @param {SkillChatCmd.IevalChat} message evalChat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        evalChat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return evalChat;
    })();

    SkillChatCmd.chkChatRoom = (function() {

        /**
         * Properties of a chkChatRoom.
         * @memberof SkillChatCmd
         * @interface IchkChatRoom
         * @property {string} roomId chkChatRoom roomId
         */

        /**
         * Constructs a new chkChatRoom.
         * @memberof SkillChatCmd
         * @classdesc Represents a chkChatRoom.
         * @implements IchkChatRoom
         * @constructor
         * @param {SkillChatCmd.IchkChatRoom=} [properties] Properties to set
         */
        function chkChatRoom(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * chkChatRoom roomId.
         * @member {string} roomId
         * @memberof SkillChatCmd.chkChatRoom
         * @instance
         */
        chkChatRoom.prototype.roomId = "";

        /**
         * Encodes the specified chkChatRoom message. Does not implicitly {@link SkillChatCmd.chkChatRoom.verify|verify} messages.
         * @function encode
         * @memberof SkillChatCmd.chkChatRoom
         * @static
         * @param {SkillChatCmd.IchkChatRoom} message chkChatRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        chkChatRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified chkChatRoom message, length delimited. Does not implicitly {@link SkillChatCmd.chkChatRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SkillChatCmd.chkChatRoom
         * @static
         * @param {SkillChatCmd.IchkChatRoom} message chkChatRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        chkChatRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return chkChatRoom;
    })();

    return SkillChatCmd;
})();

export const SkillCmd = $root.SkillCmd = (() => {

    /**
     * Namespace SkillCmd.
     * @exports SkillCmd
     * @namespace
     */
    const SkillCmd = {};

    SkillCmd.applyUserSkill = (function() {

        /**
         * Properties of an applyUserSkill.
         * @memberof SkillCmd
         * @interface IapplyUserSkill
         * @property {number|null} [type] applyUserSkill type
         * @property {string|null} [picInfoTime] applyUserSkill picInfoTime
         * @property {string|null} [videoInfoTime] applyUserSkill videoInfoTime
         * @property {string|null} [voiceInfoTime] applyUserSkill voiceInfoTime
         * @property {number|null} [price] applyUserSkill price
         * @property {string|null} [note] applyUserSkill note
         * @property {number|null} [voiceTimeSpan] applyUserSkill voiceTimeSpan
         * @property {string|null} [labelIds] applyUserSkill labelIds
         */

        /**
         * Constructs a new applyUserSkill.
         * @memberof SkillCmd
         * @classdesc Represents an applyUserSkill.
         * @implements IapplyUserSkill
         * @constructor
         * @param {SkillCmd.IapplyUserSkill=} [properties] Properties to set
         */
        function applyUserSkill(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * applyUserSkill type.
         * @member {number} type
         * @memberof SkillCmd.applyUserSkill
         * @instance
         */
        applyUserSkill.prototype.type = 0;

        /**
         * applyUserSkill picInfoTime.
         * @member {string} picInfoTime
         * @memberof SkillCmd.applyUserSkill
         * @instance
         */
        applyUserSkill.prototype.picInfoTime = "";

        /**
         * applyUserSkill videoInfoTime.
         * @member {string} videoInfoTime
         * @memberof SkillCmd.applyUserSkill
         * @instance
         */
        applyUserSkill.prototype.videoInfoTime = "";

        /**
         * applyUserSkill voiceInfoTime.
         * @member {string} voiceInfoTime
         * @memberof SkillCmd.applyUserSkill
         * @instance
         */
        applyUserSkill.prototype.voiceInfoTime = "";

        /**
         * applyUserSkill price.
         * @member {number} price
         * @memberof SkillCmd.applyUserSkill
         * @instance
         */
        applyUserSkill.prototype.price = 0;

        /**
         * applyUserSkill note.
         * @member {string} note
         * @memberof SkillCmd.applyUserSkill
         * @instance
         */
        applyUserSkill.prototype.note = "";

        /**
         * applyUserSkill voiceTimeSpan.
         * @member {number} voiceTimeSpan
         * @memberof SkillCmd.applyUserSkill
         * @instance
         */
        applyUserSkill.prototype.voiceTimeSpan = 0;

        /**
         * applyUserSkill labelIds.
         * @member {string} labelIds
         * @memberof SkillCmd.applyUserSkill
         * @instance
         */
        applyUserSkill.prototype.labelIds = "";

        /**
         * Encodes the specified applyUserSkill message. Does not implicitly {@link SkillCmd.applyUserSkill.verify|verify} messages.
         * @function encode
         * @memberof SkillCmd.applyUserSkill
         * @static
         * @param {SkillCmd.IapplyUserSkill} message applyUserSkill message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        applyUserSkill.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            if (message.picInfoTime != null && message.hasOwnProperty("picInfoTime"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.picInfoTime);
            if (message.videoInfoTime != null && message.hasOwnProperty("videoInfoTime"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.videoInfoTime);
            if (message.voiceInfoTime != null && message.hasOwnProperty("voiceInfoTime"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.voiceInfoTime);
            if (message.price != null && message.hasOwnProperty("price"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.price);
            if (message.note != null && message.hasOwnProperty("note"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.note);
            if (message.voiceTimeSpan != null && message.hasOwnProperty("voiceTimeSpan"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.voiceTimeSpan);
            if (message.labelIds != null && message.hasOwnProperty("labelIds"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.labelIds);
            return writer;
        };

        /**
         * Encodes the specified applyUserSkill message, length delimited. Does not implicitly {@link SkillCmd.applyUserSkill.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SkillCmd.applyUserSkill
         * @static
         * @param {SkillCmd.IapplyUserSkill} message applyUserSkill message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        applyUserSkill.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return applyUserSkill;
    })();

    SkillCmd.modifyUserSkillLabels = (function() {

        /**
         * Properties of a modifyUserSkillLabels.
         * @memberof SkillCmd
         * @interface ImodifyUserSkillLabels
         * @property {number} type modifyUserSkillLabels type
         * @property {string} labelIds modifyUserSkillLabels labelIds
         */

        /**
         * Constructs a new modifyUserSkillLabels.
         * @memberof SkillCmd
         * @classdesc Represents a modifyUserSkillLabels.
         * @implements ImodifyUserSkillLabels
         * @constructor
         * @param {SkillCmd.ImodifyUserSkillLabels=} [properties] Properties to set
         */
        function modifyUserSkillLabels(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * modifyUserSkillLabels type.
         * @member {number} type
         * @memberof SkillCmd.modifyUserSkillLabels
         * @instance
         */
        modifyUserSkillLabels.prototype.type = 0;

        /**
         * modifyUserSkillLabels labelIds.
         * @member {string} labelIds
         * @memberof SkillCmd.modifyUserSkillLabels
         * @instance
         */
        modifyUserSkillLabels.prototype.labelIds = "";

        /**
         * Encodes the specified modifyUserSkillLabels message. Does not implicitly {@link SkillCmd.modifyUserSkillLabels.verify|verify} messages.
         * @function encode
         * @memberof SkillCmd.modifyUserSkillLabels
         * @static
         * @param {SkillCmd.ImodifyUserSkillLabels} message modifyUserSkillLabels message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        modifyUserSkillLabels.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.labelIds);
            return writer;
        };

        /**
         * Encodes the specified modifyUserSkillLabels message, length delimited. Does not implicitly {@link SkillCmd.modifyUserSkillLabels.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SkillCmd.modifyUserSkillLabels
         * @static
         * @param {SkillCmd.ImodifyUserSkillLabels} message modifyUserSkillLabels message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        modifyUserSkillLabels.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return modifyUserSkillLabels;
    })();

    SkillCmd.getUserSkillList = (function() {

        /**
         * Properties of a getUserSkillList.
         * @memberof SkillCmd
         * @interface IgetUserSkillList
         * @property {string|null} [userId] getUserSkillList userId
         */

        /**
         * Constructs a new getUserSkillList.
         * @memberof SkillCmd
         * @classdesc Represents a getUserSkillList.
         * @implements IgetUserSkillList
         * @constructor
         * @param {SkillCmd.IgetUserSkillList=} [properties] Properties to set
         */
        function getUserSkillList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getUserSkillList userId.
         * @member {string} userId
         * @memberof SkillCmd.getUserSkillList
         * @instance
         */
        getUserSkillList.prototype.userId = "";

        /**
         * Encodes the specified getUserSkillList message. Does not implicitly {@link SkillCmd.getUserSkillList.verify|verify} messages.
         * @function encode
         * @memberof SkillCmd.getUserSkillList
         * @static
         * @param {SkillCmd.IgetUserSkillList} message getUserSkillList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserSkillList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified getUserSkillList message, length delimited. Does not implicitly {@link SkillCmd.getUserSkillList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SkillCmd.getUserSkillList
         * @static
         * @param {SkillCmd.IgetUserSkillList} message getUserSkillList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserSkillList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getUserSkillList;
    })();

    SkillCmd.getUserSkillInfo = (function() {

        /**
         * Properties of a getUserSkillInfo.
         * @memberof SkillCmd
         * @interface IgetUserSkillInfo
         * @property {string} userId getUserSkillInfo userId
         * @property {number} type getUserSkillInfo type
         */

        /**
         * Constructs a new getUserSkillInfo.
         * @memberof SkillCmd
         * @classdesc Represents a getUserSkillInfo.
         * @implements IgetUserSkillInfo
         * @constructor
         * @param {SkillCmd.IgetUserSkillInfo=} [properties] Properties to set
         */
        function getUserSkillInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getUserSkillInfo userId.
         * @member {string} userId
         * @memberof SkillCmd.getUserSkillInfo
         * @instance
         */
        getUserSkillInfo.prototype.userId = "";

        /**
         * getUserSkillInfo type.
         * @member {number} type
         * @memberof SkillCmd.getUserSkillInfo
         * @instance
         */
        getUserSkillInfo.prototype.type = 0;

        /**
         * Encodes the specified getUserSkillInfo message. Does not implicitly {@link SkillCmd.getUserSkillInfo.verify|verify} messages.
         * @function encode
         * @memberof SkillCmd.getUserSkillInfo
         * @static
         * @param {SkillCmd.IgetUserSkillInfo} message getUserSkillInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserSkillInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified getUserSkillInfo message, length delimited. Does not implicitly {@link SkillCmd.getUserSkillInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SkillCmd.getUserSkillInfo
         * @static
         * @param {SkillCmd.IgetUserSkillInfo} message getUserSkillInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserSkillInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getUserSkillInfo;
    })();

    SkillCmd.listSkill = (function() {

        /**
         * Properties of a listSkill.
         * @memberof SkillCmd
         * @interface IlistSkill
         */

        /**
         * Constructs a new listSkill.
         * @memberof SkillCmd
         * @classdesc Represents a listSkill.
         * @implements IlistSkill
         * @constructor
         * @param {SkillCmd.IlistSkill=} [properties] Properties to set
         */
        function listSkill(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified listSkill message. Does not implicitly {@link SkillCmd.listSkill.verify|verify} messages.
         * @function encode
         * @memberof SkillCmd.listSkill
         * @static
         * @param {SkillCmd.IlistSkill} message listSkill message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listSkill.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified listSkill message, length delimited. Does not implicitly {@link SkillCmd.listSkill.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SkillCmd.listSkill
         * @static
         * @param {SkillCmd.IlistSkill} message listSkill message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listSkill.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return listSkill;
    })();

    SkillCmd.getSkillInfo = (function() {

        /**
         * Properties of a getSkillInfo.
         * @memberof SkillCmd
         * @interface IgetSkillInfo
         * @property {number} skillId getSkillInfo skillId
         */

        /**
         * Constructs a new getSkillInfo.
         * @memberof SkillCmd
         * @classdesc Represents a getSkillInfo.
         * @implements IgetSkillInfo
         * @constructor
         * @param {SkillCmd.IgetSkillInfo=} [properties] Properties to set
         */
        function getSkillInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getSkillInfo skillId.
         * @member {number} skillId
         * @memberof SkillCmd.getSkillInfo
         * @instance
         */
        getSkillInfo.prototype.skillId = 0;

        /**
         * Encodes the specified getSkillInfo message. Does not implicitly {@link SkillCmd.getSkillInfo.verify|verify} messages.
         * @function encode
         * @memberof SkillCmd.getSkillInfo
         * @static
         * @param {SkillCmd.IgetSkillInfo} message getSkillInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getSkillInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.skillId);
            return writer;
        };

        /**
         * Encodes the specified getSkillInfo message, length delimited. Does not implicitly {@link SkillCmd.getSkillInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SkillCmd.getSkillInfo
         * @static
         * @param {SkillCmd.IgetSkillInfo} message getSkillInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getSkillInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getSkillInfo;
    })();

    SkillCmd.querySkillApplyState = (function() {

        /**
         * Properties of a querySkillApplyState.
         * @memberof SkillCmd
         * @interface IquerySkillApplyState
         * @property {string} userId querySkillApplyState userId
         * @property {number} type querySkillApplyState type
         */

        /**
         * Constructs a new querySkillApplyState.
         * @memberof SkillCmd
         * @classdesc Represents a querySkillApplyState.
         * @implements IquerySkillApplyState
         * @constructor
         * @param {SkillCmd.IquerySkillApplyState=} [properties] Properties to set
         */
        function querySkillApplyState(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * querySkillApplyState userId.
         * @member {string} userId
         * @memberof SkillCmd.querySkillApplyState
         * @instance
         */
        querySkillApplyState.prototype.userId = "";

        /**
         * querySkillApplyState type.
         * @member {number} type
         * @memberof SkillCmd.querySkillApplyState
         * @instance
         */
        querySkillApplyState.prototype.type = 0;

        /**
         * Encodes the specified querySkillApplyState message. Does not implicitly {@link SkillCmd.querySkillApplyState.verify|verify} messages.
         * @function encode
         * @memberof SkillCmd.querySkillApplyState
         * @static
         * @param {SkillCmd.IquerySkillApplyState} message querySkillApplyState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        querySkillApplyState.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified querySkillApplyState message, length delimited. Does not implicitly {@link SkillCmd.querySkillApplyState.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SkillCmd.querySkillApplyState
         * @static
         * @param {SkillCmd.IquerySkillApplyState} message querySkillApplyState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        querySkillApplyState.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return querySkillApplyState;
    })();

    SkillCmd.switchNoDisturbMode = (function() {

        /**
         * Properties of a switchNoDisturbMode.
         * @memberof SkillCmd
         * @interface IswitchNoDisturbMode
         * @property {string} userId switchNoDisturbMode userId
         * @property {number} type switchNoDisturbMode type
         */

        /**
         * Constructs a new switchNoDisturbMode.
         * @memberof SkillCmd
         * @classdesc Represents a switchNoDisturbMode.
         * @implements IswitchNoDisturbMode
         * @constructor
         * @param {SkillCmd.IswitchNoDisturbMode=} [properties] Properties to set
         */
        function switchNoDisturbMode(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * switchNoDisturbMode userId.
         * @member {string} userId
         * @memberof SkillCmd.switchNoDisturbMode
         * @instance
         */
        switchNoDisturbMode.prototype.userId = "";

        /**
         * switchNoDisturbMode type.
         * @member {number} type
         * @memberof SkillCmd.switchNoDisturbMode
         * @instance
         */
        switchNoDisturbMode.prototype.type = 0;

        /**
         * Encodes the specified switchNoDisturbMode message. Does not implicitly {@link SkillCmd.switchNoDisturbMode.verify|verify} messages.
         * @function encode
         * @memberof SkillCmd.switchNoDisturbMode
         * @static
         * @param {SkillCmd.IswitchNoDisturbMode} message switchNoDisturbMode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        switchNoDisturbMode.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified switchNoDisturbMode message, length delimited. Does not implicitly {@link SkillCmd.switchNoDisturbMode.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SkillCmd.switchNoDisturbMode
         * @static
         * @param {SkillCmd.IswitchNoDisturbMode} message switchNoDisturbMode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        switchNoDisturbMode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return switchNoDisturbMode;
    })();

    SkillCmd.judgeShouldSendDataCard = (function() {

        /**
         * Properties of a judgeShouldSendDataCard.
         * @memberof SkillCmd
         * @interface IjudgeShouldSendDataCard
         * @property {string} userId judgeShouldSendDataCard userId
         * @property {string} toUserId judgeShouldSendDataCard toUserId
         */

        /**
         * Constructs a new judgeShouldSendDataCard.
         * @memberof SkillCmd
         * @classdesc Represents a judgeShouldSendDataCard.
         * @implements IjudgeShouldSendDataCard
         * @constructor
         * @param {SkillCmd.IjudgeShouldSendDataCard=} [properties] Properties to set
         */
        function judgeShouldSendDataCard(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * judgeShouldSendDataCard userId.
         * @member {string} userId
         * @memberof SkillCmd.judgeShouldSendDataCard
         * @instance
         */
        judgeShouldSendDataCard.prototype.userId = "";

        /**
         * judgeShouldSendDataCard toUserId.
         * @member {string} toUserId
         * @memberof SkillCmd.judgeShouldSendDataCard
         * @instance
         */
        judgeShouldSendDataCard.prototype.toUserId = "";

        /**
         * Encodes the specified judgeShouldSendDataCard message. Does not implicitly {@link SkillCmd.judgeShouldSendDataCard.verify|verify} messages.
         * @function encode
         * @memberof SkillCmd.judgeShouldSendDataCard
         * @static
         * @param {SkillCmd.IjudgeShouldSendDataCard} message judgeShouldSendDataCard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        judgeShouldSendDataCard.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.toUserId);
            return writer;
        };

        /**
         * Encodes the specified judgeShouldSendDataCard message, length delimited. Does not implicitly {@link SkillCmd.judgeShouldSendDataCard.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SkillCmd.judgeShouldSendDataCard
         * @static
         * @param {SkillCmd.IjudgeShouldSendDataCard} message judgeShouldSendDataCard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        judgeShouldSendDataCard.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return judgeShouldSendDataCard;
    })();

    SkillCmd.recordSendDataCard = (function() {

        /**
         * Properties of a recordSendDataCard.
         * @memberof SkillCmd
         * @interface IrecordSendDataCard
         * @property {string} userId recordSendDataCard userId
         * @property {string} toUserId recordSendDataCard toUserId
         */

        /**
         * Constructs a new recordSendDataCard.
         * @memberof SkillCmd
         * @classdesc Represents a recordSendDataCard.
         * @implements IrecordSendDataCard
         * @constructor
         * @param {SkillCmd.IrecordSendDataCard=} [properties] Properties to set
         */
        function recordSendDataCard(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * recordSendDataCard userId.
         * @member {string} userId
         * @memberof SkillCmd.recordSendDataCard
         * @instance
         */
        recordSendDataCard.prototype.userId = "";

        /**
         * recordSendDataCard toUserId.
         * @member {string} toUserId
         * @memberof SkillCmd.recordSendDataCard
         * @instance
         */
        recordSendDataCard.prototype.toUserId = "";

        /**
         * Encodes the specified recordSendDataCard message. Does not implicitly {@link SkillCmd.recordSendDataCard.verify|verify} messages.
         * @function encode
         * @memberof SkillCmd.recordSendDataCard
         * @static
         * @param {SkillCmd.IrecordSendDataCard} message recordSendDataCard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        recordSendDataCard.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.toUserId);
            return writer;
        };

        /**
         * Encodes the specified recordSendDataCard message, length delimited. Does not implicitly {@link SkillCmd.recordSendDataCard.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SkillCmd.recordSendDataCard
         * @static
         * @param {SkillCmd.IrecordSendDataCard} message recordSendDataCard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        recordSendDataCard.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return recordSendDataCard;
    })();

    return SkillCmd;
})();

export const SmashEggCmd = $root.SmashEggCmd = (() => {

    /**
     * Namespace SmashEggCmd.
     * @exports SmashEggCmd
     * @namespace
     */
    const SmashEggCmd = {};

    SmashEggCmd.can = (function() {

        /**
         * Properties of a can.
         * @memberof SmashEggCmd
         * @interface Ican
         * @property {number|null} [action] can action
         * @property {string|null} [eggType] can eggType
         */

        /**
         * Constructs a new can.
         * @memberof SmashEggCmd
         * @classdesc Represents a can.
         * @implements Ican
         * @constructor
         * @param {SmashEggCmd.Ican=} [properties] Properties to set
         */
        function can(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * can action.
         * @member {number} action
         * @memberof SmashEggCmd.can
         * @instance
         */
        can.prototype.action = 0;

        /**
         * can eggType.
         * @member {string} eggType
         * @memberof SmashEggCmd.can
         * @instance
         */
        can.prototype.eggType = "";

        /**
         * Encodes the specified can message. Does not implicitly {@link SmashEggCmd.can.verify|verify} messages.
         * @function encode
         * @memberof SmashEggCmd.can
         * @static
         * @param {SmashEggCmd.Ican} message can message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        can.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.action != null && message.hasOwnProperty("action"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);
            if (message.eggType != null && message.hasOwnProperty("eggType"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.eggType);
            return writer;
        };

        /**
         * Encodes the specified can message, length delimited. Does not implicitly {@link SmashEggCmd.can.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SmashEggCmd.can
         * @static
         * @param {SmashEggCmd.Ican} message can message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        can.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return can;
    })();

    SmashEggCmd.smash = (function() {

        /**
         * Properties of a smash.
         * @memberof SmashEggCmd
         * @interface Ismash
         * @property {number|null} [action] smash action
         * @property {string|null} [eggType] smash eggType
         */

        /**
         * Constructs a new smash.
         * @memberof SmashEggCmd
         * @classdesc Represents a smash.
         * @implements Ismash
         * @constructor
         * @param {SmashEggCmd.Ismash=} [properties] Properties to set
         */
        function smash(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * smash action.
         * @member {number} action
         * @memberof SmashEggCmd.smash
         * @instance
         */
        smash.prototype.action = 0;

        /**
         * smash eggType.
         * @member {string} eggType
         * @memberof SmashEggCmd.smash
         * @instance
         */
        smash.prototype.eggType = "";

        /**
         * Encodes the specified smash message. Does not implicitly {@link SmashEggCmd.smash.verify|verify} messages.
         * @function encode
         * @memberof SmashEggCmd.smash
         * @static
         * @param {SmashEggCmd.Ismash} message smash message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        smash.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.action != null && message.hasOwnProperty("action"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);
            if (message.eggType != null && message.hasOwnProperty("eggType"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.eggType);
            return writer;
        };

        /**
         * Encodes the specified smash message, length delimited. Does not implicitly {@link SmashEggCmd.smash.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SmashEggCmd.smash
         * @static
         * @param {SmashEggCmd.Ismash} message smash message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        smash.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return smash;
    })();

    SmashEggCmd.getLog = (function() {

        /**
         * Properties of a getLog.
         * @memberof SmashEggCmd
         * @interface IgetLog
         */

        /**
         * Constructs a new getLog.
         * @memberof SmashEggCmd
         * @classdesc Represents a getLog.
         * @implements IgetLog
         * @constructor
         * @param {SmashEggCmd.IgetLog=} [properties] Properties to set
         */
        function getLog(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getLog message. Does not implicitly {@link SmashEggCmd.getLog.verify|verify} messages.
         * @function encode
         * @memberof SmashEggCmd.getLog
         * @static
         * @param {SmashEggCmd.IgetLog} message getLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLog.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getLog message, length delimited. Does not implicitly {@link SmashEggCmd.getLog.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SmashEggCmd.getLog
         * @static
         * @param {SmashEggCmd.IgetLog} message getLog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getLog.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getLog;
    })();

    SmashEggCmd.listGift = (function() {

        /**
         * Properties of a listGift.
         * @memberof SmashEggCmd
         * @interface IlistGift
         * @property {string|null} [eggType] listGift eggType
         */

        /**
         * Constructs a new listGift.
         * @memberof SmashEggCmd
         * @classdesc Represents a listGift.
         * @implements IlistGift
         * @constructor
         * @param {SmashEggCmd.IlistGift=} [properties] Properties to set
         */
        function listGift(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * listGift eggType.
         * @member {string} eggType
         * @memberof SmashEggCmd.listGift
         * @instance
         */
        listGift.prototype.eggType = "";

        /**
         * Encodes the specified listGift message. Does not implicitly {@link SmashEggCmd.listGift.verify|verify} messages.
         * @function encode
         * @memberof SmashEggCmd.listGift
         * @static
         * @param {SmashEggCmd.IlistGift} message listGift message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listGift.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eggType != null && message.hasOwnProperty("eggType"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.eggType);
            return writer;
        };

        /**
         * Encodes the specified listGift message, length delimited. Does not implicitly {@link SmashEggCmd.listGift.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SmashEggCmd.listGift
         * @static
         * @param {SmashEggCmd.IlistGift} message listGift message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        listGift.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return listGift;
    })();

    SmashEggCmd.getHorseLamp = (function() {

        /**
         * Properties of a getHorseLamp.
         * @memberof SmashEggCmd
         * @interface IgetHorseLamp
         */

        /**
         * Constructs a new getHorseLamp.
         * @memberof SmashEggCmd
         * @classdesc Represents a getHorseLamp.
         * @implements IgetHorseLamp
         * @constructor
         * @param {SmashEggCmd.IgetHorseLamp=} [properties] Properties to set
         */
        function getHorseLamp(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getHorseLamp message. Does not implicitly {@link SmashEggCmd.getHorseLamp.verify|verify} messages.
         * @function encode
         * @memberof SmashEggCmd.getHorseLamp
         * @static
         * @param {SmashEggCmd.IgetHorseLamp} message getHorseLamp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getHorseLamp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getHorseLamp message, length delimited. Does not implicitly {@link SmashEggCmd.getHorseLamp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SmashEggCmd.getHorseLamp
         * @static
         * @param {SmashEggCmd.IgetHorseLamp} message getHorseLamp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getHorseLamp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getHorseLamp;
    })();

    SmashEggCmd.getSmashList = (function() {

        /**
         * Properties of a getSmashList.
         * @memberof SmashEggCmd
         * @interface IgetSmashList
         */

        /**
         * Constructs a new getSmashList.
         * @memberof SmashEggCmd
         * @classdesc Represents a getSmashList.
         * @implements IgetSmashList
         * @constructor
         * @param {SmashEggCmd.IgetSmashList=} [properties] Properties to set
         */
        function getSmashList(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getSmashList message. Does not implicitly {@link SmashEggCmd.getSmashList.verify|verify} messages.
         * @function encode
         * @memberof SmashEggCmd.getSmashList
         * @static
         * @param {SmashEggCmd.IgetSmashList} message getSmashList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getSmashList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getSmashList message, length delimited. Does not implicitly {@link SmashEggCmd.getSmashList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SmashEggCmd.getSmashList
         * @static
         * @param {SmashEggCmd.IgetSmashList} message getSmashList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getSmashList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getSmashList;
    })();

    return SmashEggCmd;
})();

export const TestCmd = $root.TestCmd = (() => {

    /**
     * Namespace TestCmd.
     * @exports TestCmd
     * @namespace
     */
    const TestCmd = {};

    TestCmd.testCmd = (function() {

        /**
         * Properties of a testCmd.
         * @memberof TestCmd
         * @interface ItestCmd
         * @property {string} niakName testCmd niakName
         */

        /**
         * Constructs a new testCmd.
         * @memberof TestCmd
         * @classdesc Represents a testCmd.
         * @implements ItestCmd
         * @constructor
         * @param {TestCmd.ItestCmd=} [properties] Properties to set
         */
        function testCmd(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * testCmd niakName.
         * @member {string} niakName
         * @memberof TestCmd.testCmd
         * @instance
         */
        testCmd.prototype.niakName = "";

        /**
         * Encodes the specified testCmd message. Does not implicitly {@link TestCmd.testCmd.verify|verify} messages.
         * @function encode
         * @memberof TestCmd.testCmd
         * @static
         * @param {TestCmd.ItestCmd} message testCmd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        testCmd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.niakName);
            return writer;
        };

        /**
         * Encodes the specified testCmd message, length delimited. Does not implicitly {@link TestCmd.testCmd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof TestCmd.testCmd
         * @static
         * @param {TestCmd.ItestCmd} message testCmd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        testCmd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return testCmd;
    })();

    return TestCmd;
})();

export const UserCertificationCmd = $root.UserCertificationCmd = (() => {

    /**
     * Namespace UserCertificationCmd.
     * @exports UserCertificationCmd
     * @namespace
     */
    const UserCertificationCmd = {};

    UserCertificationCmd.postUserCertification = (function() {

        /**
         * Properties of a postUserCertification.
         * @memberof UserCertificationCmd
         * @interface IpostUserCertification
         * @property {string} idCard postUserCertification idCard
         * @property {string} realName postUserCertification realName
         * @property {Uint8Array} imageBytes1 postUserCertification imageBytes1
         * @property {Uint8Array} imageBytes2 postUserCertification imageBytes2
         */

        /**
         * Constructs a new postUserCertification.
         * @memberof UserCertificationCmd
         * @classdesc Represents a postUserCertification.
         * @implements IpostUserCertification
         * @constructor
         * @param {UserCertificationCmd.IpostUserCertification=} [properties] Properties to set
         */
        function postUserCertification(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * postUserCertification idCard.
         * @member {string} idCard
         * @memberof UserCertificationCmd.postUserCertification
         * @instance
         */
        postUserCertification.prototype.idCard = "";

        /**
         * postUserCertification realName.
         * @member {string} realName
         * @memberof UserCertificationCmd.postUserCertification
         * @instance
         */
        postUserCertification.prototype.realName = "";

        /**
         * postUserCertification imageBytes1.
         * @member {Uint8Array} imageBytes1
         * @memberof UserCertificationCmd.postUserCertification
         * @instance
         */
        postUserCertification.prototype.imageBytes1 = $util.newBuffer([]);

        /**
         * postUserCertification imageBytes2.
         * @member {Uint8Array} imageBytes2
         * @memberof UserCertificationCmd.postUserCertification
         * @instance
         */
        postUserCertification.prototype.imageBytes2 = $util.newBuffer([]);

        /**
         * Encodes the specified postUserCertification message. Does not implicitly {@link UserCertificationCmd.postUserCertification.verify|verify} messages.
         * @function encode
         * @memberof UserCertificationCmd.postUserCertification
         * @static
         * @param {UserCertificationCmd.IpostUserCertification} message postUserCertification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        postUserCertification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.idCard);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.realName);
            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.imageBytes1);
            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.imageBytes2);
            return writer;
        };

        /**
         * Encodes the specified postUserCertification message, length delimited. Does not implicitly {@link UserCertificationCmd.postUserCertification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof UserCertificationCmd.postUserCertification
         * @static
         * @param {UserCertificationCmd.IpostUserCertification} message postUserCertification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        postUserCertification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return postUserCertification;
    })();

    UserCertificationCmd.getUserCertification = (function() {

        /**
         * Properties of a getUserCertification.
         * @memberof UserCertificationCmd
         * @interface IgetUserCertification
         */

        /**
         * Constructs a new getUserCertification.
         * @memberof UserCertificationCmd
         * @classdesc Represents a getUserCertification.
         * @implements IgetUserCertification
         * @constructor
         * @param {UserCertificationCmd.IgetUserCertification=} [properties] Properties to set
         */
        function getUserCertification(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified getUserCertification message. Does not implicitly {@link UserCertificationCmd.getUserCertification.verify|verify} messages.
         * @function encode
         * @memberof UserCertificationCmd.getUserCertification
         * @static
         * @param {UserCertificationCmd.IgetUserCertification} message getUserCertification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserCertification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified getUserCertification message, length delimited. Does not implicitly {@link UserCertificationCmd.getUserCertification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof UserCertificationCmd.getUserCertification
         * @static
         * @param {UserCertificationCmd.IgetUserCertification} message getUserCertification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getUserCertification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getUserCertification;
    })();

    UserCertificationCmd.saveUserCertification = (function() {

        /**
         * Properties of a saveUserCertification.
         * @memberof UserCertificationCmd
         * @interface IsaveUserCertification
         * @property {string} idCard saveUserCertification idCard
         * @property {string} realName saveUserCertification realName
         * @property {string|null} [smsCode] saveUserCertification smsCode
         */

        /**
         * Constructs a new saveUserCertification.
         * @memberof UserCertificationCmd
         * @classdesc Represents a saveUserCertification.
         * @implements IsaveUserCertification
         * @constructor
         * @param {UserCertificationCmd.IsaveUserCertification=} [properties] Properties to set
         */
        function saveUserCertification(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * saveUserCertification idCard.
         * @member {string} idCard
         * @memberof UserCertificationCmd.saveUserCertification
         * @instance
         */
        saveUserCertification.prototype.idCard = "";

        /**
         * saveUserCertification realName.
         * @member {string} realName
         * @memberof UserCertificationCmd.saveUserCertification
         * @instance
         */
        saveUserCertification.prototype.realName = "";

        /**
         * saveUserCertification smsCode.
         * @member {string} smsCode
         * @memberof UserCertificationCmd.saveUserCertification
         * @instance
         */
        saveUserCertification.prototype.smsCode = "";

        /**
         * Encodes the specified saveUserCertification message. Does not implicitly {@link UserCertificationCmd.saveUserCertification.verify|verify} messages.
         * @function encode
         * @memberof UserCertificationCmd.saveUserCertification
         * @static
         * @param {UserCertificationCmd.IsaveUserCertification} message saveUserCertification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        saveUserCertification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.idCard);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.realName);
            if (message.smsCode != null && message.hasOwnProperty("smsCode"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.smsCode);
            return writer;
        };

        /**
         * Encodes the specified saveUserCertification message, length delimited. Does not implicitly {@link UserCertificationCmd.saveUserCertification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof UserCertificationCmd.saveUserCertification
         * @static
         * @param {UserCertificationCmd.IsaveUserCertification} message saveUserCertification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        saveUserCertification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return saveUserCertification;
    })();

    return UserCertificationCmd;
})();

export const UserCmd = $root.UserCmd = (() => {

    /**
     * Namespace UserCmd.
     * @exports UserCmd
     * @namespace
     */
    const UserCmd = {};

    UserCmd.login = (function() {

        /**
         * Properties of a login.
         * @memberof UserCmd
         * @interface Ilogin
         * @property {Array.<string>|null} [paramKey] login paramKey
         * @property {Array.<string>|null} [paramValue] login paramValue
         */

        /**
         * Constructs a new login.
         * @memberof UserCmd
         * @classdesc Represents a login.
         * @implements Ilogin
         * @constructor
         * @param {UserCmd.Ilogin=} [properties] Properties to set
         */
        function login(properties) {
            this.paramKey = [];
            this.paramValue = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * login paramKey.
         * @member {Array.<string>} paramKey
         * @memberof UserCmd.login
         * @instance
         */
        login.prototype.paramKey = $util.emptyArray;

        /**
         * login paramValue.
         * @member {Array.<string>} paramValue
         * @memberof UserCmd.login
         * @instance
         */
        login.prototype.paramValue = $util.emptyArray;

        /**
         * Encodes the specified login message. Does not implicitly {@link UserCmd.login.verify|verify} messages.
         * @function encode
         * @memberof UserCmd.login
         * @static
         * @param {UserCmd.Ilogin} message login message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        login.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.paramKey != null && message.paramKey.length)
                for (let i = 0; i < message.paramKey.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.paramKey[i]);
            if (message.paramValue != null && message.paramValue.length)
                for (let i = 0; i < message.paramValue.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.paramValue[i]);
            return writer;
        };

        /**
         * Encodes the specified login message, length delimited. Does not implicitly {@link UserCmd.login.verify|verify} messages.
         * @function encodeDelimited
         * @memberof UserCmd.login
         * @static
         * @param {UserCmd.Ilogin} message login message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        login.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return login;
    })();

    UserCmd.register = (function() {

        /**
         * Properties of a register.
         * @memberof UserCmd
         * @interface Iregister
         * @property {Array.<string>|null} [paramKey] register paramKey
         * @property {Array.<string>|null} [paramValue] register paramValue
         */

        /**
         * Constructs a new register.
         * @memberof UserCmd
         * @classdesc Represents a register.
         * @implements Iregister
         * @constructor
         * @param {UserCmd.Iregister=} [properties] Properties to set
         */
        function register(properties) {
            this.paramKey = [];
            this.paramValue = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * register paramKey.
         * @member {Array.<string>} paramKey
         * @memberof UserCmd.register
         * @instance
         */
        register.prototype.paramKey = $util.emptyArray;

        /**
         * register paramValue.
         * @member {Array.<string>} paramValue
         * @memberof UserCmd.register
         * @instance
         */
        register.prototype.paramValue = $util.emptyArray;

        /**
         * Encodes the specified register message. Does not implicitly {@link UserCmd.register.verify|verify} messages.
         * @function encode
         * @memberof UserCmd.register
         * @static
         * @param {UserCmd.Iregister} message register message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        register.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.paramKey != null && message.paramKey.length)
                for (let i = 0; i < message.paramKey.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.paramKey[i]);
            if (message.paramValue != null && message.paramValue.length)
                for (let i = 0; i < message.paramValue.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.paramValue[i]);
            return writer;
        };

        /**
         * Encodes the specified register message, length delimited. Does not implicitly {@link UserCmd.register.verify|verify} messages.
         * @function encodeDelimited
         * @memberof UserCmd.register
         * @static
         * @param {UserCmd.Iregister} message register message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        register.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return register;
    })();

    UserCmd.logon = (function() {

        /**
         * Properties of a logon.
         * @memberof UserCmd
         * @interface Ilogon
         * @property {string} userId logon userId
         * @property {string} tickToken logon tickToken
         * @property {boolean} relogon logon relogon
         * @property {string|null} [channelId] logon channelId
         * @property {boolean|null} [refToken] logon refToken
         * @property {string|null} [version] logon version
         */

        /**
         * Constructs a new logon.
         * @memberof UserCmd
         * @classdesc Represents a logon.
         * @implements Ilogon
         * @constructor
         * @param {UserCmd.Ilogon=} [properties] Properties to set
         */
        function logon(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * logon userId.
         * @member {string} userId
         * @memberof UserCmd.logon
         * @instance
         */
        logon.prototype.userId = "";

        /**
         * logon tickToken.
         * @member {string} tickToken
         * @memberof UserCmd.logon
         * @instance
         */
        logon.prototype.tickToken = "";

        /**
         * logon relogon.
         * @member {boolean} relogon
         * @memberof UserCmd.logon
         * @instance
         */
        logon.prototype.relogon = false;

        /**
         * logon channelId.
         * @member {string} channelId
         * @memberof UserCmd.logon
         * @instance
         */
        logon.prototype.channelId = "";

        /**
         * logon refToken.
         * @member {boolean} refToken
         * @memberof UserCmd.logon
         * @instance
         */
        logon.prototype.refToken = false;

        /**
         * logon version.
         * @member {string} version
         * @memberof UserCmd.logon
         * @instance
         */
        logon.prototype.version = "";

        /**
         * Encodes the specified logon message. Does not implicitly {@link UserCmd.logon.verify|verify} messages.
         * @function encode
         * @memberof UserCmd.logon
         * @static
         * @param {UserCmd.Ilogon} message logon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        logon.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.tickToken);
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.relogon);
            if (message.channelId != null && message.hasOwnProperty("channelId"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.channelId);
            if (message.refToken != null && message.hasOwnProperty("refToken"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.refToken);
            if (message.version != null && message.hasOwnProperty("version"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.version);
            return writer;
        };

        /**
         * Encodes the specified logon message, length delimited. Does not implicitly {@link UserCmd.logon.verify|verify} messages.
         * @function encodeDelimited
         * @memberof UserCmd.logon
         * @static
         * @param {UserCmd.Ilogon} message logon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        logon.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return logon;
    })();

    UserCmd.offline = (function() {

        /**
         * Properties of an offline.
         * @memberof UserCmd
         * @interface Ioffline
         */

        /**
         * Constructs a new offline.
         * @memberof UserCmd
         * @classdesc Represents an offline.
         * @implements Ioffline
         * @constructor
         * @param {UserCmd.Ioffline=} [properties] Properties to set
         */
        function offline(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified offline message. Does not implicitly {@link UserCmd.offline.verify|verify} messages.
         * @function encode
         * @memberof UserCmd.offline
         * @static
         * @param {UserCmd.Ioffline} message offline message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        offline.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified offline message, length delimited. Does not implicitly {@link UserCmd.offline.verify|verify} messages.
         * @function encodeDelimited
         * @memberof UserCmd.offline
         * @static
         * @param {UserCmd.Ioffline} message offline message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        offline.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return offline;
    })();

    UserCmd.sysoffline = (function() {

        /**
         * Properties of a sysoffline.
         * @memberof UserCmd
         * @interface Isysoffline
         */

        /**
         * Constructs a new sysoffline.
         * @memberof UserCmd
         * @classdesc Represents a sysoffline.
         * @implements Isysoffline
         * @constructor
         * @param {UserCmd.Isysoffline=} [properties] Properties to set
         */
        function sysoffline(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified sysoffline message. Does not implicitly {@link UserCmd.sysoffline.verify|verify} messages.
         * @function encode
         * @memberof UserCmd.sysoffline
         * @static
         * @param {UserCmd.Isysoffline} message sysoffline message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sysoffline.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified sysoffline message, length delimited. Does not implicitly {@link UserCmd.sysoffline.verify|verify} messages.
         * @function encodeDelimited
         * @memberof UserCmd.sysoffline
         * @static
         * @param {UserCmd.Isysoffline} message sysoffline message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sysoffline.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return sysoffline;
    })();

    UserCmd.retrievePwd = (function() {

        /**
         * Properties of a retrievePwd.
         * @memberof UserCmd
         * @interface IretrievePwd
         * @property {string} phoneNumber retrievePwd phoneNumber
         * @property {string} msgCode retrievePwd msgCode
         * @property {string} password retrievePwd password
         */

        /**
         * Constructs a new retrievePwd.
         * @memberof UserCmd
         * @classdesc Represents a retrievePwd.
         * @implements IretrievePwd
         * @constructor
         * @param {UserCmd.IretrievePwd=} [properties] Properties to set
         */
        function retrievePwd(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * retrievePwd phoneNumber.
         * @member {string} phoneNumber
         * @memberof UserCmd.retrievePwd
         * @instance
         */
        retrievePwd.prototype.phoneNumber = "";

        /**
         * retrievePwd msgCode.
         * @member {string} msgCode
         * @memberof UserCmd.retrievePwd
         * @instance
         */
        retrievePwd.prototype.msgCode = "";

        /**
         * retrievePwd password.
         * @member {string} password
         * @memberof UserCmd.retrievePwd
         * @instance
         */
        retrievePwd.prototype.password = "";

        /**
         * Encodes the specified retrievePwd message. Does not implicitly {@link UserCmd.retrievePwd.verify|verify} messages.
         * @function encode
         * @memberof UserCmd.retrievePwd
         * @static
         * @param {UserCmd.IretrievePwd} message retrievePwd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        retrievePwd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.phoneNumber);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.msgCode);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.password);
            return writer;
        };

        /**
         * Encodes the specified retrievePwd message, length delimited. Does not implicitly {@link UserCmd.retrievePwd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof UserCmd.retrievePwd
         * @static
         * @param {UserCmd.IretrievePwd} message retrievePwd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        retrievePwd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return retrievePwd;
    })();

    UserCmd.verifySmsCode = (function() {

        /**
         * Properties of a verifySmsCode.
         * @memberof UserCmd
         * @interface IverifySmsCode
         * @property {string} phoneNumber verifySmsCode phoneNumber
         * @property {string} msgCode verifySmsCode msgCode
         */

        /**
         * Constructs a new verifySmsCode.
         * @memberof UserCmd
         * @classdesc Represents a verifySmsCode.
         * @implements IverifySmsCode
         * @constructor
         * @param {UserCmd.IverifySmsCode=} [properties] Properties to set
         */
        function verifySmsCode(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * verifySmsCode phoneNumber.
         * @member {string} phoneNumber
         * @memberof UserCmd.verifySmsCode
         * @instance
         */
        verifySmsCode.prototype.phoneNumber = "";

        /**
         * verifySmsCode msgCode.
         * @member {string} msgCode
         * @memberof UserCmd.verifySmsCode
         * @instance
         */
        verifySmsCode.prototype.msgCode = "";

        /**
         * Encodes the specified verifySmsCode message. Does not implicitly {@link UserCmd.verifySmsCode.verify|verify} messages.
         * @function encode
         * @memberof UserCmd.verifySmsCode
         * @static
         * @param {UserCmd.IverifySmsCode} message verifySmsCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        verifySmsCode.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.phoneNumber);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.msgCode);
            return writer;
        };

        /**
         * Encodes the specified verifySmsCode message, length delimited. Does not implicitly {@link UserCmd.verifySmsCode.verify|verify} messages.
         * @function encodeDelimited
         * @memberof UserCmd.verifySmsCode
         * @static
         * @param {UserCmd.IverifySmsCode} message verifySmsCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        verifySmsCode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return verifySmsCode;
    })();

    UserCmd.heartBeat = (function() {

        /**
         * Properties of a heartBeat.
         * @memberof UserCmd
         * @interface IheartBeat
         */

        /**
         * Constructs a new heartBeat.
         * @memberof UserCmd
         * @classdesc Represents a heartBeat.
         * @implements IheartBeat
         * @constructor
         * @param {UserCmd.IheartBeat=} [properties] Properties to set
         */
        function heartBeat(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Encodes the specified heartBeat message. Does not implicitly {@link UserCmd.heartBeat.verify|verify} messages.
         * @function encode
         * @memberof UserCmd.heartBeat
         * @static
         * @param {UserCmd.IheartBeat} message heartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        heartBeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified heartBeat message, length delimited. Does not implicitly {@link UserCmd.heartBeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof UserCmd.heartBeat
         * @static
         * @param {UserCmd.IheartBeat} message heartBeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        heartBeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return heartBeat;
    })();

    UserCmd.logonTcp = (function() {

        /**
         * Properties of a logonTcp.
         * @memberof UserCmd
         * @interface IlogonTcp
         * @property {string} userId logonTcp userId
         * @property {string} tickToken logonTcp tickToken
         */

        /**
         * Constructs a new logonTcp.
         * @memberof UserCmd
         * @classdesc Represents a logonTcp.
         * @implements IlogonTcp
         * @constructor
         * @param {UserCmd.IlogonTcp=} [properties] Properties to set
         */
        function logonTcp(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * logonTcp userId.
         * @member {string} userId
         * @memberof UserCmd.logonTcp
         * @instance
         */
        logonTcp.prototype.userId = "";

        /**
         * logonTcp tickToken.
         * @member {string} tickToken
         * @memberof UserCmd.logonTcp
         * @instance
         */
        logonTcp.prototype.tickToken = "";

        /**
         * Encodes the specified logonTcp message. Does not implicitly {@link UserCmd.logonTcp.verify|verify} messages.
         * @function encode
         * @memberof UserCmd.logonTcp
         * @static
         * @param {UserCmd.IlogonTcp} message logonTcp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        logonTcp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.tickToken);
            return writer;
        };

        /**
         * Encodes the specified logonTcp message, length delimited. Does not implicitly {@link UserCmd.logonTcp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof UserCmd.logonTcp
         * @static
         * @param {UserCmd.IlogonTcp} message logonTcp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        logonTcp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return logonTcp;
    })();

    UserCmd.getChannelInfo = (function() {

        /**
         * Properties of a getChannelInfo.
         * @memberof UserCmd
         * @interface IgetChannelInfo
         * @property {string} channelId getChannelInfo channelId
         */

        /**
         * Constructs a new getChannelInfo.
         * @memberof UserCmd
         * @classdesc Represents a getChannelInfo.
         * @implements IgetChannelInfo
         * @constructor
         * @param {UserCmd.IgetChannelInfo=} [properties] Properties to set
         */
        function getChannelInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getChannelInfo channelId.
         * @member {string} channelId
         * @memberof UserCmd.getChannelInfo
         * @instance
         */
        getChannelInfo.prototype.channelId = "";

        /**
         * Encodes the specified getChannelInfo message. Does not implicitly {@link UserCmd.getChannelInfo.verify|verify} messages.
         * @function encode
         * @memberof UserCmd.getChannelInfo
         * @static
         * @param {UserCmd.IgetChannelInfo} message getChannelInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getChannelInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.channelId);
            return writer;
        };

        /**
         * Encodes the specified getChannelInfo message, length delimited. Does not implicitly {@link UserCmd.getChannelInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof UserCmd.getChannelInfo
         * @static
         * @param {UserCmd.IgetChannelInfo} message getChannelInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getChannelInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        return getChannelInfo;
    })();

    return UserCmd;
})();

export { $root as default };
